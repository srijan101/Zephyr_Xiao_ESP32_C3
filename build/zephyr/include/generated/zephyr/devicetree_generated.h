/*
 * Generated by gen_defines.py
 *
 * DTS input file:
 *   /Volumes/Project/Zephyr_Project/Esp32_C3_project/build/zephyr/zephyr.dts.pre
 *
 * Directories with bindings:
 *   $ZEPHYR_BASE/dts/bindings
 *
 * Node dependency ordering (ordinal and path):
 *   0   /
 *   1   /aliases
 *   2   /chosen
 *   3   /connector
 *   4   /esp32_bt_hci
 *   5   /wifi
 *   6   /cpus
 *   7   /cpus/power-states
 *   8   /cpus/power-states/deep_sleep
 *   9   /cpus/power-states/light_sleep
 *   10  /cpus/cpu@0
 *   11  /pin-controller
 *   12  /pin-controller/i2c0_default
 *   13  /pin-controller/i2c0_default/group1
 *   14  /pin-controller/spim2_default
 *   15  /pin-controller/spim2_default/group1
 *   16  /pin-controller/spim2_default/group2
 *   17  /pin-controller/twai_default
 *   18  /pin-controller/twai_default/group1
 *   19  /pin-controller/uart0_default
 *   20  /pin-controller/uart0_default/group1
 *   21  /pin-controller/uart0_default/group2
 *   22  /soc
 *   23  /soc/adc@60040000
 *   24  /soc/adc@60040004
 *   25  /soc/interrupt-controller@600c2000
 *   26  /soc/rtc@60008000
 *   27  /soc/can@6002b000
 *   28  /soc/coretemp@60040058
 *   29  /soc/counter@6001f000
 *   30  /soc/counter@60020000
 *   31  /soc/gpio@60004000
 *   32  /soc/i2c@60013000
 *   33  /soc/dma@6003f000
 *   34  /soc/i2s@6002d000
 *   35  /soc/ledc@60019000
 *   36  /soc/memory@3fc80000
 *   37  /soc/memory@4037c000
 *   38  /soc/rtc_timer@60008004
 *   39  /soc/spi@60024000
 *   40  /soc/systimer@60023000
 *   41  /soc/trng@3ff700b0
 *   42  /soc/uart@60000000
 *   43  /soc/uart@60010000
 *   44  /soc/uart@60043000
 *   45  /soc/watchdog@6001f048
 *   46  /soc/watchdog@60020048
 *   47  /soc/xt_wdt@60008004
 *   48  /soc/flash-controller@60002000
 *   49  /soc/flash-controller@60002000/flash@0
 *   50  /soc/flash-controller@60002000/flash@0/partitions
 *   51  /soc/flash-controller@60002000/flash@0/partitions/partition@0
 *   52  /soc/flash-controller@60002000/flash@0/partitions/partition@20000
 *   53  /soc/flash-controller@60002000/flash@0/partitions/partition@1F0000
 *   54  /soc/flash-controller@60002000/flash@0/partitions/partition@3C0000
 *   55  /soc/flash-controller@60002000/flash@0/partitions/partition@3E0000
 *   56  /soc/flash-controller@60002000/flash@0/partitions/partition@3F0000
 *
 * Definitions derived from these nodes in dependency order are next,
 * followed by /chosen nodes.
 */

/* Used to remove brackets from around a single argument */
#define DT_DEBRACKET_INTERNAL(...) __VA_ARGS__

/*
 * Devicetree node: /
 *
 * Node identifier: DT_N
 */

/* Node's full path: */
#define DT_N_PATH "/"

/* Node's name with unit-address: */
#define DT_N_FULL_NAME "/"
#define DT_N_FULL_NAME_UNQUOTED /
#define DT_N_FULL_NAME_TOKEN _
#define DT_N_FULL_NAME_UPPER_TOKEN _

/* Helpers for dealing with node labels: */
#define DT_N_NODELABEL_NUM 0
#define DT_N_FOREACH_NODELABEL(fn) 
#define DT_N_FOREACH_NODELABEL_VARGS(fn, ...) 
#define DT_N_FOREACH_ANCESTOR(fn) 

/* Helper macros for child nodes of this node. */
#define DT_N_CHILD_NUM 8
#define DT_N_CHILD_NUM_STATUS_OKAY 8
#define DT_N_FOREACH_CHILD(fn) fn(DT_N_S_aliases) fn(DT_N_S_chosen) fn(DT_N_S_cpus) fn(DT_N_S_pin_controller) fn(DT_N_S_wifi) fn(DT_N_S_esp32_bt_hci) fn(DT_N_S_soc) fn(DT_N_S_connector)
#define DT_N_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_aliases) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_chosen) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_wifi) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_esp32_bt_hci) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_connector)
#define DT_N_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_pin_controller, __VA_ARGS__) fn(DT_N_S_wifi, __VA_ARGS__) fn(DT_N_S_esp32_bt_hci, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_connector, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_aliases, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_chosen, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_wifi, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_esp32_bt_hci, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_connector, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_aliases) fn(DT_N_S_chosen) fn(DT_N_S_cpus) fn(DT_N_S_pin_controller) fn(DT_N_S_wifi) fn(DT_N_S_esp32_bt_hci) fn(DT_N_S_soc) fn(DT_N_S_connector)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_aliases) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_chosen) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_wifi) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_esp32_bt_hci) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_connector)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_pin_controller, __VA_ARGS__) fn(DT_N_S_wifi, __VA_ARGS__) fn(DT_N_S_esp32_bt_hci, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_connector, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_aliases, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_chosen, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_wifi, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_esp32_bt_hci, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_connector, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_ORD 0
#define DT_N_ORD_STR_SORTABLE 00000

/* Ordinals for what this node depends on directly: */
#define DT_N_REQUIRES_ORDS /* nothing */

/* Ordinals for what depends directly on this node: */
#define DT_N_SUPPORTS_ORDS \
	1, /* /aliases */ \
	2, /* /chosen */ \
	3, /* /connector */ \
	4, /* /esp32_bt_hci */ \
	5, /* /wifi */ \
	6, /* /cpus */ \
	11, /* /pin-controller */ \
	22, /* /soc */

/* Existence and alternate IDs: */
#define DT_N_EXISTS 1
#define DT_N_INST_0_seeed_xiao_esp32c3 DT_N

/* Macros for properties that are special in the specification: */
#define DT_N_REG_NUM 0
#define DT_N_RANGES_NUM 0
#define DT_N_FOREACH_RANGE(fn) 
#define DT_N_IRQ_NUM 0
#define DT_N_IRQ_LEVEL 0
#define DT_N_COMPAT_MATCHES_seeed_xiao_esp32c3 1
#define DT_N_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_COMPAT_VENDOR_IDX_0 "Seeed Technology Co., Ltd"
#define DT_N_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_COMPAT_MODEL_IDX_0 "xiao-esp32c3"
#define DT_N_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_P_compatible {"seeed,xiao-esp32c3"}
#define DT_N_P_compatible_IDX_0_EXISTS 1
#define DT_N_P_compatible_IDX_0 "seeed,xiao-esp32c3"
#define DT_N_P_compatible_IDX_0_STRING_UNQUOTED seeed,xiao-esp32c3
#define DT_N_P_compatible_IDX_0_STRING_TOKEN seeed_xiao_esp32c3
#define DT_N_P_compatible_IDX_0_STRING_UPPER_TOKEN SEEED_XIAO_ESP32C3
#define DT_N_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N, compatible, 0)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N, compatible, 0)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N, compatible, 0, __VA_ARGS__)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N, compatible, 0, __VA_ARGS__)
#define DT_N_P_compatible_LEN 1
#define DT_N_P_compatible_EXISTS 1

/*
 * Devicetree node: /aliases
 *
 * Node identifier: DT_N_S_aliases
 */

/* Node's full path: */
#define DT_N_S_aliases_PATH "/aliases"

/* Node's name with unit-address: */
#define DT_N_S_aliases_FULL_NAME "aliases"
#define DT_N_S_aliases_FULL_NAME_UNQUOTED aliases
#define DT_N_S_aliases_FULL_NAME_TOKEN aliases
#define DT_N_S_aliases_FULL_NAME_UPPER_TOKEN ALIASES

/* Node parent (/) identifier: */
#define DT_N_S_aliases_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_aliases_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_aliases_NODELABEL_NUM 0
#define DT_N_S_aliases_FOREACH_NODELABEL(fn) 
#define DT_N_S_aliases_FOREACH_NODELABEL_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_ANCESTOR(fn) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_aliases_CHILD_NUM 0
#define DT_N_S_aliases_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_aliases_FOREACH_CHILD(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_aliases_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_aliases_ORD 1
#define DT_N_S_aliases_ORD_STR_SORTABLE 00001

/* Ordinals for what this node depends on directly: */
#define DT_N_S_aliases_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_aliases_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_aliases_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_aliases_REG_NUM 0
#define DT_N_S_aliases_RANGES_NUM 0
#define DT_N_S_aliases_FOREACH_RANGE(fn) 
#define DT_N_S_aliases_IRQ_NUM 0
#define DT_N_S_aliases_IRQ_LEVEL 0
#define DT_N_S_aliases_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_aliases_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /chosen
 *
 * Node identifier: DT_N_S_chosen
 */

/* Node's full path: */
#define DT_N_S_chosen_PATH "/chosen"

/* Node's name with unit-address: */
#define DT_N_S_chosen_FULL_NAME "chosen"
#define DT_N_S_chosen_FULL_NAME_UNQUOTED chosen
#define DT_N_S_chosen_FULL_NAME_TOKEN chosen
#define DT_N_S_chosen_FULL_NAME_UPPER_TOKEN CHOSEN

/* Node parent (/) identifier: */
#define DT_N_S_chosen_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_chosen_CHILD_IDX 1

/* Helpers for dealing with node labels: */
#define DT_N_S_chosen_NODELABEL_NUM 0
#define DT_N_S_chosen_FOREACH_NODELABEL(fn) 
#define DT_N_S_chosen_FOREACH_NODELABEL_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_ANCESTOR(fn) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_chosen_CHILD_NUM 0
#define DT_N_S_chosen_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_chosen_FOREACH_CHILD(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_chosen_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_chosen_ORD 2
#define DT_N_S_chosen_ORD_STR_SORTABLE 00002

/* Ordinals for what this node depends on directly: */
#define DT_N_S_chosen_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_chosen_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_chosen_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_chosen_REG_NUM 0
#define DT_N_S_chosen_RANGES_NUM 0
#define DT_N_S_chosen_FOREACH_RANGE(fn) 
#define DT_N_S_chosen_IRQ_NUM 0
#define DT_N_S_chosen_IRQ_LEVEL 0
#define DT_N_S_chosen_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_chosen_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /connector
 *
 * Node identifier: DT_N_S_connector
 *
 * Binding (compatible = seeed,xiao-gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/seeed-xiao-header.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_connector_PATH "/connector"

/* Node's name with unit-address: */
#define DT_N_S_connector_FULL_NAME "connector"
#define DT_N_S_connector_FULL_NAME_UNQUOTED connector
#define DT_N_S_connector_FULL_NAME_TOKEN connector
#define DT_N_S_connector_FULL_NAME_UPPER_TOKEN CONNECTOR

/* Node parent (/) identifier: */
#define DT_N_S_connector_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_connector_CHILD_IDX 7

/* Helpers for dealing with node labels: */
#define DT_N_S_connector_NODELABEL_NUM 1
#define DT_N_S_connector_FOREACH_NODELABEL(fn) fn(xiao_d)
#define DT_N_S_connector_FOREACH_NODELABEL_VARGS(fn, ...) fn(xiao_d, __VA_ARGS__)
#define DT_N_S_connector_FOREACH_ANCESTOR(fn) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_connector_CHILD_NUM 0
#define DT_N_S_connector_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_connector_FOREACH_CHILD(fn) 
#define DT_N_S_connector_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_connector_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_connector_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_connector_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_connector_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_connector_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_connector_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_connector_ORD 3
#define DT_N_S_connector_ORD_STR_SORTABLE 00003

/* Ordinals for what this node depends on directly: */
#define DT_N_S_connector_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_connector_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_connector_EXISTS 1
#define DT_N_INST_0_seeed_xiao_gpio DT_N_S_connector
#define DT_N_NODELABEL_xiao_d       DT_N_S_connector

/* Macros for properties that are special in the specification: */
#define DT_N_S_connector_REG_NUM 0
#define DT_N_S_connector_RANGES_NUM 0
#define DT_N_S_connector_FOREACH_RANGE(fn) 
#define DT_N_S_connector_IRQ_NUM 0
#define DT_N_S_connector_IRQ_LEVEL 0
#define DT_N_S_connector_COMPAT_MATCHES_seeed_xiao_gpio 1
#define DT_N_S_connector_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_connector_COMPAT_VENDOR_IDX_0 "Seeed Technology Co., Ltd"
#define DT_N_S_connector_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_connector_COMPAT_MODEL_IDX_0 "xiao-gpio"
#define DT_N_S_connector_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_connector_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_connector_P_compatible {"seeed,xiao-gpio"}
#define DT_N_S_connector_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_connector_P_compatible_IDX_0 "seeed,xiao-gpio"
#define DT_N_S_connector_P_compatible_IDX_0_STRING_UNQUOTED seeed,xiao-gpio
#define DT_N_S_connector_P_compatible_IDX_0_STRING_TOKEN seeed_xiao_gpio
#define DT_N_S_connector_P_compatible_IDX_0_STRING_UPPER_TOKEN SEEED_XIAO_GPIO
#define DT_N_S_connector_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_connector, compatible, 0)
#define DT_N_S_connector_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_connector, compatible, 0)
#define DT_N_S_connector_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_connector, compatible, 0, __VA_ARGS__)
#define DT_N_S_connector_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_connector, compatible, 0, __VA_ARGS__)
#define DT_N_S_connector_P_compatible_LEN 1
#define DT_N_S_connector_P_compatible_EXISTS 1
#define DT_N_S_connector_P_zephyr_deferred_init 0
#define DT_N_S_connector_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_connector_P_wakeup_source 0
#define DT_N_S_connector_P_wakeup_source_EXISTS 1
#define DT_N_S_connector_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_connector_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /esp32_bt_hci
 *
 * Node identifier: DT_N_S_esp32_bt_hci
 *
 * Binding (compatible = espressif,esp32-bt-hci):
 *   $ZEPHYR_BASE/dts/bindings/bluetooth/espressif,esp32-bt-hci.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_esp32_bt_hci_PATH "/esp32_bt_hci"

/* Node's name with unit-address: */
#define DT_N_S_esp32_bt_hci_FULL_NAME "esp32_bt_hci"
#define DT_N_S_esp32_bt_hci_FULL_NAME_UNQUOTED esp32_bt_hci
#define DT_N_S_esp32_bt_hci_FULL_NAME_TOKEN esp32_bt_hci
#define DT_N_S_esp32_bt_hci_FULL_NAME_UPPER_TOKEN ESP32_BT_HCI

/* Node parent (/) identifier: */
#define DT_N_S_esp32_bt_hci_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_esp32_bt_hci_CHILD_IDX 5

/* Helpers for dealing with node labels: */
#define DT_N_S_esp32_bt_hci_NODELABEL_NUM 1
#define DT_N_S_esp32_bt_hci_FOREACH_NODELABEL(fn) fn(esp32_bt_hci)
#define DT_N_S_esp32_bt_hci_FOREACH_NODELABEL_VARGS(fn, ...) fn(esp32_bt_hci, __VA_ARGS__)
#define DT_N_S_esp32_bt_hci_FOREACH_ANCESTOR(fn) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_esp32_bt_hci_CHILD_NUM 0
#define DT_N_S_esp32_bt_hci_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_esp32_bt_hci_FOREACH_CHILD(fn) 
#define DT_N_S_esp32_bt_hci_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_esp32_bt_hci_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_esp32_bt_hci_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_esp32_bt_hci_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_esp32_bt_hci_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_esp32_bt_hci_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_esp32_bt_hci_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_esp32_bt_hci_ORD 4
#define DT_N_S_esp32_bt_hci_ORD_STR_SORTABLE 00004

/* Ordinals for what this node depends on directly: */
#define DT_N_S_esp32_bt_hci_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_esp32_bt_hci_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_esp32_bt_hci_EXISTS 1
#define DT_N_INST_0_espressif_esp32_bt_hci DT_N_S_esp32_bt_hci
#define DT_N_NODELABEL_esp32_bt_hci        DT_N_S_esp32_bt_hci

/* Macros for properties that are special in the specification: */
#define DT_N_S_esp32_bt_hci_REG_NUM 0
#define DT_N_S_esp32_bt_hci_RANGES_NUM 0
#define DT_N_S_esp32_bt_hci_FOREACH_RANGE(fn) 
#define DT_N_S_esp32_bt_hci_IRQ_NUM 0
#define DT_N_S_esp32_bt_hci_IRQ_LEVEL 0
#define DT_N_S_esp32_bt_hci_COMPAT_MATCHES_espressif_esp32_bt_hci 1
#define DT_N_S_esp32_bt_hci_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_esp32_bt_hci_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_esp32_bt_hci_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_esp32_bt_hci_COMPAT_MODEL_IDX_0 "esp32-bt-hci"
#define DT_N_S_esp32_bt_hci_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_esp32_bt_hci_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_esp32_bt_hci_P_bt_hci_name "BT ESP32"
#define DT_N_S_esp32_bt_hci_P_bt_hci_name_STRING_UNQUOTED BT ESP32
#define DT_N_S_esp32_bt_hci_P_bt_hci_name_STRING_TOKEN BT_ESP32
#define DT_N_S_esp32_bt_hci_P_bt_hci_name_STRING_UPPER_TOKEN BT_ESP32
#define DT_N_S_esp32_bt_hci_P_bt_hci_name_IDX_0 "BT ESP32"
#define DT_N_S_esp32_bt_hci_P_bt_hci_name_IDX_0_EXISTS 1
#define DT_N_S_esp32_bt_hci_P_bt_hci_name_FOREACH_PROP_ELEM(fn) fn(DT_N_S_esp32_bt_hci, bt_hci_name, 0)
#define DT_N_S_esp32_bt_hci_P_bt_hci_name_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_esp32_bt_hci, bt_hci_name, 0)
#define DT_N_S_esp32_bt_hci_P_bt_hci_name_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_esp32_bt_hci, bt_hci_name, 0, __VA_ARGS__)
#define DT_N_S_esp32_bt_hci_P_bt_hci_name_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_esp32_bt_hci, bt_hci_name, 0, __VA_ARGS__)
#define DT_N_S_esp32_bt_hci_P_bt_hci_name_LEN 1
#define DT_N_S_esp32_bt_hci_P_bt_hci_name_EXISTS 1
#define DT_N_S_esp32_bt_hci_P_bt_hci_bus "ipm"
#define DT_N_S_esp32_bt_hci_P_bt_hci_bus_STRING_UNQUOTED ipm
#define DT_N_S_esp32_bt_hci_P_bt_hci_bus_STRING_TOKEN ipm
#define DT_N_S_esp32_bt_hci_P_bt_hci_bus_STRING_UPPER_TOKEN IPM
#define DT_N_S_esp32_bt_hci_P_bt_hci_bus_IDX_0 "ipm"
#define DT_N_S_esp32_bt_hci_P_bt_hci_bus_IDX_0_EXISTS 1
#define DT_N_S_esp32_bt_hci_P_bt_hci_bus_IDX_0_ENUM_IDX 11
#define DT_N_S_esp32_bt_hci_P_bt_hci_bus_IDX_0_ENUM_VAL_ipm_EXISTS 1
#define DT_N_S_esp32_bt_hci_P_bt_hci_bus_FOREACH_PROP_ELEM(fn) fn(DT_N_S_esp32_bt_hci, bt_hci_bus, 0)
#define DT_N_S_esp32_bt_hci_P_bt_hci_bus_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_esp32_bt_hci, bt_hci_bus, 0)
#define DT_N_S_esp32_bt_hci_P_bt_hci_bus_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_esp32_bt_hci, bt_hci_bus, 0, __VA_ARGS__)
#define DT_N_S_esp32_bt_hci_P_bt_hci_bus_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_esp32_bt_hci, bt_hci_bus, 0, __VA_ARGS__)
#define DT_N_S_esp32_bt_hci_P_bt_hci_bus_LEN 1
#define DT_N_S_esp32_bt_hci_P_bt_hci_bus_EXISTS 1
#define DT_N_S_esp32_bt_hci_P_bt_hci_quirks {"no-auto-dle"}
#define DT_N_S_esp32_bt_hci_P_bt_hci_quirks_IDX_0_ENUM_IDX 1
#define DT_N_S_esp32_bt_hci_P_bt_hci_quirks_IDX_0_EXISTS 1
#define DT_N_S_esp32_bt_hci_P_bt_hci_quirks_IDX_0_ENUM_VAL_no_auto_dle_EXISTS 1
#define DT_N_S_esp32_bt_hci_P_bt_hci_quirks_IDX_0 "no-auto-dle"
#define DT_N_S_esp32_bt_hci_P_bt_hci_quirks_IDX_0_STRING_UNQUOTED no-auto-dle
#define DT_N_S_esp32_bt_hci_P_bt_hci_quirks_IDX_0_STRING_TOKEN no_auto_dle
#define DT_N_S_esp32_bt_hci_P_bt_hci_quirks_IDX_0_STRING_UPPER_TOKEN NO_AUTO_DLE
#define DT_N_S_esp32_bt_hci_P_bt_hci_quirks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_esp32_bt_hci, bt_hci_quirks, 0)
#define DT_N_S_esp32_bt_hci_P_bt_hci_quirks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_esp32_bt_hci, bt_hci_quirks, 0)
#define DT_N_S_esp32_bt_hci_P_bt_hci_quirks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_esp32_bt_hci, bt_hci_quirks, 0, __VA_ARGS__)
#define DT_N_S_esp32_bt_hci_P_bt_hci_quirks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_esp32_bt_hci, bt_hci_quirks, 0, __VA_ARGS__)
#define DT_N_S_esp32_bt_hci_P_bt_hci_quirks_LEN 1
#define DT_N_S_esp32_bt_hci_P_bt_hci_quirks_EXISTS 1
#define DT_N_S_esp32_bt_hci_P_bt_hci_vs_ext 0
#define DT_N_S_esp32_bt_hci_P_bt_hci_vs_ext_EXISTS 1
#define DT_N_S_esp32_bt_hci_P_status "okay"
#define DT_N_S_esp32_bt_hci_P_status_STRING_UNQUOTED okay
#define DT_N_S_esp32_bt_hci_P_status_STRING_TOKEN okay
#define DT_N_S_esp32_bt_hci_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_esp32_bt_hci_P_status_IDX_0 "okay"
#define DT_N_S_esp32_bt_hci_P_status_IDX_0_EXISTS 1
#define DT_N_S_esp32_bt_hci_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_esp32_bt_hci_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_esp32_bt_hci_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_esp32_bt_hci, status, 0)
#define DT_N_S_esp32_bt_hci_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_esp32_bt_hci, status, 0)
#define DT_N_S_esp32_bt_hci_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_esp32_bt_hci, status, 0, __VA_ARGS__)
#define DT_N_S_esp32_bt_hci_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_esp32_bt_hci, status, 0, __VA_ARGS__)
#define DT_N_S_esp32_bt_hci_P_status_LEN 1
#define DT_N_S_esp32_bt_hci_P_status_EXISTS 1
#define DT_N_S_esp32_bt_hci_P_compatible {"espressif,esp32-bt-hci"}
#define DT_N_S_esp32_bt_hci_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_esp32_bt_hci_P_compatible_IDX_0 "espressif,esp32-bt-hci"
#define DT_N_S_esp32_bt_hci_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-bt-hci
#define DT_N_S_esp32_bt_hci_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_bt_hci
#define DT_N_S_esp32_bt_hci_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_BT_HCI
#define DT_N_S_esp32_bt_hci_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_esp32_bt_hci, compatible, 0)
#define DT_N_S_esp32_bt_hci_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_esp32_bt_hci, compatible, 0)
#define DT_N_S_esp32_bt_hci_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_esp32_bt_hci, compatible, 0, __VA_ARGS__)
#define DT_N_S_esp32_bt_hci_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_esp32_bt_hci, compatible, 0, __VA_ARGS__)
#define DT_N_S_esp32_bt_hci_P_compatible_LEN 1
#define DT_N_S_esp32_bt_hci_P_compatible_EXISTS 1
#define DT_N_S_esp32_bt_hci_P_zephyr_deferred_init 0
#define DT_N_S_esp32_bt_hci_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_esp32_bt_hci_P_wakeup_source 0
#define DT_N_S_esp32_bt_hci_P_wakeup_source_EXISTS 1
#define DT_N_S_esp32_bt_hci_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_esp32_bt_hci_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /wifi
 *
 * Node identifier: DT_N_S_wifi
 *
 * Binding (compatible = espressif,esp32-wifi):
 *   $ZEPHYR_BASE/dts/bindings/wifi/espressif,esp32-wifi.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_wifi_PATH "/wifi"

/* Node's name with unit-address: */
#define DT_N_S_wifi_FULL_NAME "wifi"
#define DT_N_S_wifi_FULL_NAME_UNQUOTED wifi
#define DT_N_S_wifi_FULL_NAME_TOKEN wifi
#define DT_N_S_wifi_FULL_NAME_UPPER_TOKEN WIFI

/* Node parent (/) identifier: */
#define DT_N_S_wifi_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_wifi_CHILD_IDX 4

/* Helpers for dealing with node labels: */
#define DT_N_S_wifi_NODELABEL_NUM 1
#define DT_N_S_wifi_FOREACH_NODELABEL(fn) fn(wifi)
#define DT_N_S_wifi_FOREACH_NODELABEL_VARGS(fn, ...) fn(wifi, __VA_ARGS__)
#define DT_N_S_wifi_FOREACH_ANCESTOR(fn) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_wifi_CHILD_NUM 0
#define DT_N_S_wifi_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_wifi_FOREACH_CHILD(fn) 
#define DT_N_S_wifi_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_wifi_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_wifi_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_wifi_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_wifi_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_wifi_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_wifi_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_wifi_ORD 5
#define DT_N_S_wifi_ORD_STR_SORTABLE 00005

/* Ordinals for what this node depends on directly: */
#define DT_N_S_wifi_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_wifi_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_wifi_EXISTS 1
#define DT_N_INST_0_espressif_esp32_wifi DT_N_S_wifi
#define DT_N_NODELABEL_wifi              DT_N_S_wifi

/* Macros for properties that are special in the specification: */
#define DT_N_S_wifi_REG_NUM 0
#define DT_N_S_wifi_RANGES_NUM 0
#define DT_N_S_wifi_FOREACH_RANGE(fn) 
#define DT_N_S_wifi_IRQ_NUM 0
#define DT_N_S_wifi_IRQ_LEVEL 0
#define DT_N_S_wifi_COMPAT_MATCHES_espressif_esp32_wifi 1
#define DT_N_S_wifi_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_wifi_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_wifi_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_wifi_COMPAT_MODEL_IDX_0 "esp32-wifi"
#define DT_N_S_wifi_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_wifi_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_wifi_P_compatible {"espressif,esp32-wifi"}
#define DT_N_S_wifi_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_wifi_P_compatible_IDX_0 "espressif,esp32-wifi"
#define DT_N_S_wifi_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-wifi
#define DT_N_S_wifi_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_wifi
#define DT_N_S_wifi_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_WIFI
#define DT_N_S_wifi_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_wifi, compatible, 0)
#define DT_N_S_wifi_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_wifi, compatible, 0)
#define DT_N_S_wifi_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_wifi, compatible, 0, __VA_ARGS__)
#define DT_N_S_wifi_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_wifi, compatible, 0, __VA_ARGS__)
#define DT_N_S_wifi_P_compatible_LEN 1
#define DT_N_S_wifi_P_compatible_EXISTS 1
#define DT_N_S_wifi_P_status "okay"
#define DT_N_S_wifi_P_status_STRING_UNQUOTED okay
#define DT_N_S_wifi_P_status_STRING_TOKEN okay
#define DT_N_S_wifi_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_wifi_P_status_IDX_0 "okay"
#define DT_N_S_wifi_P_status_IDX_0_EXISTS 1
#define DT_N_S_wifi_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_wifi_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_wifi_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_wifi, status, 0)
#define DT_N_S_wifi_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_wifi, status, 0)
#define DT_N_S_wifi_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_wifi, status, 0, __VA_ARGS__)
#define DT_N_S_wifi_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_wifi, status, 0, __VA_ARGS__)
#define DT_N_S_wifi_P_status_LEN 1
#define DT_N_S_wifi_P_status_EXISTS 1

/*
 * Devicetree node: /cpus
 *
 * Node identifier: DT_N_S_cpus
 */

/* Node's full path: */
#define DT_N_S_cpus_PATH "/cpus"

/* Node's name with unit-address: */
#define DT_N_S_cpus_FULL_NAME "cpus"
#define DT_N_S_cpus_FULL_NAME_UNQUOTED cpus
#define DT_N_S_cpus_FULL_NAME_TOKEN cpus
#define DT_N_S_cpus_FULL_NAME_UPPER_TOKEN CPUS

/* Node parent (/) identifier: */
#define DT_N_S_cpus_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_CHILD_IDX 2

/* Helpers for dealing with node labels: */
#define DT_N_S_cpus_NODELABEL_NUM 0
#define DT_N_S_cpus_FOREACH_NODELABEL(fn) 
#define DT_N_S_cpus_FOREACH_NODELABEL_VARGS(fn, ...) 
#define DT_N_S_cpus_FOREACH_ANCESTOR(fn) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_CHILD_NUM 2
#define DT_N_S_cpus_CHILD_NUM_STATUS_OKAY 2
#define DT_N_S_cpus_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_power_states)
#define DT_N_S_cpus_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states)
#define DT_N_S_cpus_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_power_states)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_cpus_ORD 6
#define DT_N_S_cpus_ORD_STR_SORTABLE 00006

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_SUPPORTS_ORDS \
	7, /* /cpus/power-states */ \
	10, /* /cpus/cpu@0 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_REG_NUM 0
#define DT_N_S_cpus_RANGES_NUM 0
#define DT_N_S_cpus_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_IRQ_NUM 0
#define DT_N_S_cpus_IRQ_LEVEL 0
#define DT_N_S_cpus_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /cpus/power-states
 *
 * Node identifier: DT_N_S_cpus_S_power_states
 */

/* Node's full path: */
#define DT_N_S_cpus_S_power_states_PATH "/cpus/power-states"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_power_states_FULL_NAME "power-states"
#define DT_N_S_cpus_S_power_states_FULL_NAME_UNQUOTED power-states
#define DT_N_S_cpus_S_power_states_FULL_NAME_TOKEN power_states
#define DT_N_S_cpus_S_power_states_FULL_NAME_UPPER_TOKEN POWER_STATES

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_power_states_PARENT DT_N_S_cpus

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_power_states_CHILD_IDX 1

/* Helpers for dealing with node labels: */
#define DT_N_S_cpus_S_power_states_NODELABEL_NUM 0
#define DT_N_S_cpus_S_power_states_FOREACH_NODELABEL(fn) 
#define DT_N_S_cpus_S_power_states_FOREACH_NODELABEL_VARGS(fn, ...) 
#define DT_N_S_cpus_S_power_states_FOREACH_ANCESTOR(fn) fn(DT_N_S_cpus) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_power_states_CHILD_NUM 2
#define DT_N_S_cpus_S_power_states_CHILD_NUM_STATUS_OKAY 2
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_power_states_S_light_sleep) fn(DT_N_S_cpus_S_power_states_S_deep_sleep)
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_cpus_S_power_states_S_light_sleep) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states_S_deep_sleep)
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_power_states_S_light_sleep, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_deep_sleep, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_power_states_S_light_sleep, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states_S_deep_sleep, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_power_states_S_light_sleep) fn(DT_N_S_cpus_S_power_states_S_deep_sleep)
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_cpus_S_power_states_S_light_sleep) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states_S_deep_sleep)
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_power_states_S_light_sleep, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_deep_sleep, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_power_states_S_light_sleep, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_power_states_S_deep_sleep, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_power_states_ORD 7
#define DT_N_S_cpus_S_power_states_ORD_STR_SORTABLE 00007

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_power_states_REQUIRES_ORDS \
	6, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_power_states_SUPPORTS_ORDS \
	8, /* /cpus/power-states/deep_sleep */ \
	9, /* /cpus/power-states/light_sleep */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_power_states_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_power_states_REG_NUM 0
#define DT_N_S_cpus_S_power_states_RANGES_NUM 0
#define DT_N_S_cpus_S_power_states_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_power_states_IRQ_NUM 0
#define DT_N_S_cpus_S_power_states_IRQ_LEVEL 0
#define DT_N_S_cpus_S_power_states_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_power_states_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /cpus/power-states/deep_sleep
 *
 * Node identifier: DT_N_S_cpus_S_power_states_S_deep_sleep
 *
 * Binding (compatible = zephyr,power-state):
 *   $ZEPHYR_BASE/dts/bindings/power/zephyr,power-state.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_power_states_S_deep_sleep_PATH "/cpus/power-states/deep_sleep"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_power_states_S_deep_sleep_FULL_NAME "deep_sleep"
#define DT_N_S_cpus_S_power_states_S_deep_sleep_FULL_NAME_UNQUOTED deep_sleep
#define DT_N_S_cpus_S_power_states_S_deep_sleep_FULL_NAME_TOKEN deep_sleep
#define DT_N_S_cpus_S_power_states_S_deep_sleep_FULL_NAME_UPPER_TOKEN DEEP_SLEEP

/* Node parent (/cpus/power-states) identifier: */
#define DT_N_S_cpus_S_power_states_S_deep_sleep_PARENT DT_N_S_cpus_S_power_states

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_power_states_S_deep_sleep_CHILD_IDX 1

/* Helpers for dealing with node labels: */
#define DT_N_S_cpus_S_power_states_S_deep_sleep_NODELABEL_NUM 1
#define DT_N_S_cpus_S_power_states_S_deep_sleep_FOREACH_NODELABEL(fn) fn(deep_sleep)
#define DT_N_S_cpus_S_power_states_S_deep_sleep_FOREACH_NODELABEL_VARGS(fn, ...) fn(deep_sleep, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_S_deep_sleep_FOREACH_ANCESTOR(fn) fn(DT_N_S_cpus_S_power_states) fn(DT_N_S_cpus) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_power_states_S_deep_sleep_CHILD_NUM 0
#define DT_N_S_cpus_S_power_states_S_deep_sleep_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_cpus_S_power_states_S_deep_sleep_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_power_states_S_deep_sleep_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_cpus_S_power_states_S_deep_sleep_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_power_states_S_deep_sleep_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_cpus_S_power_states_S_deep_sleep_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_power_states_S_deep_sleep_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_cpus_S_power_states_S_deep_sleep_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_cpus_S_power_states_S_deep_sleep_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_power_states_S_deep_sleep_ORD 8
#define DT_N_S_cpus_S_power_states_S_deep_sleep_ORD_STR_SORTABLE 00008

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_power_states_S_deep_sleep_REQUIRES_ORDS \
	7, /* /cpus/power-states */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_power_states_S_deep_sleep_SUPPORTS_ORDS \
	10, /* /cpus/cpu@0 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_power_states_S_deep_sleep_EXISTS 1
#define DT_N_INST_1_zephyr_power_state DT_N_S_cpus_S_power_states_S_deep_sleep
#define DT_N_NODELABEL_deep_sleep      DT_N_S_cpus_S_power_states_S_deep_sleep

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_power_states_S_deep_sleep_REG_NUM 0
#define DT_N_S_cpus_S_power_states_S_deep_sleep_RANGES_NUM 0
#define DT_N_S_cpus_S_power_states_S_deep_sleep_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_power_states_S_deep_sleep_IRQ_NUM 0
#define DT_N_S_cpus_S_power_states_S_deep_sleep_IRQ_LEVEL 0
#define DT_N_S_cpus_S_power_states_S_deep_sleep_COMPAT_MATCHES_zephyr_power_state 1
#define DT_N_S_cpus_S_power_states_S_deep_sleep_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_deep_sleep_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_cpus_S_power_states_S_deep_sleep_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_deep_sleep_COMPAT_MODEL_IDX_0 "power-state"
#define DT_N_S_cpus_S_power_states_S_deep_sleep_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_power_states_S_deep_sleep_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name "soft-off"
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name_STRING_UNQUOTED soft-off
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name_STRING_TOKEN soft_off
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name_STRING_UPPER_TOKEN SOFT_OFF
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name_IDX_0 "soft-off"
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name_IDX_0_ENUM_IDX 6
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name_IDX_0_ENUM_VAL_soft_off_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_power_states_S_deep_sleep, power_state_name, 0)
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_power_states_S_deep_sleep, power_state_name, 0)
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_power_states_S_deep_sleep, power_state_name, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_power_states_S_deep_sleep, power_state_name, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name_LEN 1
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_power_state_name_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_min_residency_us 660
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_min_residency_us_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_exit_latency_us 105
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_exit_latency_us_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_zephyr_pm_device_disabled 0
#define DT_N_S_cpus_S_power_states_S_deep_sleep_P_zephyr_pm_device_disabled_EXISTS 1

/*
 * Devicetree node: /cpus/power-states/light_sleep
 *
 * Node identifier: DT_N_S_cpus_S_power_states_S_light_sleep
 *
 * Binding (compatible = zephyr,power-state):
 *   $ZEPHYR_BASE/dts/bindings/power/zephyr,power-state.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_power_states_S_light_sleep_PATH "/cpus/power-states/light_sleep"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_power_states_S_light_sleep_FULL_NAME "light_sleep"
#define DT_N_S_cpus_S_power_states_S_light_sleep_FULL_NAME_UNQUOTED light_sleep
#define DT_N_S_cpus_S_power_states_S_light_sleep_FULL_NAME_TOKEN light_sleep
#define DT_N_S_cpus_S_power_states_S_light_sleep_FULL_NAME_UPPER_TOKEN LIGHT_SLEEP

/* Node parent (/cpus/power-states) identifier: */
#define DT_N_S_cpus_S_power_states_S_light_sleep_PARENT DT_N_S_cpus_S_power_states

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_power_states_S_light_sleep_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_cpus_S_power_states_S_light_sleep_NODELABEL_NUM 1
#define DT_N_S_cpus_S_power_states_S_light_sleep_FOREACH_NODELABEL(fn) fn(light_sleep)
#define DT_N_S_cpus_S_power_states_S_light_sleep_FOREACH_NODELABEL_VARGS(fn, ...) fn(light_sleep, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_S_light_sleep_FOREACH_ANCESTOR(fn) fn(DT_N_S_cpus_S_power_states) fn(DT_N_S_cpus) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_power_states_S_light_sleep_CHILD_NUM 0
#define DT_N_S_cpus_S_power_states_S_light_sleep_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_cpus_S_power_states_S_light_sleep_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_power_states_S_light_sleep_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_cpus_S_power_states_S_light_sleep_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_power_states_S_light_sleep_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_cpus_S_power_states_S_light_sleep_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_power_states_S_light_sleep_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_cpus_S_power_states_S_light_sleep_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_cpus_S_power_states_S_light_sleep_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_power_states_S_light_sleep_ORD 9
#define DT_N_S_cpus_S_power_states_S_light_sleep_ORD_STR_SORTABLE 00009

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_power_states_S_light_sleep_REQUIRES_ORDS \
	7, /* /cpus/power-states */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_power_states_S_light_sleep_SUPPORTS_ORDS \
	10, /* /cpus/cpu@0 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_power_states_S_light_sleep_EXISTS 1
#define DT_N_INST_0_zephyr_power_state DT_N_S_cpus_S_power_states_S_light_sleep
#define DT_N_NODELABEL_light_sleep     DT_N_S_cpus_S_power_states_S_light_sleep

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_power_states_S_light_sleep_REG_NUM 0
#define DT_N_S_cpus_S_power_states_S_light_sleep_RANGES_NUM 0
#define DT_N_S_cpus_S_power_states_S_light_sleep_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_power_states_S_light_sleep_IRQ_NUM 0
#define DT_N_S_cpus_S_power_states_S_light_sleep_IRQ_LEVEL 0
#define DT_N_S_cpus_S_power_states_S_light_sleep_COMPAT_MATCHES_zephyr_power_state 1
#define DT_N_S_cpus_S_power_states_S_light_sleep_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_light_sleep_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_cpus_S_power_states_S_light_sleep_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_light_sleep_COMPAT_MODEL_IDX_0 "power-state"
#define DT_N_S_cpus_S_power_states_S_light_sleep_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_power_states_S_light_sleep_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name "standby"
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name_STRING_UNQUOTED standby
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name_STRING_TOKEN standby
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name_STRING_UPPER_TOKEN STANDBY
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name_IDX_0 "standby"
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name_IDX_0_ENUM_IDX 3
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name_IDX_0_ENUM_VAL_standby_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_power_states_S_light_sleep, power_state_name, 0)
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_power_states_S_light_sleep, power_state_name, 0)
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_power_states_S_light_sleep, power_state_name, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_power_states_S_light_sleep, power_state_name, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name_LEN 1
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_power_state_name_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_min_residency_us 200
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_min_residency_us_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_exit_latency_us 60
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_exit_latency_us_EXISTS 1
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_zephyr_pm_device_disabled 0
#define DT_N_S_cpus_S_power_states_S_light_sleep_P_zephyr_pm_device_disabled_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@0
 *
 * Node identifier: DT_N_S_cpus_S_cpu_0
 *
 * Binding (compatible = espressif,riscv):
 *   $ZEPHYR_BASE/dts/bindings/cpu/espressif,riscv.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_0_PATH "/cpus/cpu@0"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_0_FULL_NAME "cpu@0"
#define DT_N_S_cpus_S_cpu_0_FULL_NAME_UNQUOTED cpu@0
#define DT_N_S_cpus_S_cpu_0_FULL_NAME_TOKEN cpu_0
#define DT_N_S_cpus_S_cpu_0_FULL_NAME_UPPER_TOKEN CPU_0

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_0_PARENT DT_N_S_cpus

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_cpu_0_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_cpus_S_cpu_0_NODELABEL_NUM 1
#define DT_N_S_cpus_S_cpu_0_FOREACH_NODELABEL(fn) fn(cpu0)
#define DT_N_S_cpus_S_cpu_0_FOREACH_NODELABEL_VARGS(fn, ...) fn(cpu0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_FOREACH_ANCESTOR(fn) fn(DT_N_S_cpus) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_cpu_0_CHILD_NUM 0
#define DT_N_S_cpus_S_cpu_0_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_0_ORD 10
#define DT_N_S_cpus_S_cpu_0_ORD_STR_SORTABLE 00010

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_0_REQUIRES_ORDS \
	6, /* /cpus */ \
	8, /* /cpus/power-states/deep_sleep */ \
	9, /* /cpus/power-states/light_sleep */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_0_EXISTS 1
#define DT_N_INST_0_espressif_riscv DT_N_S_cpus_S_cpu_0
#define DT_N_INST_0_riscv           DT_N_S_cpus_S_cpu_0
#define DT_N_NODELABEL_cpu0         DT_N_S_cpus_S_cpu_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_0_REG_NUM 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_cpus_S_cpu_0_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_0_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_0_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_0_IRQ_LEVEL 0
#define DT_N_S_cpus_S_cpu_0_COMPAT_MATCHES_espressif_riscv 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_cpus_S_cpu_0_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_MODEL_IDX_0 "riscv"
#define DT_N_S_cpus_S_cpu_0_COMPAT_MATCHES_riscv 1
#define DT_N_S_cpus_S_cpu_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_0_P_clock_source 1
#define DT_N_S_cpus_S_cpu_0_P_clock_source_IDX_0_ENUM_IDX 1
#define DT_N_S_cpus_S_cpu_0_P_clock_source_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_clock_source_IDX_0_ENUM_VAL_1_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_clock_source_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_xtal_freq 40000000
#define DT_N_S_cpus_S_cpu_0_P_xtal_freq_IDX_0_ENUM_IDX 2
#define DT_N_S_cpus_S_cpu_0_P_xtal_freq_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_xtal_freq_IDX_0_ENUM_VAL_40000000_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_xtal_freq_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_riscv_isa "rv32imc_zicsr"
#define DT_N_S_cpus_S_cpu_0_P_riscv_isa_STRING_UNQUOTED rv32imc_zicsr
#define DT_N_S_cpus_S_cpu_0_P_riscv_isa_STRING_TOKEN rv32imc_zicsr
#define DT_N_S_cpus_S_cpu_0_P_riscv_isa_STRING_UPPER_TOKEN RV32IMC_ZICSR
#define DT_N_S_cpus_S_cpu_0_P_riscv_isa_IDX_0 "rv32imc_zicsr"
#define DT_N_S_cpus_S_cpu_0_P_riscv_isa_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_riscv_isa_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, riscv_isa, 0)
#define DT_N_S_cpus_S_cpu_0_P_riscv_isa_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0, riscv_isa, 0)
#define DT_N_S_cpus_S_cpu_0_P_riscv_isa_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, riscv_isa, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_riscv_isa_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, riscv_isa, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_riscv_isa_LEN 1
#define DT_N_S_cpus_S_cpu_0_P_riscv_isa_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_clock_frequency 160000000
#define DT_N_S_cpus_S_cpu_0_P_clock_frequency_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_0 DT_N_S_cpus_S_power_states_S_light_sleep
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_0_PH DT_N_S_cpus_S_power_states_S_light_sleep
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_1 DT_N_S_cpus_S_power_states_S_deep_sleep
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_1_PH DT_N_S_cpus_S_power_states_S_deep_sleep
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_IDX_1_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 0) \
	fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 1)
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 1)
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 0, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 1, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, cpu_power_states, 1, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_LEN 2
#define DT_N_S_cpus_S_cpu_0_P_cpu_power_states_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible {"espressif,riscv", "riscv"}
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0 "espressif,riscv"
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_UNQUOTED espressif,riscv
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_TOKEN espressif_riscv
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_RISCV
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_1_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_1 "riscv"
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_1_STRING_UNQUOTED riscv
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_1_STRING_TOKEN riscv
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_1_STRING_UPPER_TOKEN RISCV
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, compatible, 0) \
	fn(DT_N_S_cpus_S_cpu_0, compatible, 1)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0, compatible, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, compatible, 1)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0, compatible, 1, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, compatible, 1, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_LEN 2
#define DT_N_S_cpus_S_cpu_0_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg {0 /* 0x0 */}
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0 0
#define DT_N_S_cpus_S_cpu_0_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_zephyr_deferred_init 0
#define DT_N_S_cpus_S_cpu_0_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_cpus_S_cpu_0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /pin-controller
 *
 * Node identifier: DT_N_S_pin_controller
 *
 * Binding (compatible = espressif,esp32-pinctrl):
 *   $ZEPHYR_BASE/dts/bindings/pinctrl/espressif,esp32-pinctrl.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_PATH "/pin-controller"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_FULL_NAME "pin-controller"
#define DT_N_S_pin_controller_FULL_NAME_UNQUOTED pin-controller
#define DT_N_S_pin_controller_FULL_NAME_TOKEN pin_controller
#define DT_N_S_pin_controller_FULL_NAME_UPPER_TOKEN PIN_CONTROLLER

/* Node parent (/) identifier: */
#define DT_N_S_pin_controller_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_CHILD_IDX 3

/* Helpers for dealing with node labels: */
#define DT_N_S_pin_controller_NODELABEL_NUM 1
#define DT_N_S_pin_controller_FOREACH_NODELABEL(fn) fn(pinctrl)
#define DT_N_S_pin_controller_FOREACH_NODELABEL_VARGS(fn, ...) fn(pinctrl, __VA_ARGS__)
#define DT_N_S_pin_controller_FOREACH_ANCESTOR(fn) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_CHILD_NUM 4
#define DT_N_S_pin_controller_CHILD_NUM_STATUS_OKAY 4
#define DT_N_S_pin_controller_FOREACH_CHILD(fn) fn(DT_N_S_pin_controller_S_uart0_default) fn(DT_N_S_pin_controller_S_spim2_default) fn(DT_N_S_pin_controller_S_i2c0_default) fn(DT_N_S_pin_controller_S_twai_default)
#define DT_N_S_pin_controller_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_pin_controller_S_uart0_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim2_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_i2c0_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_twai_default)
#define DT_N_S_pin_controller_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_uart0_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim2_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_i2c0_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_twai_default, __VA_ARGS__)
#define DT_N_S_pin_controller_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_uart0_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim2_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_i2c0_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_twai_default, __VA_ARGS__)
#define DT_N_S_pin_controller_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_pin_controller_S_uart0_default) fn(DT_N_S_pin_controller_S_spim2_default) fn(DT_N_S_pin_controller_S_i2c0_default) fn(DT_N_S_pin_controller_S_twai_default)
#define DT_N_S_pin_controller_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_pin_controller_S_uart0_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim2_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_i2c0_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_twai_default)
#define DT_N_S_pin_controller_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_uart0_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim2_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_i2c0_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_twai_default, __VA_ARGS__)
#define DT_N_S_pin_controller_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_uart0_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim2_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_i2c0_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_twai_default, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_ORD 11
#define DT_N_S_pin_controller_ORD_STR_SORTABLE 00011

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_SUPPORTS_ORDS \
	12, /* /pin-controller/i2c0_default */ \
	14, /* /pin-controller/spim2_default */ \
	17, /* /pin-controller/twai_default */ \
	19, /* /pin-controller/uart0_default */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_EXISTS 1
#define DT_N_INST_0_espressif_esp32_pinctrl DT_N_S_pin_controller
#define DT_N_NODELABEL_pinctrl              DT_N_S_pin_controller

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_REG_NUM 0
#define DT_N_S_pin_controller_RANGES_NUM 0
#define DT_N_S_pin_controller_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_IRQ_NUM 0
#define DT_N_S_pin_controller_IRQ_LEVEL 0
#define DT_N_S_pin_controller_COMPAT_MATCHES_espressif_esp32_pinctrl 1
#define DT_N_S_pin_controller_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_pin_controller_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_COMPAT_MODEL_IDX_0 "esp32-pinctrl"
#define DT_N_S_pin_controller_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_P_status "okay"
#define DT_N_S_pin_controller_P_status_STRING_UNQUOTED okay
#define DT_N_S_pin_controller_P_status_STRING_TOKEN okay
#define DT_N_S_pin_controller_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_pin_controller_P_status_IDX_0 "okay"
#define DT_N_S_pin_controller_P_status_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_pin_controller_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_pin_controller_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller, status, 0)
#define DT_N_S_pin_controller_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller, status, 0)
#define DT_N_S_pin_controller_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller, status, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller, status, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_P_status_LEN 1
#define DT_N_S_pin_controller_P_status_EXISTS 1
#define DT_N_S_pin_controller_P_compatible {"espressif,esp32-pinctrl"}
#define DT_N_S_pin_controller_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_P_compatible_IDX_0 "espressif,esp32-pinctrl"
#define DT_N_S_pin_controller_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-pinctrl
#define DT_N_S_pin_controller_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_pinctrl
#define DT_N_S_pin_controller_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_PINCTRL
#define DT_N_S_pin_controller_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller, compatible, 0)
#define DT_N_S_pin_controller_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller, compatible, 0)
#define DT_N_S_pin_controller_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller, compatible, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller, compatible, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_P_compatible_LEN 1
#define DT_N_S_pin_controller_P_compatible_EXISTS 1
#define DT_N_S_pin_controller_P_zephyr_deferred_init 0
#define DT_N_S_pin_controller_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_pin_controller_P_wakeup_source 0
#define DT_N_S_pin_controller_P_wakeup_source_EXISTS 1
#define DT_N_S_pin_controller_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_pin_controller_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /pin-controller/i2c0_default
 *
 * Node identifier: DT_N_S_pin_controller_S_i2c0_default
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_i2c0_default_PATH "/pin-controller/i2c0_default"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_i2c0_default_FULL_NAME "i2c0_default"
#define DT_N_S_pin_controller_S_i2c0_default_FULL_NAME_UNQUOTED i2c0_default
#define DT_N_S_pin_controller_S_i2c0_default_FULL_NAME_TOKEN i2c0_default
#define DT_N_S_pin_controller_S_i2c0_default_FULL_NAME_UPPER_TOKEN I2C0_DEFAULT

/* Node parent (/pin-controller) identifier: */
#define DT_N_S_pin_controller_S_i2c0_default_PARENT DT_N_S_pin_controller

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_i2c0_default_CHILD_IDX 2

/* Helpers for dealing with node labels: */
#define DT_N_S_pin_controller_S_i2c0_default_NODELABEL_NUM 1
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_NODELABEL(fn) fn(i2c0_default)
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_NODELABEL_VARGS(fn, ...) fn(i2c0_default, __VA_ARGS__)
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_ANCESTOR(fn) fn(DT_N_S_pin_controller) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_i2c0_default_CHILD_NUM 1
#define DT_N_S_pin_controller_S_i2c0_default_CHILD_NUM_STATUS_OKAY 1
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_CHILD(fn) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1)
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1)
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1)
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1)
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_i2c0_default_ORD 12
#define DT_N_S_pin_controller_S_i2c0_default_ORD_STR_SORTABLE 00012

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_i2c0_default_REQUIRES_ORDS \
	11, /* /pin-controller */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_i2c0_default_SUPPORTS_ORDS \
	13, /* /pin-controller/i2c0_default/group1 */ \
	32, /* /soc/i2c@60013000 */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_i2c0_default_EXISTS 1
#define DT_N_NODELABEL_i2c0_default DT_N_S_pin_controller_S_i2c0_default

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_i2c0_default_REG_NUM 0
#define DT_N_S_pin_controller_S_i2c0_default_RANGES_NUM 0
#define DT_N_S_pin_controller_S_i2c0_default_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_i2c0_default_IRQ_NUM 0
#define DT_N_S_pin_controller_S_i2c0_default_IRQ_LEVEL 0
#define DT_N_S_pin_controller_S_i2c0_default_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_i2c0_default_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /pin-controller/i2c0_default/group1
 *
 * Node identifier: DT_N_S_pin_controller_S_i2c0_default_S_group1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_PATH "/pin-controller/i2c0_default/group1"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FULL_NAME "group1"
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FULL_NAME_UNQUOTED group1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FULL_NAME_TOKEN group1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FULL_NAME_UPPER_TOKEN GROUP1

/* Node parent (/pin-controller/i2c0_default) identifier: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_PARENT DT_N_S_pin_controller_S_i2c0_default

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_NODELABEL_NUM 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_NODELABEL(fn) 
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_NODELABEL_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_ANCESTOR(fn) fn(DT_N_S_pin_controller_S_i2c0_default) fn(DT_N_S_pin_controller) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_CHILD_NUM 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_CHILD(fn) 
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_ORD 13
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_ORD_STR_SORTABLE 00013

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_REQUIRES_ORDS \
	12, /* /pin-controller/i2c0_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_REG_NUM 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_RANGES_NUM 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_IRQ_NUM 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_IRQ_LEVEL 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux {1772934 /* 0x1b0d86 */, 1740103 /* 0x1a8d47 */}
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_IDX_0 1772934
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_IDX_1_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_IDX_1 1740103
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, pinmux, 0) \
	fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, pinmux, 1)
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, pinmux, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, pinmux, 1)
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, pinmux, 0, __VA_ARGS__) \
	fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, pinmux, 1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, pinmux, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, pinmux, 1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_LEN 2
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_pinmux_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_bias_disable 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_bias_disable_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_bias_pull_up 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_bias_pull_up_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_bias_pull_down 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_bias_pull_down_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_drive_push_pull 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_drive_push_pull_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_drive_open_drain 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_drive_open_drain_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_input_enable 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_input_enable_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_output_enable 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_output_enable_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_output_low 0
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_output_low_EXISTS 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_output_high 1
#define DT_N_S_pin_controller_S_i2c0_default_S_group1_P_output_high_EXISTS 1

/*
 * Devicetree node: /pin-controller/spim2_default
 *
 * Node identifier: DT_N_S_pin_controller_S_spim2_default
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_spim2_default_PATH "/pin-controller/spim2_default"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_spim2_default_FULL_NAME "spim2_default"
#define DT_N_S_pin_controller_S_spim2_default_FULL_NAME_UNQUOTED spim2_default
#define DT_N_S_pin_controller_S_spim2_default_FULL_NAME_TOKEN spim2_default
#define DT_N_S_pin_controller_S_spim2_default_FULL_NAME_UPPER_TOKEN SPIM2_DEFAULT

/* Node parent (/pin-controller) identifier: */
#define DT_N_S_pin_controller_S_spim2_default_PARENT DT_N_S_pin_controller

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_spim2_default_CHILD_IDX 1

/* Helpers for dealing with node labels: */
#define DT_N_S_pin_controller_S_spim2_default_NODELABEL_NUM 1
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_NODELABEL(fn) fn(spim2_default)
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_NODELABEL_VARGS(fn, ...) fn(spim2_default, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_ANCESTOR(fn) fn(DT_N_S_pin_controller) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_spim2_default_CHILD_NUM 2
#define DT_N_S_pin_controller_S_spim2_default_CHILD_NUM_STATUS_OKAY 2
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_CHILD(fn) fn(DT_N_S_pin_controller_S_spim2_default_S_group1) fn(DT_N_S_pin_controller_S_spim2_default_S_group2)
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_pin_controller_S_spim2_default_S_group1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim2_default_S_group2)
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_spim2_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim2_default_S_group2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_spim2_default_S_group1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim2_default_S_group2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_pin_controller_S_spim2_default_S_group1) fn(DT_N_S_pin_controller_S_spim2_default_S_group2)
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_pin_controller_S_spim2_default_S_group1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim2_default_S_group2)
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_spim2_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim2_default_S_group2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_spim2_default_S_group1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_spim2_default_S_group2, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_spim2_default_ORD 14
#define DT_N_S_pin_controller_S_spim2_default_ORD_STR_SORTABLE 00014

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_spim2_default_REQUIRES_ORDS \
	11, /* /pin-controller */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_spim2_default_SUPPORTS_ORDS \
	15, /* /pin-controller/spim2_default/group1 */ \
	16, /* /pin-controller/spim2_default/group2 */ \
	39, /* /soc/spi@60024000 */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_spim2_default_EXISTS 1
#define DT_N_NODELABEL_spim2_default DT_N_S_pin_controller_S_spim2_default

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_spim2_default_REG_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_RANGES_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_spim2_default_IRQ_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_IRQ_LEVEL 0
#define DT_N_S_pin_controller_S_spim2_default_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_spim2_default_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /pin-controller/spim2_default/group1
 *
 * Node identifier: DT_N_S_pin_controller_S_spim2_default_S_group1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_PATH "/pin-controller/spim2_default/group1"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FULL_NAME "group1"
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FULL_NAME_UNQUOTED group1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FULL_NAME_TOKEN group1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FULL_NAME_UPPER_TOKEN GROUP1

/* Node parent (/pin-controller/spim2_default) identifier: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_PARENT DT_N_S_pin_controller_S_spim2_default

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_NODELABEL_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_NODELABEL(fn) 
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_NODELABEL_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_ANCESTOR(fn) fn(DT_N_S_pin_controller_S_spim2_default) fn(DT_N_S_pin_controller) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_CHILD_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_CHILD(fn) 
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_ORD 15
#define DT_N_S_pin_controller_S_spim2_default_S_group1_ORD_STR_SORTABLE 00015

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_REQUIRES_ORDS \
	14, /* /pin-controller/spim2_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_REG_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_RANGES_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_spim2_default_S_group1_IRQ_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_IRQ_LEVEL 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux {16748553 /* 0xff9009 */, 2097096 /* 0x1fffc8 */}
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_IDX_0 16748553
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_IDX_1_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_IDX_1 2097096
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 0) \
	fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 1)
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 1)
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 0, __VA_ARGS__) \
	fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller_S_spim2_default_S_group1, pinmux, 1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_LEN 2
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_pinmux_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_bias_disable 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_bias_disable_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_bias_pull_up 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_bias_pull_up_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_bias_pull_down 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_bias_pull_down_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_drive_push_pull 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_drive_push_pull_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_drive_open_drain 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_drive_open_drain_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_input_enable 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_input_enable_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_output_enable 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_output_enable_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_output_low 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_output_low_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_output_high 0
#define DT_N_S_pin_controller_S_spim2_default_S_group1_P_output_high_EXISTS 1

/*
 * Devicetree node: /pin-controller/spim2_default/group2
 *
 * Node identifier: DT_N_S_pin_controller_S_spim2_default_S_group2
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_PATH "/pin-controller/spim2_default/group2"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FULL_NAME "group2"
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FULL_NAME_UNQUOTED group2
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FULL_NAME_TOKEN group2
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FULL_NAME_UPPER_TOKEN GROUP2

/* Node parent (/pin-controller/spim2_default) identifier: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_PARENT DT_N_S_pin_controller_S_spim2_default

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_CHILD_IDX 1

/* Helpers for dealing with node labels: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_NODELABEL_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_NODELABEL(fn) 
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_NODELABEL_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_ANCESTOR(fn) fn(DT_N_S_pin_controller_S_spim2_default) fn(DT_N_S_pin_controller) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_CHILD_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_CHILD(fn) 
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_ORD 16
#define DT_N_S_pin_controller_S_spim2_default_S_group2_ORD_STR_SORTABLE 00016

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_REQUIRES_ORDS \
	14, /* /pin-controller/spim2_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_REG_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_RANGES_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_spim2_default_S_group2_IRQ_NUM 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_IRQ_LEVEL 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_pinmux {2162634 /* 0x20ffca */}
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_pinmux_IDX_0 2162634
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller_S_spim2_default_S_group2, pinmux, 0)
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller_S_spim2_default_S_group2, pinmux, 0)
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_spim2_default_S_group2, pinmux, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_spim2_default_S_group2, pinmux, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_pinmux_LEN 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_pinmux_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_bias_disable 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_bias_disable_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_bias_pull_up 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_bias_pull_up_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_bias_pull_down 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_bias_pull_down_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_drive_push_pull 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_drive_push_pull_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_drive_open_drain 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_drive_open_drain_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_input_enable 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_input_enable_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_output_enable 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_output_enable_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_output_low 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_output_low_EXISTS 1
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_output_high 0
#define DT_N_S_pin_controller_S_spim2_default_S_group2_P_output_high_EXISTS 1

/*
 * Devicetree node: /pin-controller/twai_default
 *
 * Node identifier: DT_N_S_pin_controller_S_twai_default
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_twai_default_PATH "/pin-controller/twai_default"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_twai_default_FULL_NAME "twai_default"
#define DT_N_S_pin_controller_S_twai_default_FULL_NAME_UNQUOTED twai_default
#define DT_N_S_pin_controller_S_twai_default_FULL_NAME_TOKEN twai_default
#define DT_N_S_pin_controller_S_twai_default_FULL_NAME_UPPER_TOKEN TWAI_DEFAULT

/* Node parent (/pin-controller) identifier: */
#define DT_N_S_pin_controller_S_twai_default_PARENT DT_N_S_pin_controller

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_twai_default_CHILD_IDX 3

/* Helpers for dealing with node labels: */
#define DT_N_S_pin_controller_S_twai_default_NODELABEL_NUM 1
#define DT_N_S_pin_controller_S_twai_default_FOREACH_NODELABEL(fn) fn(twai_default)
#define DT_N_S_pin_controller_S_twai_default_FOREACH_NODELABEL_VARGS(fn, ...) fn(twai_default, __VA_ARGS__)
#define DT_N_S_pin_controller_S_twai_default_FOREACH_ANCESTOR(fn) fn(DT_N_S_pin_controller) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_twai_default_CHILD_NUM 1
#define DT_N_S_pin_controller_S_twai_default_CHILD_NUM_STATUS_OKAY 1
#define DT_N_S_pin_controller_S_twai_default_FOREACH_CHILD(fn) fn(DT_N_S_pin_controller_S_twai_default_S_group1)
#define DT_N_S_pin_controller_S_twai_default_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_pin_controller_S_twai_default_S_group1)
#define DT_N_S_pin_controller_S_twai_default_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_twai_default_S_group1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_twai_default_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_twai_default_S_group1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_twai_default_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_pin_controller_S_twai_default_S_group1)
#define DT_N_S_pin_controller_S_twai_default_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_pin_controller_S_twai_default_S_group1)
#define DT_N_S_pin_controller_S_twai_default_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_twai_default_S_group1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_twai_default_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_twai_default_S_group1, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_twai_default_ORD 17
#define DT_N_S_pin_controller_S_twai_default_ORD_STR_SORTABLE 00017

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_twai_default_REQUIRES_ORDS \
	11, /* /pin-controller */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_twai_default_SUPPORTS_ORDS \
	18, /* /pin-controller/twai_default/group1 */ \
	27, /* /soc/can@6002b000 */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_twai_default_EXISTS 1
#define DT_N_NODELABEL_twai_default DT_N_S_pin_controller_S_twai_default

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_twai_default_REG_NUM 0
#define DT_N_S_pin_controller_S_twai_default_RANGES_NUM 0
#define DT_N_S_pin_controller_S_twai_default_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_twai_default_IRQ_NUM 0
#define DT_N_S_pin_controller_S_twai_default_IRQ_LEVEL 0
#define DT_N_S_pin_controller_S_twai_default_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_twai_default_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /pin-controller/twai_default/group1
 *
 * Node identifier: DT_N_S_pin_controller_S_twai_default_S_group1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_twai_default_S_group1_PATH "/pin-controller/twai_default/group1"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_twai_default_S_group1_FULL_NAME "group1"
#define DT_N_S_pin_controller_S_twai_default_S_group1_FULL_NAME_UNQUOTED group1
#define DT_N_S_pin_controller_S_twai_default_S_group1_FULL_NAME_TOKEN group1
#define DT_N_S_pin_controller_S_twai_default_S_group1_FULL_NAME_UPPER_TOKEN GROUP1

/* Node parent (/pin-controller/twai_default) identifier: */
#define DT_N_S_pin_controller_S_twai_default_S_group1_PARENT DT_N_S_pin_controller_S_twai_default

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_twai_default_S_group1_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_pin_controller_S_twai_default_S_group1_NODELABEL_NUM 0
#define DT_N_S_pin_controller_S_twai_default_S_group1_FOREACH_NODELABEL(fn) 
#define DT_N_S_pin_controller_S_twai_default_S_group1_FOREACH_NODELABEL_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_twai_default_S_group1_FOREACH_ANCESTOR(fn) fn(DT_N_S_pin_controller_S_twai_default) fn(DT_N_S_pin_controller) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_twai_default_S_group1_CHILD_NUM 0
#define DT_N_S_pin_controller_S_twai_default_S_group1_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_pin_controller_S_twai_default_S_group1_FOREACH_CHILD(fn) 
#define DT_N_S_pin_controller_S_twai_default_S_group1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_twai_default_S_group1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_twai_default_S_group1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_pin_controller_S_twai_default_S_group1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pin_controller_S_twai_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_twai_default_S_group1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_twai_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_twai_default_S_group1_ORD 18
#define DT_N_S_pin_controller_S_twai_default_S_group1_ORD_STR_SORTABLE 00018

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_twai_default_S_group1_REQUIRES_ORDS \
	17, /* /pin-controller/twai_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_twai_default_S_group1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_twai_default_S_group1_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_twai_default_S_group1_REG_NUM 0
#define DT_N_S_pin_controller_S_twai_default_S_group1_RANGES_NUM 0
#define DT_N_S_pin_controller_S_twai_default_S_group1_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_twai_default_S_group1_IRQ_NUM 0
#define DT_N_S_pin_controller_S_twai_default_S_group1_IRQ_LEVEL 0
#define DT_N_S_pin_controller_S_twai_default_S_group1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_twai_default_S_group1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_pinmux {2457538 /* 0x257fc2 */, 16749187 /* 0xff9283 */}
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_pinmux_IDX_0 2457538
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_pinmux_IDX_1_EXISTS 1
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_pinmux_IDX_1 16749187
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller_S_twai_default_S_group1, pinmux, 0) \
	fn(DT_N_S_pin_controller_S_twai_default_S_group1, pinmux, 1)
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller_S_twai_default_S_group1, pinmux, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller_S_twai_default_S_group1, pinmux, 1)
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_twai_default_S_group1, pinmux, 0, __VA_ARGS__) \
	fn(DT_N_S_pin_controller_S_twai_default_S_group1, pinmux, 1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_twai_default_S_group1, pinmux, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_pin_controller_S_twai_default_S_group1, pinmux, 1, __VA_ARGS__)
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_pinmux_LEN 2
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_pinmux_EXISTS 1
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_bias_disable 0
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_bias_disable_EXISTS 1
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_bias_pull_up 0
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_bias_pull_up_EXISTS 1
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_bias_pull_down 0
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_bias_pull_down_EXISTS 1
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_drive_push_pull 0
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_drive_push_pull_EXISTS 1
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_drive_open_drain 0
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_drive_open_drain_EXISTS 1
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_input_enable 0
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_input_enable_EXISTS 1
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_output_enable 0
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_output_enable_EXISTS 1
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_output_low 0
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_output_low_EXISTS 1
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_output_high 0
#define DT_N_S_pin_controller_S_twai_default_S_group1_P_output_high_EXISTS 1

/*
 * Devicetree node: /pin-controller/uart0_default
 *
 * Node identifier: DT_N_S_pin_controller_S_uart0_default
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_uart0_default_PATH "/pin-controller/uart0_default"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_uart0_default_FULL_NAME "uart0_default"
#define DT_N_S_pin_controller_S_uart0_default_FULL_NAME_UNQUOTED uart0_default
#define DT_N_S_pin_controller_S_uart0_default_FULL_NAME_TOKEN uart0_default
#define DT_N_S_pin_controller_S_uart0_default_FULL_NAME_UPPER_TOKEN UART0_DEFAULT

/* Node parent (/pin-controller) identifier: */
#define DT_N_S_pin_controller_S_uart0_default_PARENT DT_N_S_pin_controller

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_uart0_default_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_pin_controller_S_uart0_default_NODELABEL_NUM 1
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_NODELABEL(fn) fn(uart0_default)
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_NODELABEL_VARGS(fn, ...) fn(uart0_default, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_ANCESTOR(fn) fn(DT_N_S_pin_controller) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_uart0_default_CHILD_NUM 2
#define DT_N_S_pin_controller_S_uart0_default_CHILD_NUM_STATUS_OKAY 2
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_CHILD(fn) fn(DT_N_S_pin_controller_S_uart0_default_S_group1) fn(DT_N_S_pin_controller_S_uart0_default_S_group2)
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_pin_controller_S_uart0_default_S_group1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_uart0_default_S_group2)
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_uart0_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart0_default_S_group2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_uart0_default_S_group1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_uart0_default_S_group2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_pin_controller_S_uart0_default_S_group1) fn(DT_N_S_pin_controller_S_uart0_default_S_group2)
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_pin_controller_S_uart0_default_S_group1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_uart0_default_S_group2)
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_uart0_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart0_default_S_group2, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_uart0_default_S_group1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pin_controller_S_uart0_default_S_group2, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_uart0_default_ORD 19
#define DT_N_S_pin_controller_S_uart0_default_ORD_STR_SORTABLE 00019

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_uart0_default_REQUIRES_ORDS \
	11, /* /pin-controller */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_uart0_default_SUPPORTS_ORDS \
	20, /* /pin-controller/uart0_default/group1 */ \
	21, /* /pin-controller/uart0_default/group2 */ \
	42, /* /soc/uart@60000000 */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_uart0_default_EXISTS 1
#define DT_N_NODELABEL_uart0_default DT_N_S_pin_controller_S_uart0_default

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_uart0_default_REG_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_RANGES_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_uart0_default_IRQ_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_IRQ_LEVEL 0
#define DT_N_S_pin_controller_S_uart0_default_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_uart0_default_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /pin-controller/uart0_default/group1
 *
 * Node identifier: DT_N_S_pin_controller_S_uart0_default_S_group1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_PATH "/pin-controller/uart0_default/group1"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FULL_NAME "group1"
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FULL_NAME_UNQUOTED group1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FULL_NAME_TOKEN group1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FULL_NAME_UPPER_TOKEN GROUP1

/* Node parent (/pin-controller/uart0_default) identifier: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_PARENT DT_N_S_pin_controller_S_uart0_default

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_NODELABEL_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_NODELABEL(fn) 
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_NODELABEL_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_ANCESTOR(fn) fn(DT_N_S_pin_controller_S_uart0_default) fn(DT_N_S_pin_controller) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_CHILD_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_CHILD(fn) 
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_ORD 20
#define DT_N_S_pin_controller_S_uart0_default_S_group1_ORD_STR_SORTABLE 00020

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_REQUIRES_ORDS \
	19, /* /pin-controller/uart0_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_REG_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_RANGES_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_uart0_default_S_group1_IRQ_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_IRQ_LEVEL 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_pinmux {229333 /* 0x37fd5 */}
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_pinmux_IDX_0 229333
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller_S_uart0_default_S_group1, pinmux, 0)
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller_S_uart0_default_S_group1, pinmux, 0)
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_uart0_default_S_group1, pinmux, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_uart0_default_S_group1, pinmux, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_pinmux_LEN 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_pinmux_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_bias_disable 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_bias_disable_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_bias_pull_up 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_bias_pull_up_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_bias_pull_down 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_bias_pull_down_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_drive_push_pull 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_drive_push_pull_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_drive_open_drain 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_drive_open_drain_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_input_enable 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_input_enable_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_output_enable 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_output_enable_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_output_low 0
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_output_low_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_output_high 1
#define DT_N_S_pin_controller_S_uart0_default_S_group1_P_output_high_EXISTS 1

/*
 * Devicetree node: /pin-controller/uart0_default/group2
 *
 * Node identifier: DT_N_S_pin_controller_S_uart0_default_S_group2
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_PATH "/pin-controller/uart0_default/group2"

/* Node's name with unit-address: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FULL_NAME "group2"
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FULL_NAME_UNQUOTED group2
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FULL_NAME_TOKEN group2
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FULL_NAME_UPPER_TOKEN GROUP2

/* Node parent (/pin-controller/uart0_default) identifier: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_PARENT DT_N_S_pin_controller_S_uart0_default

/* Node's index in its parent's list of children: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_CHILD_IDX 1

/* Helpers for dealing with node labels: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_NODELABEL_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_NODELABEL(fn) 
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_NODELABEL_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_ANCESTOR(fn) fn(DT_N_S_pin_controller_S_uart0_default) fn(DT_N_S_pin_controller) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_CHILD_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_CHILD(fn) 
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_ORD 21
#define DT_N_S_pin_controller_S_uart0_default_S_group2_ORD_STR_SORTABLE 00021

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_REQUIRES_ORDS \
	19, /* /pin-controller/uart0_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_REG_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_RANGES_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_FOREACH_RANGE(fn) 
#define DT_N_S_pin_controller_S_uart0_default_S_group2_IRQ_NUM 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_IRQ_LEVEL 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_pinmux {16744852 /* 0xff8194 */}
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_pinmux_IDX_0 16744852
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pin_controller_S_uart0_default_S_group2, pinmux, 0)
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pin_controller_S_uart0_default_S_group2, pinmux, 0)
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pin_controller_S_uart0_default_S_group2, pinmux, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pin_controller_S_uart0_default_S_group2, pinmux, 0, __VA_ARGS__)
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_pinmux_LEN 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_pinmux_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_bias_disable 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_bias_disable_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_bias_pull_up 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_bias_pull_up_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_bias_pull_down 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_bias_pull_down_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_drive_push_pull 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_drive_push_pull_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_drive_open_drain 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_drive_open_drain_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_input_enable 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_input_enable_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_output_enable 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_output_enable_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_output_low 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_output_low_EXISTS 1
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_output_high 0
#define DT_N_S_pin_controller_S_uart0_default_S_group2_P_output_high_EXISTS 1

/*
 * Devicetree node: /soc
 *
 * Node identifier: DT_N_S_soc
 */

/* Node's full path: */
#define DT_N_S_soc_PATH "/soc"

/* Node's name with unit-address: */
#define DT_N_S_soc_FULL_NAME "soc"
#define DT_N_S_soc_FULL_NAME_UNQUOTED soc
#define DT_N_S_soc_FULL_NAME_TOKEN soc
#define DT_N_S_soc_FULL_NAME_UPPER_TOKEN SOC

/* Node parent (/) identifier: */
#define DT_N_S_soc_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_CHILD_IDX 6

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_NODELABEL_NUM 0
#define DT_N_S_soc_FOREACH_NODELABEL(fn) 
#define DT_N_S_soc_FOREACH_NODELABEL_VARGS(fn, ...) 
#define DT_N_S_soc_FOREACH_ANCESTOR(fn) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_CHILD_NUM 26
#define DT_N_S_soc_CHILD_NUM_STATUS_OKAY 17
#define DT_N_S_soc_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_memory_4037c000) fn(DT_N_S_soc_S_memory_3fc80000) fn(DT_N_S_soc_S_interrupt_controller_600c2000) fn(DT_N_S_soc_S_systimer_60023000) fn(DT_N_S_soc_S_rtc_60008000) fn(DT_N_S_soc_S_xt_wdt_60008004) fn(DT_N_S_soc_S_rtc_timer_60008004) fn(DT_N_S_soc_S_flash_controller_60002000) fn(DT_N_S_soc_S_gpio_60004000) fn(DT_N_S_soc_S_i2c_60013000) fn(DT_N_S_soc_S_i2s_6002d000) fn(DT_N_S_soc_S_uart_60000000) fn(DT_N_S_soc_S_uart_60010000) fn(DT_N_S_soc_S_ledc_60019000) fn(DT_N_S_soc_S_uart_60043000) fn(DT_N_S_soc_S_counter_6001f000) fn(DT_N_S_soc_S_counter_60020000) fn(DT_N_S_soc_S_trng_3ff700b0) fn(DT_N_S_soc_S_can_6002b000) fn(DT_N_S_soc_S_spi_60024000) fn(DT_N_S_soc_S_watchdog_6001f048) fn(DT_N_S_soc_S_watchdog_60020048) fn(DT_N_S_soc_S_coretemp_60040058) fn(DT_N_S_soc_S_adc_60040000) fn(DT_N_S_soc_S_adc_60040004) fn(DT_N_S_soc_S_dma_6003f000)
#define DT_N_S_soc_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_memory_4037c000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_3fc80000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_interrupt_controller_600c2000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_systimer_60023000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_rtc_60008000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_xt_wdt_60008004) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_rtc_timer_60008004) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_60004000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_60013000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2s_6002d000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_60000000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_60010000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_ledc_60019000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_60043000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_counter_6001f000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_counter_60020000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_trng_3ff700b0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_can_6002b000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_spi_60024000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_watchdog_6001f048) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_watchdog_60020048) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_coretemp_60040058) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_adc_60040000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_adc_60040004) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_dma_6003f000)
#define DT_N_S_soc_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_4037c000, __VA_ARGS__) fn(DT_N_S_soc_S_memory_3fc80000, __VA_ARGS__) fn(DT_N_S_soc_S_interrupt_controller_600c2000, __VA_ARGS__) fn(DT_N_S_soc_S_systimer_60023000, __VA_ARGS__) fn(DT_N_S_soc_S_rtc_60008000, __VA_ARGS__) fn(DT_N_S_soc_S_xt_wdt_60008004, __VA_ARGS__) fn(DT_N_S_soc_S_rtc_timer_60008004, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_60004000, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_60013000, __VA_ARGS__) fn(DT_N_S_soc_S_i2s_6002d000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_60000000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_60010000, __VA_ARGS__) fn(DT_N_S_soc_S_ledc_60019000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_60043000, __VA_ARGS__) fn(DT_N_S_soc_S_counter_6001f000, __VA_ARGS__) fn(DT_N_S_soc_S_counter_60020000, __VA_ARGS__) fn(DT_N_S_soc_S_trng_3ff700b0, __VA_ARGS__) fn(DT_N_S_soc_S_can_6002b000, __VA_ARGS__) fn(DT_N_S_soc_S_spi_60024000, __VA_ARGS__) fn(DT_N_S_soc_S_watchdog_6001f048, __VA_ARGS__) fn(DT_N_S_soc_S_watchdog_60020048, __VA_ARGS__) fn(DT_N_S_soc_S_coretemp_60040058, __VA_ARGS__) fn(DT_N_S_soc_S_adc_60040000, __VA_ARGS__) fn(DT_N_S_soc_S_adc_60040004, __VA_ARGS__) fn(DT_N_S_soc_S_dma_6003f000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_memory_4037c000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_3fc80000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_interrupt_controller_600c2000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_systimer_60023000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_rtc_60008000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_xt_wdt_60008004, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_rtc_timer_60008004, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_60004000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_60013000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2s_6002d000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_60000000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_60010000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_ledc_60019000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_60043000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_counter_6001f000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_counter_60020000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_trng_3ff700b0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_can_6002b000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_spi_60024000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_watchdog_6001f048, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_watchdog_60020048, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_coretemp_60040058, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_adc_60040000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_adc_60040004, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_dma_6003f000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_memory_4037c000) fn(DT_N_S_soc_S_memory_3fc80000) fn(DT_N_S_soc_S_interrupt_controller_600c2000) fn(DT_N_S_soc_S_systimer_60023000) fn(DT_N_S_soc_S_rtc_60008000) fn(DT_N_S_soc_S_rtc_timer_60008004) fn(DT_N_S_soc_S_flash_controller_60002000) fn(DT_N_S_soc_S_gpio_60004000) fn(DT_N_S_soc_S_i2c_60013000) fn(DT_N_S_soc_S_uart_60000000) fn(DT_N_S_soc_S_uart_60043000) fn(DT_N_S_soc_S_counter_6001f000) fn(DT_N_S_soc_S_counter_60020000) fn(DT_N_S_soc_S_trng_3ff700b0) fn(DT_N_S_soc_S_can_6002b000) fn(DT_N_S_soc_S_spi_60024000) fn(DT_N_S_soc_S_watchdog_6001f048)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_memory_4037c000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_3fc80000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_interrupt_controller_600c2000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_systimer_60023000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_rtc_60008000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_rtc_timer_60008004) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_60004000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_60013000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_60000000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_60043000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_counter_6001f000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_counter_60020000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_trng_3ff700b0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_can_6002b000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_spi_60024000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_watchdog_6001f048)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_4037c000, __VA_ARGS__) fn(DT_N_S_soc_S_memory_3fc80000, __VA_ARGS__) fn(DT_N_S_soc_S_interrupt_controller_600c2000, __VA_ARGS__) fn(DT_N_S_soc_S_systimer_60023000, __VA_ARGS__) fn(DT_N_S_soc_S_rtc_60008000, __VA_ARGS__) fn(DT_N_S_soc_S_rtc_timer_60008004, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_60004000, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_60013000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_60000000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_60043000, __VA_ARGS__) fn(DT_N_S_soc_S_counter_6001f000, __VA_ARGS__) fn(DT_N_S_soc_S_counter_60020000, __VA_ARGS__) fn(DT_N_S_soc_S_trng_3ff700b0, __VA_ARGS__) fn(DT_N_S_soc_S_can_6002b000, __VA_ARGS__) fn(DT_N_S_soc_S_spi_60024000, __VA_ARGS__) fn(DT_N_S_soc_S_watchdog_6001f048, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_memory_4037c000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_3fc80000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_interrupt_controller_600c2000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_systimer_60023000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_rtc_60008000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_rtc_timer_60008004, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_60004000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_60013000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_60000000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_60043000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_counter_6001f000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_counter_60020000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_trng_3ff700b0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_can_6002b000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_spi_60024000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_watchdog_6001f048, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_ORD 22
#define DT_N_S_soc_ORD_STR_SORTABLE 00022

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_SUPPORTS_ORDS \
	23, /* /soc/adc@60040000 */ \
	24, /* /soc/adc@60040004 */ \
	25, /* /soc/interrupt-controller@600c2000 */ \
	26, /* /soc/rtc@60008000 */ \
	27, /* /soc/can@6002b000 */ \
	28, /* /soc/coretemp@60040058 */ \
	29, /* /soc/counter@6001f000 */ \
	30, /* /soc/counter@60020000 */ \
	31, /* /soc/gpio@60004000 */ \
	32, /* /soc/i2c@60013000 */ \
	33, /* /soc/dma@6003f000 */ \
	34, /* /soc/i2s@6002d000 */ \
	35, /* /soc/ledc@60019000 */ \
	36, /* /soc/memory@3fc80000 */ \
	37, /* /soc/memory@4037c000 */ \
	38, /* /soc/rtc_timer@60008004 */ \
	39, /* /soc/spi@60024000 */ \
	40, /* /soc/systimer@60023000 */ \
	41, /* /soc/trng@3ff700b0 */ \
	42, /* /soc/uart@60000000 */ \
	43, /* /soc/uart@60010000 */ \
	44, /* /soc/uart@60043000 */ \
	45, /* /soc/watchdog@6001f048 */ \
	46, /* /soc/watchdog@60020048 */ \
	47, /* /soc/xt_wdt@60008004 */ \
	48, /* /soc/flash-controller@60002000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_EXISTS 1
#define DT_N_INST_0_simple_bus DT_N_S_soc

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_REG_NUM 0
#define DT_N_S_soc_RANGES_NUM 0
#define DT_N_S_soc_FOREACH_RANGE(fn) 
#define DT_N_S_soc_IRQ_NUM 0
#define DT_N_S_soc_IRQ_LEVEL 0
#define DT_N_S_soc_COMPAT_MATCHES_simple_bus 1
#define DT_N_S_soc_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_P_compatible {"simple-bus"}
#define DT_N_S_soc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_P_compatible_IDX_0 "simple-bus"
#define DT_N_S_soc_P_compatible_IDX_0_STRING_UNQUOTED simple-bus
#define DT_N_S_soc_P_compatible_IDX_0_STRING_TOKEN simple_bus
#define DT_N_S_soc_P_compatible_IDX_0_STRING_UPPER_TOKEN SIMPLE_BUS
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc, compatible, 0)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc, compatible, 0)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_LEN 1
#define DT_N_S_soc_P_compatible_EXISTS 1
#define DT_N_S_soc_P_ranges_EXISTS 1

/*
 * Devicetree node: /soc/adc@60040000
 *
 * Node identifier: DT_N_S_soc_S_adc_60040000
 *
 * Binding (compatible = espressif,esp32-adc):
 *   $ZEPHYR_BASE/dts/bindings/adc/espressif,esp32-adc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_adc_60040000_PATH "/soc/adc@60040000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_adc_60040000_FULL_NAME "adc@60040000"
#define DT_N_S_soc_S_adc_60040000_FULL_NAME_UNQUOTED adc@60040000
#define DT_N_S_soc_S_adc_60040000_FULL_NAME_TOKEN adc_60040000
#define DT_N_S_soc_S_adc_60040000_FULL_NAME_UPPER_TOKEN ADC_60040000

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_adc_60040000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_adc_60040000_CHILD_IDX 23

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_adc_60040000_NODELABEL_NUM 2
#define DT_N_S_soc_S_adc_60040000_FOREACH_NODELABEL(fn) fn(adc0) fn(xiao_adc)
#define DT_N_S_soc_S_adc_60040000_FOREACH_NODELABEL_VARGS(fn, ...) fn(adc0, __VA_ARGS__) fn(xiao_adc, __VA_ARGS__)
#define DT_N_S_soc_S_adc_60040000_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_adc_60040000_CHILD_NUM 0
#define DT_N_S_soc_S_adc_60040000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_adc_60040000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_adc_60040000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_adc_60040000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_adc_60040000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_adc_60040000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_adc_60040000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_adc_60040000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_adc_60040000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_adc_60040000_ORD 23
#define DT_N_S_soc_S_adc_60040000_ORD_STR_SORTABLE 00023

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_adc_60040000_REQUIRES_ORDS \
	22, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_adc_60040000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_adc_60040000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_adc DT_N_S_soc_S_adc_60040000
#define DT_N_NODELABEL_adc0             DT_N_S_soc_S_adc_60040000
#define DT_N_NODELABEL_xiao_adc         DT_N_S_soc_S_adc_60040000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_adc_60040000_REG_NUM 1
#define DT_N_S_soc_S_adc_60040000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_60040000_REG_IDX_0_VAL_ADDRESS 1610874880 /* 0x60040000 */
#define DT_N_S_soc_S_adc_60040000_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_adc_60040000_RANGES_NUM 0
#define DT_N_S_soc_S_adc_60040000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_adc_60040000_IRQ_NUM 0
#define DT_N_S_soc_S_adc_60040000_IRQ_LEVEL 0
#define DT_N_S_soc_S_adc_60040000_COMPAT_MATCHES_espressif_esp32_adc 1
#define DT_N_S_soc_S_adc_60040000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_60040000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_adc_60040000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_60040000_COMPAT_MODEL_IDX_0 "esp32-adc"
#define DT_N_S_soc_S_adc_60040000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_adc_60040000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_adc_60040000_P_unit 1
#define DT_N_S_soc_S_adc_60040000_P_unit_EXISTS 1
#define DT_N_S_soc_S_adc_60040000_P_channel_count 5
#define DT_N_S_soc_S_adc_60040000_P_channel_count_EXISTS 1
#define DT_N_S_soc_S_adc_60040000_P_status "disabled"
#define DT_N_S_soc_S_adc_60040000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_adc_60040000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_adc_60040000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_adc_60040000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_adc_60040000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_60040000_P_status_IDX_0_ENUM_IDX 2
#define DT_N_S_soc_S_adc_60040000_P_status_IDX_0_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_adc_60040000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_adc_60040000, status, 0)
#define DT_N_S_soc_S_adc_60040000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_adc_60040000, status, 0)
#define DT_N_S_soc_S_adc_60040000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_adc_60040000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_60040000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_adc_60040000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_60040000_P_status_LEN 1
#define DT_N_S_soc_S_adc_60040000_P_status_EXISTS 1
#define DT_N_S_soc_S_adc_60040000_P_compatible {"espressif,esp32-adc"}
#define DT_N_S_soc_S_adc_60040000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_60040000_P_compatible_IDX_0 "espressif,esp32-adc"
#define DT_N_S_soc_S_adc_60040000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-adc
#define DT_N_S_soc_S_adc_60040000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_adc
#define DT_N_S_soc_S_adc_60040000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_ADC
#define DT_N_S_soc_S_adc_60040000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_adc_60040000, compatible, 0)
#define DT_N_S_soc_S_adc_60040000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_adc_60040000, compatible, 0)
#define DT_N_S_soc_S_adc_60040000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_adc_60040000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_60040000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_adc_60040000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_60040000_P_compatible_LEN 1
#define DT_N_S_soc_S_adc_60040000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_adc_60040000_P_reg {1610874880 /* 0x60040000 */, 4 /* 0x4 */}
#define DT_N_S_soc_S_adc_60040000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_60040000_P_reg_IDX_0 1610874880
#define DT_N_S_soc_S_adc_60040000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_adc_60040000_P_reg_IDX_1 4
#define DT_N_S_soc_S_adc_60040000_P_reg_EXISTS 1
#define DT_N_S_soc_S_adc_60040000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_adc_60040000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_adc_60040000_P_wakeup_source 0
#define DT_N_S_soc_S_adc_60040000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_adc_60040000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_adc_60040000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/adc@60040004
 *
 * Node identifier: DT_N_S_soc_S_adc_60040004
 *
 * Binding (compatible = espressif,esp32-adc):
 *   $ZEPHYR_BASE/dts/bindings/adc/espressif,esp32-adc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_adc_60040004_PATH "/soc/adc@60040004"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_adc_60040004_FULL_NAME "adc@60040004"
#define DT_N_S_soc_S_adc_60040004_FULL_NAME_UNQUOTED adc@60040004
#define DT_N_S_soc_S_adc_60040004_FULL_NAME_TOKEN adc_60040004
#define DT_N_S_soc_S_adc_60040004_FULL_NAME_UPPER_TOKEN ADC_60040004

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_adc_60040004_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_adc_60040004_CHILD_IDX 24

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_adc_60040004_NODELABEL_NUM 1
#define DT_N_S_soc_S_adc_60040004_FOREACH_NODELABEL(fn) fn(adc1)
#define DT_N_S_soc_S_adc_60040004_FOREACH_NODELABEL_VARGS(fn, ...) fn(adc1, __VA_ARGS__)
#define DT_N_S_soc_S_adc_60040004_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_adc_60040004_CHILD_NUM 0
#define DT_N_S_soc_S_adc_60040004_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_adc_60040004_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_adc_60040004_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_adc_60040004_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_adc_60040004_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_adc_60040004_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_adc_60040004_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_adc_60040004_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_adc_60040004_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_adc_60040004_ORD 24
#define DT_N_S_soc_S_adc_60040004_ORD_STR_SORTABLE 00024

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_adc_60040004_REQUIRES_ORDS \
	22, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_adc_60040004_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_adc_60040004_EXISTS 1
#define DT_N_INST_1_espressif_esp32_adc DT_N_S_soc_S_adc_60040004
#define DT_N_NODELABEL_adc1             DT_N_S_soc_S_adc_60040004

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_adc_60040004_REG_NUM 1
#define DT_N_S_soc_S_adc_60040004_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_60040004_REG_IDX_0_VAL_ADDRESS 1610874884 /* 0x60040004 */
#define DT_N_S_soc_S_adc_60040004_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_adc_60040004_RANGES_NUM 0
#define DT_N_S_soc_S_adc_60040004_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_adc_60040004_IRQ_NUM 0
#define DT_N_S_soc_S_adc_60040004_IRQ_LEVEL 0
#define DT_N_S_soc_S_adc_60040004_COMPAT_MATCHES_espressif_esp32_adc 1
#define DT_N_S_soc_S_adc_60040004_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_60040004_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_adc_60040004_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_60040004_COMPAT_MODEL_IDX_0 "esp32-adc"
#define DT_N_S_soc_S_adc_60040004_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_adc_60040004_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_adc_60040004_P_unit 2
#define DT_N_S_soc_S_adc_60040004_P_unit_EXISTS 1
#define DT_N_S_soc_S_adc_60040004_P_channel_count 2
#define DT_N_S_soc_S_adc_60040004_P_channel_count_EXISTS 1
#define DT_N_S_soc_S_adc_60040004_P_status "disabled"
#define DT_N_S_soc_S_adc_60040004_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_adc_60040004_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_adc_60040004_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_adc_60040004_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_adc_60040004_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_60040004_P_status_IDX_0_ENUM_IDX 2
#define DT_N_S_soc_S_adc_60040004_P_status_IDX_0_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_adc_60040004_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_adc_60040004, status, 0)
#define DT_N_S_soc_S_adc_60040004_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_adc_60040004, status, 0)
#define DT_N_S_soc_S_adc_60040004_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_adc_60040004, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_60040004_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_adc_60040004, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_60040004_P_status_LEN 1
#define DT_N_S_soc_S_adc_60040004_P_status_EXISTS 1
#define DT_N_S_soc_S_adc_60040004_P_compatible {"espressif,esp32-adc"}
#define DT_N_S_soc_S_adc_60040004_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_60040004_P_compatible_IDX_0 "espressif,esp32-adc"
#define DT_N_S_soc_S_adc_60040004_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-adc
#define DT_N_S_soc_S_adc_60040004_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_adc
#define DT_N_S_soc_S_adc_60040004_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_ADC
#define DT_N_S_soc_S_adc_60040004_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_adc_60040004, compatible, 0)
#define DT_N_S_soc_S_adc_60040004_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_adc_60040004, compatible, 0)
#define DT_N_S_soc_S_adc_60040004_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_adc_60040004, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_60040004_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_adc_60040004, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_adc_60040004_P_compatible_LEN 1
#define DT_N_S_soc_S_adc_60040004_P_compatible_EXISTS 1
#define DT_N_S_soc_S_adc_60040004_P_reg {1610874884 /* 0x60040004 */, 4 /* 0x4 */}
#define DT_N_S_soc_S_adc_60040004_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_adc_60040004_P_reg_IDX_0 1610874884
#define DT_N_S_soc_S_adc_60040004_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_adc_60040004_P_reg_IDX_1 4
#define DT_N_S_soc_S_adc_60040004_P_reg_EXISTS 1
#define DT_N_S_soc_S_adc_60040004_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_adc_60040004_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_adc_60040004_P_wakeup_source 0
#define DT_N_S_soc_S_adc_60040004_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_adc_60040004_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_adc_60040004_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/interrupt-controller@600c2000
 *
 * Node identifier: DT_N_S_soc_S_interrupt_controller_600c2000
 *
 * Binding (compatible = espressif,esp32-intc):
 *   $ZEPHYR_BASE/dts/bindings/interrupt-controller/espressif,esp32-intc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_interrupt_controller_600c2000_PATH "/soc/interrupt-controller@600c2000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_interrupt_controller_600c2000_FULL_NAME "interrupt-controller@600c2000"
#define DT_N_S_soc_S_interrupt_controller_600c2000_FULL_NAME_UNQUOTED interrupt-controller@600c2000
#define DT_N_S_soc_S_interrupt_controller_600c2000_FULL_NAME_TOKEN interrupt_controller_600c2000
#define DT_N_S_soc_S_interrupt_controller_600c2000_FULL_NAME_UPPER_TOKEN INTERRUPT_CONTROLLER_600C2000

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_interrupt_controller_600c2000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_interrupt_controller_600c2000_CHILD_IDX 2

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_interrupt_controller_600c2000_NODELABEL_NUM 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_FOREACH_NODELABEL(fn) fn(intc)
#define DT_N_S_soc_S_interrupt_controller_600c2000_FOREACH_NODELABEL_VARGS(fn, ...) fn(intc, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_600c2000_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_interrupt_controller_600c2000_CHILD_NUM 0
#define DT_N_S_soc_S_interrupt_controller_600c2000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_interrupt_controller_600c2000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_interrupt_controller_600c2000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_interrupt_controller_600c2000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_interrupt_controller_600c2000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_interrupt_controller_600c2000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_interrupt_controller_600c2000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_interrupt_controller_600c2000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_interrupt_controller_600c2000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_interrupt_controller_600c2000_ORD 25
#define DT_N_S_soc_S_interrupt_controller_600c2000_ORD_STR_SORTABLE 00025

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_interrupt_controller_600c2000_REQUIRES_ORDS \
	22, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_interrupt_controller_600c2000_SUPPORTS_ORDS \
	27, /* /soc/can@6002b000 */ \
	29, /* /soc/counter@6001f000 */ \
	30, /* /soc/counter@60020000 */ \
	31, /* /soc/gpio@60004000 */ \
	32, /* /soc/i2c@60013000 */ \
	33, /* /soc/dma@6003f000 */ \
	34, /* /soc/i2s@6002d000 */ \
	38, /* /soc/rtc_timer@60008004 */ \
	39, /* /soc/spi@60024000 */ \
	40, /* /soc/systimer@60023000 */ \
	42, /* /soc/uart@60000000 */ \
	43, /* /soc/uart@60010000 */ \
	44, /* /soc/uart@60043000 */ \
	45, /* /soc/watchdog@6001f048 */ \
	46, /* /soc/watchdog@60020048 */ \
	47, /* /soc/xt_wdt@60008004 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_interrupt_controller_600c2000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_intc DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_NODELABEL_intc              DT_N_S_soc_S_interrupt_controller_600c2000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_interrupt_controller_600c2000_REG_NUM 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_REG_IDX_0_VAL_ADDRESS 1611407360 /* 0x600c2000 */
#define DT_N_S_soc_S_interrupt_controller_600c2000_REG_IDX_0_VAL_SIZE 408 /* 0x198 */
#define DT_N_S_soc_S_interrupt_controller_600c2000_RANGES_NUM 0
#define DT_N_S_soc_S_interrupt_controller_600c2000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_interrupt_controller_600c2000_IRQ_NUM 0
#define DT_N_S_soc_S_interrupt_controller_600c2000_IRQ_LEVEL 0
#define DT_N_S_soc_S_interrupt_controller_600c2000_COMPAT_MATCHES_espressif_esp32_intc 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_interrupt_controller_600c2000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_COMPAT_MODEL_IDX_0 "esp32-intc"
#define DT_N_S_soc_S_interrupt_controller_600c2000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_interrupt_controller_600c2000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_reg {1611407360 /* 0x600c2000 */, 408 /* 0x198 */}
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_reg_IDX_0 1611407360
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_reg_IDX_1 408
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_reg_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_interrupt_controller 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_interrupt_controller_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_status "okay"
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_600c2000, status, 0)
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_600c2000, status, 0)
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_600c2000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_600c2000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_status_LEN 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_status_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_compatible {"espressif,esp32-intc"}
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_compatible_IDX_0 "espressif,esp32-intc"
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-intc
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_intc
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_INTC
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_600c2000, compatible, 0)
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_600c2000, compatible, 0)
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_600c2000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_600c2000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_compatible_LEN 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_wakeup_source 0
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_interrupt_controller_600c2000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/rtc@60008000
 *
 * Node identifier: DT_N_S_soc_S_rtc_60008000
 *
 * Binding (compatible = espressif,esp32-rtc):
 *   $ZEPHYR_BASE/dts/bindings/clock/espressif,esp32-rtc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_rtc_60008000_PATH "/soc/rtc@60008000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_rtc_60008000_FULL_NAME "rtc@60008000"
#define DT_N_S_soc_S_rtc_60008000_FULL_NAME_UNQUOTED rtc@60008000
#define DT_N_S_soc_S_rtc_60008000_FULL_NAME_TOKEN rtc_60008000
#define DT_N_S_soc_S_rtc_60008000_FULL_NAME_UPPER_TOKEN RTC_60008000

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_rtc_60008000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_rtc_60008000_CHILD_IDX 4

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_rtc_60008000_NODELABEL_NUM 1
#define DT_N_S_soc_S_rtc_60008000_FOREACH_NODELABEL(fn) fn(rtc)
#define DT_N_S_soc_S_rtc_60008000_FOREACH_NODELABEL_VARGS(fn, ...) fn(rtc, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_60008000_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_rtc_60008000_CHILD_NUM 0
#define DT_N_S_soc_S_rtc_60008000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_rtc_60008000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_rtc_60008000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_rtc_60008000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_rtc_60008000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_rtc_60008000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_rtc_60008000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_rtc_60008000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_rtc_60008000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_rtc_60008000_ORD 26
#define DT_N_S_soc_S_rtc_60008000_ORD_STR_SORTABLE 00026

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_rtc_60008000_REQUIRES_ORDS \
	22, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_rtc_60008000_SUPPORTS_ORDS \
	27, /* /soc/can@6002b000 */ \
	29, /* /soc/counter@6001f000 */ \
	30, /* /soc/counter@60020000 */ \
	32, /* /soc/i2c@60013000 */ \
	33, /* /soc/dma@6003f000 */ \
	34, /* /soc/i2s@6002d000 */ \
	35, /* /soc/ledc@60019000 */ \
	38, /* /soc/rtc_timer@60008004 */ \
	39, /* /soc/spi@60024000 */ \
	42, /* /soc/uart@60000000 */ \
	43, /* /soc/uart@60010000 */ \
	44, /* /soc/uart@60043000 */ \
	45, /* /soc/watchdog@6001f048 */ \
	46, /* /soc/watchdog@60020048 */ \
	47, /* /soc/xt_wdt@60008004 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_rtc_60008000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_rtc DT_N_S_soc_S_rtc_60008000
#define DT_N_NODELABEL_rtc              DT_N_S_soc_S_rtc_60008000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_rtc_60008000_REG_NUM 1
#define DT_N_S_soc_S_rtc_60008000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_REG_IDX_0_VAL_ADDRESS 1610645504 /* 0x60008000 */
#define DT_N_S_soc_S_rtc_60008000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_rtc_60008000_RANGES_NUM 0
#define DT_N_S_soc_S_rtc_60008000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_rtc_60008000_IRQ_NUM 0
#define DT_N_S_soc_S_rtc_60008000_IRQ_LEVEL 0
#define DT_N_S_soc_S_rtc_60008000_COMPAT_MATCHES_espressif_esp32_rtc 1
#define DT_N_S_soc_S_rtc_60008000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_rtc_60008000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_COMPAT_MODEL_IDX_0 "esp32-rtc"
#define DT_N_S_soc_S_rtc_60008000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_rtc_60008000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_rtc_60008000_P_reg {1610645504 /* 0x60008000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_rtc_60008000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_P_reg_IDX_0 1610645504
#define DT_N_S_soc_S_rtc_60008000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_rtc_60008000_P_reg_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_P_fast_clk_src 1
#define DT_N_S_soc_S_rtc_60008000_P_fast_clk_src_IDX_0_ENUM_IDX 1
#define DT_N_S_soc_S_rtc_60008000_P_fast_clk_src_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_P_fast_clk_src_IDX_0_ENUM_VAL_1_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_P_fast_clk_src_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_P_slow_clk_src 0
#define DT_N_S_soc_S_rtc_60008000_P_slow_clk_src_IDX_0_ENUM_IDX 0
#define DT_N_S_soc_S_rtc_60008000_P_slow_clk_src_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_P_slow_clk_src_IDX_0_ENUM_VAL_0_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_P_slow_clk_src_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_P_status "okay"
#define DT_N_S_soc_S_rtc_60008000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_rtc_60008000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_rtc_60008000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_rtc_60008000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_rtc_60008000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_soc_S_rtc_60008000_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_60008000, status, 0)
#define DT_N_S_soc_S_rtc_60008000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_rtc_60008000, status, 0)
#define DT_N_S_soc_S_rtc_60008000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_60008000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_60008000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_rtc_60008000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_60008000_P_status_LEN 1
#define DT_N_S_soc_S_rtc_60008000_P_status_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_P_compatible {"espressif,esp32-rtc"}
#define DT_N_S_soc_S_rtc_60008000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_P_compatible_IDX_0 "espressif,esp32-rtc"
#define DT_N_S_soc_S_rtc_60008000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-rtc
#define DT_N_S_soc_S_rtc_60008000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_rtc
#define DT_N_S_soc_S_rtc_60008000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_RTC
#define DT_N_S_soc_S_rtc_60008000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_60008000, compatible, 0)
#define DT_N_S_soc_S_rtc_60008000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_rtc_60008000, compatible, 0)
#define DT_N_S_soc_S_rtc_60008000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_60008000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_60008000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_rtc_60008000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_60008000_P_compatible_LEN 1
#define DT_N_S_soc_S_rtc_60008000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_rtc_60008000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_P_wakeup_source 0
#define DT_N_S_soc_S_rtc_60008000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_rtc_60008000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_rtc_60008000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/can@6002b000
 *
 * Node identifier: DT_N_S_soc_S_can_6002b000
 *
 * Binding (compatible = espressif,esp32-twai):
 *   $ZEPHYR_BASE/dts/bindings/can/espressif,esp32-twai.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_can_6002b000_PATH "/soc/can@6002b000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_can_6002b000_FULL_NAME "can@6002b000"
#define DT_N_S_soc_S_can_6002b000_FULL_NAME_UNQUOTED can@6002b000
#define DT_N_S_soc_S_can_6002b000_FULL_NAME_TOKEN can_6002b000
#define DT_N_S_soc_S_can_6002b000_FULL_NAME_UPPER_TOKEN CAN_6002B000

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_can_6002b000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_can_6002b000_CHILD_IDX 18

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_can_6002b000_NODELABEL_NUM 1
#define DT_N_S_soc_S_can_6002b000_FOREACH_NODELABEL(fn) fn(twai)
#define DT_N_S_soc_S_can_6002b000_FOREACH_NODELABEL_VARGS(fn, ...) fn(twai, __VA_ARGS__)
#define DT_N_S_soc_S_can_6002b000_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_can_6002b000_CHILD_NUM 0
#define DT_N_S_soc_S_can_6002b000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_can_6002b000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_can_6002b000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_can_6002b000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_can_6002b000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_can_6002b000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_can_6002b000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_can_6002b000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_can_6002b000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_can_6002b000_ORD 27
#define DT_N_S_soc_S_can_6002b000_ORD_STR_SORTABLE 00027

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_can_6002b000_REQUIRES_ORDS \
	17, /* /pin-controller/twai_default */ \
	22, /* /soc */ \
	25, /* /soc/interrupt-controller@600c2000 */ \
	26, /* /soc/rtc@60008000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_can_6002b000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_can_6002b000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_twai DT_N_S_soc_S_can_6002b000
#define DT_N_NODELABEL_twai              DT_N_S_soc_S_can_6002b000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_can_6002b000_REG_NUM 1
#define DT_N_S_soc_S_can_6002b000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_REG_IDX_0_VAL_ADDRESS 1610788864 /* 0x6002b000 */
#define DT_N_S_soc_S_can_6002b000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_can_6002b000_RANGES_NUM 0
#define DT_N_S_soc_S_can_6002b000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_can_6002b000_IRQ_NUM 1
#define DT_N_S_soc_S_can_6002b000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_IRQ_IDX_0_VAL_irq 25
#define DT_N_S_soc_S_can_6002b000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_can_6002b000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_IRQ_IDX_0_VAL_flags 0
#define DT_N_S_soc_S_can_6002b000_IRQ_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_can_6002b000_IRQ_LEVEL 1
#define DT_N_S_soc_S_can_6002b000_COMPAT_MATCHES_espressif_esp32_twai 1
#define DT_N_S_soc_S_can_6002b000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_can_6002b000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_COMPAT_MODEL_IDX_0 "esp32-twai"
#define DT_N_S_soc_S_can_6002b000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_can_6002b000_PINCTRL_NUM 1
#define DT_N_S_soc_S_can_6002b000_PINCTRL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_PINCTRL_IDX_0_TOKEN default
#define DT_N_S_soc_S_can_6002b000_PINCTRL_IDX_0_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_can_6002b000_PINCTRL_NAME_default_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_PINCTRL_NAME_default_IDX 0
#define DT_N_S_soc_S_can_6002b000_PINCTRL_NAME_default_IDX_0_PH DT_N_S_pin_controller_S_twai_default

/* Generic property macros: */
#define DT_N_S_soc_S_can_6002b000_P_reg {1610788864 /* 0x6002b000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_can_6002b000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_reg_IDX_0 1610788864
#define DT_N_S_soc_S_can_6002b000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_can_6002b000_P_reg_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_interrupts {25 /* 0x19 */, 3 /* 0x3 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_can_6002b000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_interrupts_IDX_0 25
#define DT_N_S_soc_S_can_6002b000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_can_6002b000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_interrupts_IDX_2 0
#define DT_N_S_soc_S_can_6002b000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_60008000
#define DT_N_S_soc_S_can_6002b000_P_clocks_IDX_0_VAL_offset 12
#define DT_N_S_soc_S_can_6002b000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_6002b000, clocks, 0)
#define DT_N_S_soc_S_can_6002b000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_can_6002b000, clocks, 0)
#define DT_N_S_soc_S_can_6002b000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_6002b000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_6002b000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_can_6002b000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_6002b000_P_clocks_LEN 1
#define DT_N_S_soc_S_can_6002b000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_0_IDX_0 DT_N_S_pin_controller_S_twai_default
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_0_IDX_0_PH DT_N_S_pin_controller_S_twai_default
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_0_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_0_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_6002b000, pinctrl_0, 0)
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_can_6002b000, pinctrl_0, 0)
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_0_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_6002b000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_can_6002b000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_0_LEN 1
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_names {"default"}
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_names_IDX_0 "default"
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_names_IDX_0_STRING_UNQUOTED default
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_names_IDX_0_STRING_TOKEN default
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_names_IDX_0_STRING_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_6002b000, pinctrl_names, 0)
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_can_6002b000, pinctrl_names, 0)
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_6002b000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_can_6002b000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_names_LEN 1
#define DT_N_S_soc_S_can_6002b000_P_pinctrl_names_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_status "okay"
#define DT_N_S_soc_S_can_6002b000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_can_6002b000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_can_6002b000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_can_6002b000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_can_6002b000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_soc_S_can_6002b000_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_6002b000, status, 0)
#define DT_N_S_soc_S_can_6002b000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_can_6002b000, status, 0)
#define DT_N_S_soc_S_can_6002b000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_6002b000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_6002b000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_can_6002b000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_6002b000_P_status_LEN 1
#define DT_N_S_soc_S_can_6002b000_P_status_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_compatible {"espressif,esp32-twai"}
#define DT_N_S_soc_S_can_6002b000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_compatible_IDX_0 "espressif,esp32-twai"
#define DT_N_S_soc_S_can_6002b000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-twai
#define DT_N_S_soc_S_can_6002b000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_twai
#define DT_N_S_soc_S_can_6002b000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_TWAI
#define DT_N_S_soc_S_can_6002b000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_6002b000, compatible, 0)
#define DT_N_S_soc_S_can_6002b000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_can_6002b000, compatible, 0)
#define DT_N_S_soc_S_can_6002b000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_6002b000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_6002b000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_can_6002b000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_6002b000_P_compatible_LEN 1
#define DT_N_S_soc_S_can_6002b000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_can_6002b000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_can_6002b000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_can_6002b000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_can_6002b000, interrupt_parent, 0)
#define DT_N_S_soc_S_can_6002b000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_can_6002b000, interrupt_parent, 0)
#define DT_N_S_soc_S_can_6002b000_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_can_6002b000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_6002b000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_can_6002b000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_can_6002b000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_can_6002b000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_can_6002b000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_wakeup_source 0
#define DT_N_S_soc_S_can_6002b000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_can_6002b000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_can_6002b000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/coretemp@60040058
 *
 * Node identifier: DT_N_S_soc_S_coretemp_60040058
 *
 * Binding (compatible = espressif,esp32-temp):
 *   $ZEPHYR_BASE/dts/bindings/sensor/espressif,esp32-temp.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_coretemp_60040058_PATH "/soc/coretemp@60040058"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_coretemp_60040058_FULL_NAME "coretemp@60040058"
#define DT_N_S_soc_S_coretemp_60040058_FULL_NAME_UNQUOTED coretemp@60040058
#define DT_N_S_soc_S_coretemp_60040058_FULL_NAME_TOKEN coretemp_60040058
#define DT_N_S_soc_S_coretemp_60040058_FULL_NAME_UPPER_TOKEN CORETEMP_60040058

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_coretemp_60040058_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_coretemp_60040058_CHILD_IDX 22

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_coretemp_60040058_NODELABEL_NUM 1
#define DT_N_S_soc_S_coretemp_60040058_FOREACH_NODELABEL(fn) fn(coretemp)
#define DT_N_S_soc_S_coretemp_60040058_FOREACH_NODELABEL_VARGS(fn, ...) fn(coretemp, __VA_ARGS__)
#define DT_N_S_soc_S_coretemp_60040058_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_coretemp_60040058_CHILD_NUM 0
#define DT_N_S_soc_S_coretemp_60040058_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_coretemp_60040058_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_coretemp_60040058_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_coretemp_60040058_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_coretemp_60040058_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_coretemp_60040058_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_coretemp_60040058_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_coretemp_60040058_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_coretemp_60040058_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_coretemp_60040058_ORD 28
#define DT_N_S_soc_S_coretemp_60040058_ORD_STR_SORTABLE 00028

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_coretemp_60040058_REQUIRES_ORDS \
	22, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_coretemp_60040058_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_coretemp_60040058_EXISTS 1
#define DT_N_ALIAS_die_temp0             DT_N_S_soc_S_coretemp_60040058
#define DT_N_INST_0_espressif_esp32_temp DT_N_S_soc_S_coretemp_60040058
#define DT_N_NODELABEL_coretemp          DT_N_S_soc_S_coretemp_60040058

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_coretemp_60040058_REG_NUM 1
#define DT_N_S_soc_S_coretemp_60040058_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_REG_IDX_0_VAL_ADDRESS 1610874968 /* 0x60040058 */
#define DT_N_S_soc_S_coretemp_60040058_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_coretemp_60040058_RANGES_NUM 0
#define DT_N_S_soc_S_coretemp_60040058_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_coretemp_60040058_IRQ_NUM 0
#define DT_N_S_soc_S_coretemp_60040058_IRQ_LEVEL 0
#define DT_N_S_soc_S_coretemp_60040058_COMPAT_MATCHES_espressif_esp32_temp 1
#define DT_N_S_soc_S_coretemp_60040058_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_coretemp_60040058_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_COMPAT_MODEL_IDX_0 "esp32-temp"
#define DT_N_S_soc_S_coretemp_60040058_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_coretemp_60040058_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_coretemp_60040058_P_range 2
#define DT_N_S_soc_S_coretemp_60040058_P_range_IDX_0_ENUM_IDX 2
#define DT_N_S_soc_S_coretemp_60040058_P_range_IDX_0_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_P_range_IDX_0_ENUM_VAL_2_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_P_range_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_P_friendly_name "coretemp"
#define DT_N_S_soc_S_coretemp_60040058_P_friendly_name_STRING_UNQUOTED coretemp
#define DT_N_S_soc_S_coretemp_60040058_P_friendly_name_STRING_TOKEN coretemp
#define DT_N_S_soc_S_coretemp_60040058_P_friendly_name_STRING_UPPER_TOKEN CORETEMP
#define DT_N_S_soc_S_coretemp_60040058_P_friendly_name_IDX_0 "coretemp"
#define DT_N_S_soc_S_coretemp_60040058_P_friendly_name_IDX_0_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_P_friendly_name_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 0)
#define DT_N_S_soc_S_coretemp_60040058_P_friendly_name_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 0)
#define DT_N_S_soc_S_coretemp_60040058_P_friendly_name_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 0, __VA_ARGS__)
#define DT_N_S_soc_S_coretemp_60040058_P_friendly_name_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_coretemp_60040058, friendly_name, 0, __VA_ARGS__)
#define DT_N_S_soc_S_coretemp_60040058_P_friendly_name_LEN 1
#define DT_N_S_soc_S_coretemp_60040058_P_friendly_name_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_P_status "disabled"
#define DT_N_S_soc_S_coretemp_60040058_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_coretemp_60040058_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_coretemp_60040058_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_coretemp_60040058_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_coretemp_60040058_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_P_status_IDX_0_ENUM_IDX 2
#define DT_N_S_soc_S_coretemp_60040058_P_status_IDX_0_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_coretemp_60040058, status, 0)
#define DT_N_S_soc_S_coretemp_60040058_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_coretemp_60040058, status, 0)
#define DT_N_S_soc_S_coretemp_60040058_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_coretemp_60040058, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_coretemp_60040058_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_coretemp_60040058, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_coretemp_60040058_P_status_LEN 1
#define DT_N_S_soc_S_coretemp_60040058_P_status_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_P_compatible {"espressif,esp32-temp"}
#define DT_N_S_soc_S_coretemp_60040058_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_P_compatible_IDX_0 "espressif,esp32-temp"
#define DT_N_S_soc_S_coretemp_60040058_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-temp
#define DT_N_S_soc_S_coretemp_60040058_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_temp
#define DT_N_S_soc_S_coretemp_60040058_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_TEMP
#define DT_N_S_soc_S_coretemp_60040058_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_coretemp_60040058, compatible, 0)
#define DT_N_S_soc_S_coretemp_60040058_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_coretemp_60040058, compatible, 0)
#define DT_N_S_soc_S_coretemp_60040058_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_coretemp_60040058, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_coretemp_60040058_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_coretemp_60040058, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_coretemp_60040058_P_compatible_LEN 1
#define DT_N_S_soc_S_coretemp_60040058_P_compatible_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_P_reg {1610874968 /* 0x60040058 */, 4 /* 0x4 */}
#define DT_N_S_soc_S_coretemp_60040058_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_P_reg_IDX_0 1610874968
#define DT_N_S_soc_S_coretemp_60040058_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_P_reg_IDX_1 4
#define DT_N_S_soc_S_coretemp_60040058_P_reg_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_coretemp_60040058_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_P_wakeup_source 0
#define DT_N_S_soc_S_coretemp_60040058_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_coretemp_60040058_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_coretemp_60040058_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/counter@6001f000
 *
 * Node identifier: DT_N_S_soc_S_counter_6001f000
 *
 * Binding (compatible = espressif,esp32-timer):
 *   $ZEPHYR_BASE/dts/bindings/counter/espressif,esp32-timer.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_counter_6001f000_PATH "/soc/counter@6001f000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_counter_6001f000_FULL_NAME "counter@6001f000"
#define DT_N_S_soc_S_counter_6001f000_FULL_NAME_UNQUOTED counter@6001f000
#define DT_N_S_soc_S_counter_6001f000_FULL_NAME_TOKEN counter_6001f000
#define DT_N_S_soc_S_counter_6001f000_FULL_NAME_UPPER_TOKEN COUNTER_6001F000

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_counter_6001f000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_counter_6001f000_CHILD_IDX 15

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_counter_6001f000_NODELABEL_NUM 1
#define DT_N_S_soc_S_counter_6001f000_FOREACH_NODELABEL(fn) fn(timer0)
#define DT_N_S_soc_S_counter_6001f000_FOREACH_NODELABEL_VARGS(fn, ...) fn(timer0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_6001f000_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_counter_6001f000_CHILD_NUM 0
#define DT_N_S_soc_S_counter_6001f000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_counter_6001f000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_counter_6001f000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_counter_6001f000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_counter_6001f000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_counter_6001f000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_counter_6001f000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_counter_6001f000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_counter_6001f000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_counter_6001f000_ORD 29
#define DT_N_S_soc_S_counter_6001f000_ORD_STR_SORTABLE 00029

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_counter_6001f000_REQUIRES_ORDS \
	22, /* /soc */ \
	25, /* /soc/interrupt-controller@600c2000 */ \
	26, /* /soc/rtc@60008000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_counter_6001f000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_counter_6001f000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_timer DT_N_S_soc_S_counter_6001f000
#define DT_N_NODELABEL_timer0             DT_N_S_soc_S_counter_6001f000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_counter_6001f000_REG_NUM 1
#define DT_N_S_soc_S_counter_6001f000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_REG_IDX_0_VAL_ADDRESS 1610739712 /* 0x6001f000 */
#define DT_N_S_soc_S_counter_6001f000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_counter_6001f000_RANGES_NUM 0
#define DT_N_S_soc_S_counter_6001f000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_counter_6001f000_IRQ_NUM 1
#define DT_N_S_soc_S_counter_6001f000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_IRQ_IDX_0_VAL_irq 32
#define DT_N_S_soc_S_counter_6001f000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_counter_6001f000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_IRQ_IDX_0_VAL_flags 0
#define DT_N_S_soc_S_counter_6001f000_IRQ_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_counter_6001f000_IRQ_LEVEL 1
#define DT_N_S_soc_S_counter_6001f000_COMPAT_MATCHES_espressif_esp32_timer 1
#define DT_N_S_soc_S_counter_6001f000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_counter_6001f000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_COMPAT_MODEL_IDX_0 "esp32-timer"
#define DT_N_S_soc_S_counter_6001f000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_counter_6001f000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_counter_6001f000_P_group 0
#define DT_N_S_soc_S_counter_6001f000_P_group_IDX_0_ENUM_IDX 0
#define DT_N_S_soc_S_counter_6001f000_P_group_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_group_IDX_0_ENUM_VAL_0_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_group_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_index 0
#define DT_N_S_soc_S_counter_6001f000_P_index_IDX_0_ENUM_IDX 0
#define DT_N_S_soc_S_counter_6001f000_P_index_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_index_IDX_0_ENUM_VAL_0_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_index_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_prescaler 2
#define DT_N_S_soc_S_counter_6001f000_P_prescaler_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_status "okay"
#define DT_N_S_soc_S_counter_6001f000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_counter_6001f000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_counter_6001f000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_counter_6001f000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_counter_6001f000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_soc_S_counter_6001f000_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_6001f000, status, 0)
#define DT_N_S_soc_S_counter_6001f000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_counter_6001f000, status, 0)
#define DT_N_S_soc_S_counter_6001f000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_6001f000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_6001f000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_counter_6001f000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_6001f000_P_status_LEN 1
#define DT_N_S_soc_S_counter_6001f000_P_status_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_compatible {"espressif,esp32-timer"}
#define DT_N_S_soc_S_counter_6001f000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_compatible_IDX_0 "espressif,esp32-timer"
#define DT_N_S_soc_S_counter_6001f000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-timer
#define DT_N_S_soc_S_counter_6001f000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_timer
#define DT_N_S_soc_S_counter_6001f000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_TIMER
#define DT_N_S_soc_S_counter_6001f000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_6001f000, compatible, 0)
#define DT_N_S_soc_S_counter_6001f000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_counter_6001f000, compatible, 0)
#define DT_N_S_soc_S_counter_6001f000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_6001f000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_6001f000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_counter_6001f000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_6001f000_P_compatible_LEN 1
#define DT_N_S_soc_S_counter_6001f000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_reg {1610739712 /* 0x6001f000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_counter_6001f000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_reg_IDX_0 1610739712
#define DT_N_S_soc_S_counter_6001f000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_counter_6001f000_P_reg_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_interrupts {32 /* 0x20 */, 3 /* 0x3 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_counter_6001f000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_interrupts_IDX_0 32
#define DT_N_S_soc_S_counter_6001f000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_counter_6001f000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_interrupts_IDX_2 0
#define DT_N_S_soc_S_counter_6001f000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_counter_6001f000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_counter_6001f000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_counter_6001f000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_6001f000, interrupt_parent, 0)
#define DT_N_S_soc_S_counter_6001f000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_counter_6001f000, interrupt_parent, 0)
#define DT_N_S_soc_S_counter_6001f000_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_6001f000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_6001f000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_counter_6001f000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_6001f000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_counter_6001f000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_60008000
#define DT_N_S_soc_S_counter_6001f000_P_clocks_IDX_0_VAL_offset 6
#define DT_N_S_soc_S_counter_6001f000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_6001f000, clocks, 0)
#define DT_N_S_soc_S_counter_6001f000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_counter_6001f000, clocks, 0)
#define DT_N_S_soc_S_counter_6001f000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_6001f000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_6001f000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_counter_6001f000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_6001f000_P_clocks_LEN 1
#define DT_N_S_soc_S_counter_6001f000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_counter_6001f000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_wakeup_source 0
#define DT_N_S_soc_S_counter_6001f000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_counter_6001f000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_counter_6001f000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/counter@60020000
 *
 * Node identifier: DT_N_S_soc_S_counter_60020000
 *
 * Binding (compatible = espressif,esp32-timer):
 *   $ZEPHYR_BASE/dts/bindings/counter/espressif,esp32-timer.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_counter_60020000_PATH "/soc/counter@60020000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_counter_60020000_FULL_NAME "counter@60020000"
#define DT_N_S_soc_S_counter_60020000_FULL_NAME_UNQUOTED counter@60020000
#define DT_N_S_soc_S_counter_60020000_FULL_NAME_TOKEN counter_60020000
#define DT_N_S_soc_S_counter_60020000_FULL_NAME_UPPER_TOKEN COUNTER_60020000

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_counter_60020000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_counter_60020000_CHILD_IDX 16

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_counter_60020000_NODELABEL_NUM 1
#define DT_N_S_soc_S_counter_60020000_FOREACH_NODELABEL(fn) fn(timer1)
#define DT_N_S_soc_S_counter_60020000_FOREACH_NODELABEL_VARGS(fn, ...) fn(timer1, __VA_ARGS__)
#define DT_N_S_soc_S_counter_60020000_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_counter_60020000_CHILD_NUM 0
#define DT_N_S_soc_S_counter_60020000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_counter_60020000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_counter_60020000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_counter_60020000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_counter_60020000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_counter_60020000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_counter_60020000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_counter_60020000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_counter_60020000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_counter_60020000_ORD 30
#define DT_N_S_soc_S_counter_60020000_ORD_STR_SORTABLE 00030

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_counter_60020000_REQUIRES_ORDS \
	22, /* /soc */ \
	25, /* /soc/interrupt-controller@600c2000 */ \
	26, /* /soc/rtc@60008000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_counter_60020000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_counter_60020000_EXISTS 1
#define DT_N_INST_1_espressif_esp32_timer DT_N_S_soc_S_counter_60020000
#define DT_N_NODELABEL_timer1             DT_N_S_soc_S_counter_60020000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_counter_60020000_REG_NUM 1
#define DT_N_S_soc_S_counter_60020000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_REG_IDX_0_VAL_ADDRESS 1610743808 /* 0x60020000 */
#define DT_N_S_soc_S_counter_60020000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_counter_60020000_RANGES_NUM 0
#define DT_N_S_soc_S_counter_60020000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_counter_60020000_IRQ_NUM 1
#define DT_N_S_soc_S_counter_60020000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_IRQ_IDX_0_VAL_irq 34
#define DT_N_S_soc_S_counter_60020000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_counter_60020000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_IRQ_IDX_0_VAL_flags 0
#define DT_N_S_soc_S_counter_60020000_IRQ_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_counter_60020000_IRQ_LEVEL 1
#define DT_N_S_soc_S_counter_60020000_COMPAT_MATCHES_espressif_esp32_timer 1
#define DT_N_S_soc_S_counter_60020000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_counter_60020000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_COMPAT_MODEL_IDX_0 "esp32-timer"
#define DT_N_S_soc_S_counter_60020000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_counter_60020000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_counter_60020000_P_group 1
#define DT_N_S_soc_S_counter_60020000_P_group_IDX_0_ENUM_IDX 1
#define DT_N_S_soc_S_counter_60020000_P_group_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_group_IDX_0_ENUM_VAL_1_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_group_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_index 0
#define DT_N_S_soc_S_counter_60020000_P_index_IDX_0_ENUM_IDX 0
#define DT_N_S_soc_S_counter_60020000_P_index_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_index_IDX_0_ENUM_VAL_0_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_index_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_prescaler 2
#define DT_N_S_soc_S_counter_60020000_P_prescaler_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_status "okay"
#define DT_N_S_soc_S_counter_60020000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_counter_60020000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_counter_60020000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_counter_60020000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_counter_60020000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_soc_S_counter_60020000_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_60020000, status, 0)
#define DT_N_S_soc_S_counter_60020000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_counter_60020000, status, 0)
#define DT_N_S_soc_S_counter_60020000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_60020000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_60020000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_counter_60020000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_60020000_P_status_LEN 1
#define DT_N_S_soc_S_counter_60020000_P_status_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_compatible {"espressif,esp32-timer"}
#define DT_N_S_soc_S_counter_60020000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_compatible_IDX_0 "espressif,esp32-timer"
#define DT_N_S_soc_S_counter_60020000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-timer
#define DT_N_S_soc_S_counter_60020000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_timer
#define DT_N_S_soc_S_counter_60020000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_TIMER
#define DT_N_S_soc_S_counter_60020000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_60020000, compatible, 0)
#define DT_N_S_soc_S_counter_60020000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_counter_60020000, compatible, 0)
#define DT_N_S_soc_S_counter_60020000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_60020000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_60020000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_counter_60020000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_60020000_P_compatible_LEN 1
#define DT_N_S_soc_S_counter_60020000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_reg {1610743808 /* 0x60020000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_counter_60020000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_reg_IDX_0 1610743808
#define DT_N_S_soc_S_counter_60020000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_counter_60020000_P_reg_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_interrupts {34 /* 0x22 */, 3 /* 0x3 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_counter_60020000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_interrupts_IDX_0 34
#define DT_N_S_soc_S_counter_60020000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_counter_60020000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_interrupts_IDX_2 0
#define DT_N_S_soc_S_counter_60020000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_counter_60020000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_counter_60020000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_counter_60020000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_60020000, interrupt_parent, 0)
#define DT_N_S_soc_S_counter_60020000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_counter_60020000, interrupt_parent, 0)
#define DT_N_S_soc_S_counter_60020000_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_60020000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_60020000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_counter_60020000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_60020000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_counter_60020000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_60008000
#define DT_N_S_soc_S_counter_60020000_P_clocks_IDX_0_VAL_offset 7
#define DT_N_S_soc_S_counter_60020000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_60020000, clocks, 0)
#define DT_N_S_soc_S_counter_60020000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_counter_60020000, clocks, 0)
#define DT_N_S_soc_S_counter_60020000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_60020000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_60020000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_counter_60020000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_60020000_P_clocks_LEN 1
#define DT_N_S_soc_S_counter_60020000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_counter_60020000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_wakeup_source 0
#define DT_N_S_soc_S_counter_60020000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_counter_60020000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_counter_60020000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/gpio@60004000
 *
 * Node identifier: DT_N_S_soc_S_gpio_60004000
 *
 * Binding (compatible = espressif,esp32-gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/espressif,esp32-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_60004000_PATH "/soc/gpio@60004000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_60004000_FULL_NAME "gpio@60004000"
#define DT_N_S_soc_S_gpio_60004000_FULL_NAME_UNQUOTED gpio@60004000
#define DT_N_S_soc_S_gpio_60004000_FULL_NAME_TOKEN gpio_60004000
#define DT_N_S_soc_S_gpio_60004000_FULL_NAME_UPPER_TOKEN GPIO_60004000

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_60004000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_60004000_CHILD_IDX 8

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_gpio_60004000_NODELABEL_NUM 1
#define DT_N_S_soc_S_gpio_60004000_FOREACH_NODELABEL(fn) fn(gpio0)
#define DT_N_S_soc_S_gpio_60004000_FOREACH_NODELABEL_VARGS(fn, ...) fn(gpio0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_60004000_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_gpio_60004000_CHILD_NUM 0
#define DT_N_S_soc_S_gpio_60004000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_gpio_60004000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_60004000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_60004000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_60004000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_gpio_60004000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_60004000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_60004000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_60004000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_60004000_ORD 31
#define DT_N_S_soc_S_gpio_60004000_ORD_STR_SORTABLE 00031

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_60004000_REQUIRES_ORDS \
	22, /* /soc */ \
	25, /* /soc/interrupt-controller@600c2000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_60004000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_60004000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_gpio DT_N_S_soc_S_gpio_60004000
#define DT_N_NODELABEL_gpio0             DT_N_S_soc_S_gpio_60004000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_60004000_REG_NUM 1
#define DT_N_S_soc_S_gpio_60004000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_REG_IDX_0_VAL_ADDRESS 1610629120 /* 0x60004000 */
#define DT_N_S_soc_S_gpio_60004000_REG_IDX_0_VAL_SIZE 2048 /* 0x800 */
#define DT_N_S_soc_S_gpio_60004000_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_60004000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_60004000_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_60004000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_IRQ_IDX_0_VAL_irq 16
#define DT_N_S_soc_S_gpio_60004000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_gpio_60004000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_IRQ_IDX_0_VAL_flags 0
#define DT_N_S_soc_S_gpio_60004000_IRQ_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_gpio_60004000_IRQ_LEVEL 1
#define DT_N_S_soc_S_gpio_60004000_COMPAT_MATCHES_espressif_esp32_gpio 1
#define DT_N_S_soc_S_gpio_60004000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_gpio_60004000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_COMPAT_MODEL_IDX_0 "esp32-gpio"
#define DT_N_S_soc_S_gpio_60004000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_60004000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_60004000_P_reg {1610629120 /* 0x60004000 */, 2048 /* 0x800 */}
#define DT_N_S_soc_S_gpio_60004000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_reg_IDX_0 1610629120
#define DT_N_S_soc_S_gpio_60004000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_reg_IDX_1 2048
#define DT_N_S_soc_S_gpio_60004000_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_60004000_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_ngpios 26
#define DT_N_S_soc_S_gpio_60004000_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_status "okay"
#define DT_N_S_soc_S_gpio_60004000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_gpio_60004000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_60004000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_60004000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_gpio_60004000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_60004000_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_60004000, status, 0)
#define DT_N_S_soc_S_gpio_60004000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_60004000, status, 0)
#define DT_N_S_soc_S_gpio_60004000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_60004000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_60004000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_60004000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_60004000_P_status_LEN 1
#define DT_N_S_soc_S_gpio_60004000_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_compatible {"espressif,esp32-gpio"}
#define DT_N_S_soc_S_gpio_60004000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_compatible_IDX_0 "espressif,esp32-gpio"
#define DT_N_S_soc_S_gpio_60004000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-gpio
#define DT_N_S_soc_S_gpio_60004000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_gpio
#define DT_N_S_soc_S_gpio_60004000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_GPIO
#define DT_N_S_soc_S_gpio_60004000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_60004000, compatible, 0)
#define DT_N_S_soc_S_gpio_60004000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_60004000, compatible, 0)
#define DT_N_S_soc_S_gpio_60004000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_60004000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_60004000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_60004000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_60004000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_60004000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_interrupts {16 /* 0x10 */, 3 /* 0x3 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_gpio_60004000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_interrupts_IDX_0 16
#define DT_N_S_soc_S_gpio_60004000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_gpio_60004000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_interrupts_IDX_2 0
#define DT_N_S_soc_S_gpio_60004000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_gpio_60004000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_gpio_60004000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_gpio_60004000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_60004000, interrupt_parent, 0)
#define DT_N_S_soc_S_gpio_60004000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_60004000, interrupt_parent, 0)
#define DT_N_S_soc_S_gpio_60004000_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_60004000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_60004000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_60004000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_60004000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_gpio_60004000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_gpio_60004000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_60004000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_gpio_60004000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_gpio_60004000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/i2c@60013000
 *
 * Node identifier: DT_N_S_soc_S_i2c_60013000
 *
 * Binding (compatible = espressif,esp32-i2c):
 *   $ZEPHYR_BASE/dts/bindings/i2c/espressif,esp32-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_i2c_60013000_PATH "/soc/i2c@60013000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_i2c_60013000_FULL_NAME "i2c@60013000"
#define DT_N_S_soc_S_i2c_60013000_FULL_NAME_UNQUOTED i2c@60013000
#define DT_N_S_soc_S_i2c_60013000_FULL_NAME_TOKEN i2c_60013000
#define DT_N_S_soc_S_i2c_60013000_FULL_NAME_UPPER_TOKEN I2C_60013000

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_i2c_60013000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_i2c_60013000_CHILD_IDX 9

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_i2c_60013000_NODELABEL_NUM 2
#define DT_N_S_soc_S_i2c_60013000_FOREACH_NODELABEL(fn) fn(i2c0) fn(xiao_i2c)
#define DT_N_S_soc_S_i2c_60013000_FOREACH_NODELABEL_VARGS(fn, ...) fn(i2c0, __VA_ARGS__) fn(xiao_i2c, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_60013000_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_i2c_60013000_CHILD_NUM 0
#define DT_N_S_soc_S_i2c_60013000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_i2c_60013000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_i2c_60013000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_i2c_60013000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2c_60013000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_i2c_60013000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_i2c_60013000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_i2c_60013000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2c_60013000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_i2c_60013000_ORD 32
#define DT_N_S_soc_S_i2c_60013000_ORD_STR_SORTABLE 00032

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_i2c_60013000_REQUIRES_ORDS \
	12, /* /pin-controller/i2c0_default */ \
	22, /* /soc */ \
	25, /* /soc/interrupt-controller@600c2000 */ \
	26, /* /soc/rtc@60008000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_i2c_60013000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_i2c_60013000_EXISTS 1
#define DT_N_ALIAS_i2c_0                DT_N_S_soc_S_i2c_60013000
#define DT_N_INST_0_espressif_esp32_i2c DT_N_S_soc_S_i2c_60013000
#define DT_N_NODELABEL_i2c0             DT_N_S_soc_S_i2c_60013000
#define DT_N_NODELABEL_xiao_i2c         DT_N_S_soc_S_i2c_60013000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_i2c_60013000_REG_NUM 1
#define DT_N_S_soc_S_i2c_60013000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_REG_IDX_0_VAL_ADDRESS 1610690560 /* 0x60013000 */
#define DT_N_S_soc_S_i2c_60013000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_i2c_60013000_RANGES_NUM 0
#define DT_N_S_soc_S_i2c_60013000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_i2c_60013000_IRQ_NUM 1
#define DT_N_S_soc_S_i2c_60013000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_IRQ_IDX_0_VAL_irq 29
#define DT_N_S_soc_S_i2c_60013000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_i2c_60013000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_IRQ_IDX_0_VAL_flags 0
#define DT_N_S_soc_S_i2c_60013000_IRQ_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_i2c_60013000_IRQ_LEVEL 1
#define DT_N_S_soc_S_i2c_60013000_COMPAT_MATCHES_espressif_esp32_i2c 1
#define DT_N_S_soc_S_i2c_60013000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_i2c_60013000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_COMPAT_MODEL_IDX_0 "esp32-i2c"
#define DT_N_S_soc_S_i2c_60013000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_i2c_60013000_PINCTRL_NUM 1
#define DT_N_S_soc_S_i2c_60013000_PINCTRL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_PINCTRL_IDX_0_TOKEN default
#define DT_N_S_soc_S_i2c_60013000_PINCTRL_IDX_0_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_i2c_60013000_PINCTRL_NAME_default_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_PINCTRL_NAME_default_IDX 0
#define DT_N_S_soc_S_i2c_60013000_PINCTRL_NAME_default_IDX_0_PH DT_N_S_pin_controller_S_i2c0_default

/* Generic property macros: */
#define DT_N_S_soc_S_i2c_60013000_P_reg {1610690560 /* 0x60013000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_i2c_60013000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_reg_IDX_0 1610690560
#define DT_N_S_soc_S_i2c_60013000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_i2c_60013000_P_reg_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_0_IDX_0 DT_N_S_pin_controller_S_i2c0_default
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_0_IDX_0_PH DT_N_S_pin_controller_S_i2c0_default
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_0_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_0_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_60013000, pinctrl_0, 0)
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_60013000, pinctrl_0, 0)
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_0_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_60013000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_60013000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_0_LEN 1
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_names {"default"}
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_names_IDX_0 "default"
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_names_IDX_0_STRING_UNQUOTED default
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_names_IDX_0_STRING_TOKEN default
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_names_IDX_0_STRING_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_60013000, pinctrl_names, 0)
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_60013000, pinctrl_names, 0)
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_60013000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_60013000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_names_LEN 1
#define DT_N_S_soc_S_i2c_60013000_P_pinctrl_names_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_tx_lsb 0
#define DT_N_S_soc_S_i2c_60013000_P_tx_lsb_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_rx_lsb 0
#define DT_N_S_soc_S_i2c_60013000_P_rx_lsb_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_clock_frequency 100000
#define DT_N_S_soc_S_i2c_60013000_P_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_sq_size 4
#define DT_N_S_soc_S_i2c_60013000_P_sq_size_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_cq_size 4
#define DT_N_S_soc_S_i2c_60013000_P_cq_size_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_status "okay"
#define DT_N_S_soc_S_i2c_60013000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_i2c_60013000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_i2c_60013000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_i2c_60013000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_i2c_60013000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_soc_S_i2c_60013000_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_60013000, status, 0)
#define DT_N_S_soc_S_i2c_60013000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_60013000, status, 0)
#define DT_N_S_soc_S_i2c_60013000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_60013000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_60013000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_60013000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_60013000_P_status_LEN 1
#define DT_N_S_soc_S_i2c_60013000_P_status_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_compatible {"espressif,esp32-i2c"}
#define DT_N_S_soc_S_i2c_60013000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_compatible_IDX_0 "espressif,esp32-i2c"
#define DT_N_S_soc_S_i2c_60013000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-i2c
#define DT_N_S_soc_S_i2c_60013000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_i2c
#define DT_N_S_soc_S_i2c_60013000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_I2C
#define DT_N_S_soc_S_i2c_60013000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_60013000, compatible, 0)
#define DT_N_S_soc_S_i2c_60013000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_60013000, compatible, 0)
#define DT_N_S_soc_S_i2c_60013000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_60013000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_60013000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_60013000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_60013000_P_compatible_LEN 1
#define DT_N_S_soc_S_i2c_60013000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_interrupts {29 /* 0x1d */, 3 /* 0x3 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_i2c_60013000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_interrupts_IDX_0 29
#define DT_N_S_soc_S_i2c_60013000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_i2c_60013000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_interrupts_IDX_2 0
#define DT_N_S_soc_S_i2c_60013000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_i2c_60013000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_i2c_60013000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_i2c_60013000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_60013000, interrupt_parent, 0)
#define DT_N_S_soc_S_i2c_60013000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_60013000, interrupt_parent, 0)
#define DT_N_S_soc_S_i2c_60013000_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_60013000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_60013000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_60013000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_60013000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_i2c_60013000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_60008000
#define DT_N_S_soc_S_i2c_60013000_P_clocks_IDX_0_VAL_offset 4
#define DT_N_S_soc_S_i2c_60013000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_60013000, clocks, 0)
#define DT_N_S_soc_S_i2c_60013000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_60013000, clocks, 0)
#define DT_N_S_soc_S_i2c_60013000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_60013000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_60013000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_60013000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_60013000_P_clocks_LEN 1
#define DT_N_S_soc_S_i2c_60013000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_i2c_60013000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_wakeup_source 0
#define DT_N_S_soc_S_i2c_60013000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_i2c_60013000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_i2c_60013000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/dma@6003f000
 *
 * Node identifier: DT_N_S_soc_S_dma_6003f000
 *
 * Binding (compatible = espressif,esp32-gdma):
 *   $ZEPHYR_BASE/dts/bindings/dma/espressif,esp32-gdma.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_dma_6003f000_PATH "/soc/dma@6003f000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_dma_6003f000_FULL_NAME "dma@6003f000"
#define DT_N_S_soc_S_dma_6003f000_FULL_NAME_UNQUOTED dma@6003f000
#define DT_N_S_soc_S_dma_6003f000_FULL_NAME_TOKEN dma_6003f000
#define DT_N_S_soc_S_dma_6003f000_FULL_NAME_UPPER_TOKEN DMA_6003F000

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_dma_6003f000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_dma_6003f000_CHILD_IDX 25

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_dma_6003f000_NODELABEL_NUM 1
#define DT_N_S_soc_S_dma_6003f000_FOREACH_NODELABEL(fn) fn(dma)
#define DT_N_S_soc_S_dma_6003f000_FOREACH_NODELABEL_VARGS(fn, ...) fn(dma, __VA_ARGS__)
#define DT_N_S_soc_S_dma_6003f000_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_dma_6003f000_CHILD_NUM 0
#define DT_N_S_soc_S_dma_6003f000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_dma_6003f000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_dma_6003f000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_dma_6003f000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_dma_6003f000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_dma_6003f000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_dma_6003f000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_dma_6003f000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_dma_6003f000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_dma_6003f000_ORD 33
#define DT_N_S_soc_S_dma_6003f000_ORD_STR_SORTABLE 00033

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_dma_6003f000_REQUIRES_ORDS \
	22, /* /soc */ \
	25, /* /soc/interrupt-controller@600c2000 */ \
	26, /* /soc/rtc@60008000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_dma_6003f000_SUPPORTS_ORDS \
	34, /* /soc/i2s@6002d000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_dma_6003f000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_gdma DT_N_S_soc_S_dma_6003f000
#define DT_N_NODELABEL_dma               DT_N_S_soc_S_dma_6003f000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_dma_6003f000_REG_NUM 1
#define DT_N_S_soc_S_dma_6003f000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_REG_IDX_0_VAL_ADDRESS 1610870784 /* 0x6003f000 */
#define DT_N_S_soc_S_dma_6003f000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_dma_6003f000_RANGES_NUM 0
#define DT_N_S_soc_S_dma_6003f000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_dma_6003f000_IRQ_NUM 3
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_0_VAL_irq 44
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_0_VAL_flags 0
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_1_VAL_irq 45
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_1_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_1_VAL_priority 3
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_1_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_1_VAL_flags 0
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_1_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_1_CONTROLLER DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_2_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_2_VAL_irq 46
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_2_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_2_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_2_VAL_priority 3
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_2_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_2_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_2_VAL_flags 0
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_2_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_IRQ_IDX_2_CONTROLLER DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_dma_6003f000_IRQ_LEVEL 1
#define DT_N_S_soc_S_dma_6003f000_COMPAT_MATCHES_espressif_esp32_gdma 1
#define DT_N_S_soc_S_dma_6003f000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_dma_6003f000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_COMPAT_MODEL_IDX_0 "esp32-gdma"
#define DT_N_S_soc_S_dma_6003f000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_dma_6003f000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_dma_6003f000_P_dma_channels 6
#define DT_N_S_soc_S_dma_6003f000_P_dma_channels_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_dma_buf_addr_alignment 4
#define DT_N_S_soc_S_dma_6003f000_P_dma_buf_addr_alignment_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_status "disabled"
#define DT_N_S_soc_S_dma_6003f000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_dma_6003f000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_dma_6003f000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_dma_6003f000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_dma_6003f000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_status_IDX_0_ENUM_IDX 2
#define DT_N_S_soc_S_dma_6003f000_P_status_IDX_0_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_dma_6003f000, status, 0)
#define DT_N_S_soc_S_dma_6003f000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_dma_6003f000, status, 0)
#define DT_N_S_soc_S_dma_6003f000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_dma_6003f000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_dma_6003f000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_dma_6003f000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_dma_6003f000_P_status_LEN 1
#define DT_N_S_soc_S_dma_6003f000_P_status_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_compatible {"espressif,esp32-gdma"}
#define DT_N_S_soc_S_dma_6003f000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_compatible_IDX_0 "espressif,esp32-gdma"
#define DT_N_S_soc_S_dma_6003f000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-gdma
#define DT_N_S_soc_S_dma_6003f000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_gdma
#define DT_N_S_soc_S_dma_6003f000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_GDMA
#define DT_N_S_soc_S_dma_6003f000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_dma_6003f000, compatible, 0)
#define DT_N_S_soc_S_dma_6003f000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_dma_6003f000, compatible, 0)
#define DT_N_S_soc_S_dma_6003f000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_dma_6003f000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_dma_6003f000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_dma_6003f000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_dma_6003f000_P_compatible_LEN 1
#define DT_N_S_soc_S_dma_6003f000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_reg {1610870784 /* 0x6003f000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_dma_6003f000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_reg_IDX_0 1610870784
#define DT_N_S_soc_S_dma_6003f000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_dma_6003f000_P_reg_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_interrupts {44 /* 0x2c */, 3 /* 0x3 */, 0 /* 0x0 */, 45 /* 0x2d */, 3 /* 0x3 */, 0 /* 0x0 */, 46 /* 0x2e */, 3 /* 0x3 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_IDX_0 44
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_IDX_2 0
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_IDX_3_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_IDX_3 45
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_IDX_4_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_IDX_4 3
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_IDX_5_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_IDX_5 0
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_IDX_6_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_IDX_6 46
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_IDX_7_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_IDX_7 3
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_IDX_8_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_IDX_8 0
#define DT_N_S_soc_S_dma_6003f000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_dma_6003f000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_dma_6003f000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_dma_6003f000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_dma_6003f000, interrupt_parent, 0)
#define DT_N_S_soc_S_dma_6003f000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_dma_6003f000, interrupt_parent, 0)
#define DT_N_S_soc_S_dma_6003f000_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_dma_6003f000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_dma_6003f000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_dma_6003f000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_dma_6003f000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_dma_6003f000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_60008000
#define DT_N_S_soc_S_dma_6003f000_P_clocks_IDX_0_VAL_offset 24
#define DT_N_S_soc_S_dma_6003f000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_dma_6003f000, clocks, 0)
#define DT_N_S_soc_S_dma_6003f000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_dma_6003f000, clocks, 0)
#define DT_N_S_soc_S_dma_6003f000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_dma_6003f000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_dma_6003f000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_dma_6003f000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_dma_6003f000_P_clocks_LEN 1
#define DT_N_S_soc_S_dma_6003f000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_dma_6003f000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_wakeup_source 0
#define DT_N_S_soc_S_dma_6003f000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_dma_6003f000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_dma_6003f000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/i2s@6002d000
 *
 * Node identifier: DT_N_S_soc_S_i2s_6002d000
 *
 * Binding (compatible = espressif,esp32-i2s):
 *   $ZEPHYR_BASE/dts/bindings/i2s/espressif,esp32-i2s.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_i2s_6002d000_PATH "/soc/i2s@6002d000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_i2s_6002d000_FULL_NAME "i2s@6002d000"
#define DT_N_S_soc_S_i2s_6002d000_FULL_NAME_UNQUOTED i2s@6002d000
#define DT_N_S_soc_S_i2s_6002d000_FULL_NAME_TOKEN i2s_6002d000
#define DT_N_S_soc_S_i2s_6002d000_FULL_NAME_UPPER_TOKEN I2S_6002D000

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_i2s_6002d000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_i2s_6002d000_CHILD_IDX 10

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_i2s_6002d000_NODELABEL_NUM 1
#define DT_N_S_soc_S_i2s_6002d000_FOREACH_NODELABEL(fn) fn(i2s)
#define DT_N_S_soc_S_i2s_6002d000_FOREACH_NODELABEL_VARGS(fn, ...) fn(i2s, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_6002d000_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_i2s_6002d000_CHILD_NUM 0
#define DT_N_S_soc_S_i2s_6002d000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_i2s_6002d000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_i2s_6002d000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_i2s_6002d000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2s_6002d000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_i2s_6002d000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_i2s_6002d000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_i2s_6002d000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2s_6002d000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_i2s_6002d000_ORD 34
#define DT_N_S_soc_S_i2s_6002d000_ORD_STR_SORTABLE 00034

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_i2s_6002d000_REQUIRES_ORDS \
	22, /* /soc */ \
	25, /* /soc/interrupt-controller@600c2000 */ \
	26, /* /soc/rtc@60008000 */ \
	33, /* /soc/dma@6003f000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_i2s_6002d000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_i2s_6002d000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_i2s DT_N_S_soc_S_i2s_6002d000
#define DT_N_NODELABEL_i2s              DT_N_S_soc_S_i2s_6002d000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_i2s_6002d000_REG_NUM 1
#define DT_N_S_soc_S_i2s_6002d000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_REG_IDX_0_VAL_ADDRESS 1610797056 /* 0x6002d000 */
#define DT_N_S_soc_S_i2s_6002d000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_i2s_6002d000_RANGES_NUM 0
#define DT_N_S_soc_S_i2s_6002d000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_i2s_6002d000_IRQ_NUM 1
#define DT_N_S_soc_S_i2s_6002d000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_IRQ_IDX_0_VAL_irq 20
#define DT_N_S_soc_S_i2s_6002d000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_i2s_6002d000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_IRQ_IDX_0_VAL_flags 0
#define DT_N_S_soc_S_i2s_6002d000_IRQ_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_i2s_6002d000_IRQ_LEVEL 1
#define DT_N_S_soc_S_i2s_6002d000_COMPAT_MATCHES_espressif_esp32_i2s 1
#define DT_N_S_soc_S_i2s_6002d000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_i2s_6002d000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_COMPAT_MODEL_IDX_0 "esp32-i2s"
#define DT_N_S_soc_S_i2s_6002d000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_i2s_6002d000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_i2s_6002d000_P_reg {1610797056 /* 0x6002d000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_i2s_6002d000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_reg_IDX_0 1610797056
#define DT_N_S_soc_S_i2s_6002d000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_i2s_6002d000_P_reg_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_60008000
#define DT_N_S_soc_S_i2s_6002d000_P_clocks_IDX_0_VAL_offset 5
#define DT_N_S_soc_S_i2s_6002d000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2s_6002d000, clocks, 0)
#define DT_N_S_soc_S_i2s_6002d000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2s_6002d000, clocks, 0)
#define DT_N_S_soc_S_i2s_6002d000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2s_6002d000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_6002d000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2s_6002d000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_6002d000_P_clocks_LEN 1
#define DT_N_S_soc_S_i2s_6002d000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_interrupts {20 /* 0x14 */, 3 /* 0x3 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_i2s_6002d000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_interrupts_IDX_0 20
#define DT_N_S_soc_S_i2s_6002d000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_i2s_6002d000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_interrupts_IDX_2 0
#define DT_N_S_soc_S_i2s_6002d000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_i2s_6002d000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_i2s_6002d000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_i2s_6002d000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2s_6002d000, interrupt_parent, 0)
#define DT_N_S_soc_S_i2s_6002d000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2s_6002d000, interrupt_parent, 0)
#define DT_N_S_soc_S_i2s_6002d000_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2s_6002d000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_6002d000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2s_6002d000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_6002d000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_i2s_6002d000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_dmas_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_dmas_IDX_0_PH DT_N_S_soc_S_dma_6003f000
#define DT_N_S_soc_S_i2s_6002d000_P_dmas_IDX_0_VAL_channel 2
#define DT_N_S_soc_S_i2s_6002d000_P_dmas_IDX_0_VAL_channel_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_dmas_IDX_0_NAME "rx"
#define DT_N_S_soc_S_i2s_6002d000_P_dmas_NAME_rx_PH DT_N_S_soc_S_dma_6003f000
#define DT_N_S_soc_S_i2s_6002d000_P_dmas_NAME_rx_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_dmas_NAME_rx_VAL_channel DT_N_S_soc_S_i2s_6002d000_P_dmas_IDX_0_VAL_channel
#define DT_N_S_soc_S_i2s_6002d000_P_dmas_NAME_rx_VAL_channel_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_dmas_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_dmas_IDX_1_PH DT_N_S_soc_S_dma_6003f000
#define DT_N_S_soc_S_i2s_6002d000_P_dmas_IDX_1_VAL_channel 3
#define DT_N_S_soc_S_i2s_6002d000_P_dmas_IDX_1_VAL_channel_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_dmas_IDX_1_NAME "tx"
#define DT_N_S_soc_S_i2s_6002d000_P_dmas_NAME_tx_PH DT_N_S_soc_S_dma_6003f000
#define DT_N_S_soc_S_i2s_6002d000_P_dmas_NAME_tx_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_dmas_NAME_tx_VAL_channel DT_N_S_soc_S_i2s_6002d000_P_dmas_IDX_1_VAL_channel
#define DT_N_S_soc_S_i2s_6002d000_P_dmas_NAME_tx_VAL_channel_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_dmas_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2s_6002d000, dmas, 0) \
	fn(DT_N_S_soc_S_i2s_6002d000, dmas, 1)
#define DT_N_S_soc_S_i2s_6002d000_P_dmas_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2s_6002d000, dmas, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_6002d000, dmas, 1)
#define DT_N_S_soc_S_i2s_6002d000_P_dmas_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2s_6002d000, dmas, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_6002d000, dmas, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_6002d000_P_dmas_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2s_6002d000, dmas, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_6002d000, dmas, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_6002d000_P_dmas_LEN 2
#define DT_N_S_soc_S_i2s_6002d000_P_dmas_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_dma_names {"rx", "tx"}
#define DT_N_S_soc_S_i2s_6002d000_P_dma_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_dma_names_IDX_0 "rx"
#define DT_N_S_soc_S_i2s_6002d000_P_dma_names_IDX_0_STRING_UNQUOTED rx
#define DT_N_S_soc_S_i2s_6002d000_P_dma_names_IDX_0_STRING_TOKEN rx
#define DT_N_S_soc_S_i2s_6002d000_P_dma_names_IDX_0_STRING_UPPER_TOKEN RX
#define DT_N_S_soc_S_i2s_6002d000_P_dma_names_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_dma_names_IDX_1 "tx"
#define DT_N_S_soc_S_i2s_6002d000_P_dma_names_IDX_1_STRING_UNQUOTED tx
#define DT_N_S_soc_S_i2s_6002d000_P_dma_names_IDX_1_STRING_TOKEN tx
#define DT_N_S_soc_S_i2s_6002d000_P_dma_names_IDX_1_STRING_UPPER_TOKEN TX
#define DT_N_S_soc_S_i2s_6002d000_P_dma_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2s_6002d000, dma_names, 0) \
	fn(DT_N_S_soc_S_i2s_6002d000, dma_names, 1)
#define DT_N_S_soc_S_i2s_6002d000_P_dma_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2s_6002d000, dma_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_6002d000, dma_names, 1)
#define DT_N_S_soc_S_i2s_6002d000_P_dma_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2s_6002d000, dma_names, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_6002d000, dma_names, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_6002d000_P_dma_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2s_6002d000, dma_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_6002d000, dma_names, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_6002d000_P_dma_names_LEN 2
#define DT_N_S_soc_S_i2s_6002d000_P_dma_names_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_unit 0
#define DT_N_S_soc_S_i2s_6002d000_P_unit_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_status "disabled"
#define DT_N_S_soc_S_i2s_6002d000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_i2s_6002d000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_i2s_6002d000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_i2s_6002d000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_i2s_6002d000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_status_IDX_0_ENUM_IDX 2
#define DT_N_S_soc_S_i2s_6002d000_P_status_IDX_0_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2s_6002d000, status, 0)
#define DT_N_S_soc_S_i2s_6002d000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2s_6002d000, status, 0)
#define DT_N_S_soc_S_i2s_6002d000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2s_6002d000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_6002d000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2s_6002d000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_6002d000_P_status_LEN 1
#define DT_N_S_soc_S_i2s_6002d000_P_status_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_compatible {"espressif,esp32-i2s"}
#define DT_N_S_soc_S_i2s_6002d000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_compatible_IDX_0 "espressif,esp32-i2s"
#define DT_N_S_soc_S_i2s_6002d000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-i2s
#define DT_N_S_soc_S_i2s_6002d000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_i2s
#define DT_N_S_soc_S_i2s_6002d000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_I2S
#define DT_N_S_soc_S_i2s_6002d000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2s_6002d000, compatible, 0)
#define DT_N_S_soc_S_i2s_6002d000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2s_6002d000, compatible, 0)
#define DT_N_S_soc_S_i2s_6002d000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2s_6002d000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_6002d000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2s_6002d000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_6002d000_P_compatible_LEN 1
#define DT_N_S_soc_S_i2s_6002d000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_i2s_6002d000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_wakeup_source 0
#define DT_N_S_soc_S_i2s_6002d000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_i2s_6002d000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_i2s_6002d000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/ledc@60019000
 *
 * Node identifier: DT_N_S_soc_S_ledc_60019000
 *
 * Binding (compatible = espressif,esp32-ledc):
 *   $ZEPHYR_BASE/dts/bindings/pwm/espressif,esp32-ledc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_ledc_60019000_PATH "/soc/ledc@60019000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_ledc_60019000_FULL_NAME "ledc@60019000"
#define DT_N_S_soc_S_ledc_60019000_FULL_NAME_UNQUOTED ledc@60019000
#define DT_N_S_soc_S_ledc_60019000_FULL_NAME_TOKEN ledc_60019000
#define DT_N_S_soc_S_ledc_60019000_FULL_NAME_UPPER_TOKEN LEDC_60019000

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_ledc_60019000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_ledc_60019000_CHILD_IDX 13

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_ledc_60019000_NODELABEL_NUM 1
#define DT_N_S_soc_S_ledc_60019000_FOREACH_NODELABEL(fn) fn(ledc0)
#define DT_N_S_soc_S_ledc_60019000_FOREACH_NODELABEL_VARGS(fn, ...) fn(ledc0, __VA_ARGS__)
#define DT_N_S_soc_S_ledc_60019000_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_ledc_60019000_CHILD_NUM 0
#define DT_N_S_soc_S_ledc_60019000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_ledc_60019000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_ledc_60019000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_ledc_60019000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_ledc_60019000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_ledc_60019000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_ledc_60019000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_ledc_60019000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_ledc_60019000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_ledc_60019000_ORD 35
#define DT_N_S_soc_S_ledc_60019000_ORD_STR_SORTABLE 00035

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_ledc_60019000_REQUIRES_ORDS \
	22, /* /soc */ \
	26, /* /soc/rtc@60008000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_ledc_60019000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_ledc_60019000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_ledc DT_N_S_soc_S_ledc_60019000
#define DT_N_NODELABEL_ledc0             DT_N_S_soc_S_ledc_60019000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_ledc_60019000_REG_NUM 1
#define DT_N_S_soc_S_ledc_60019000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ledc_60019000_REG_IDX_0_VAL_ADDRESS 1610715136 /* 0x60019000 */
#define DT_N_S_soc_S_ledc_60019000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_ledc_60019000_RANGES_NUM 0
#define DT_N_S_soc_S_ledc_60019000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_ledc_60019000_IRQ_NUM 0
#define DT_N_S_soc_S_ledc_60019000_IRQ_LEVEL 0
#define DT_N_S_soc_S_ledc_60019000_COMPAT_MATCHES_espressif_esp32_ledc 1
#define DT_N_S_soc_S_ledc_60019000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ledc_60019000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_ledc_60019000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ledc_60019000_COMPAT_MODEL_IDX_0 "esp32-ledc"
#define DT_N_S_soc_S_ledc_60019000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_ledc_60019000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_ledc_60019000_P_status "disabled"
#define DT_N_S_soc_S_ledc_60019000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_ledc_60019000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_ledc_60019000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_ledc_60019000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_ledc_60019000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ledc_60019000_P_status_IDX_0_ENUM_IDX 2
#define DT_N_S_soc_S_ledc_60019000_P_status_IDX_0_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_ledc_60019000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ledc_60019000, status, 0)
#define DT_N_S_soc_S_ledc_60019000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_ledc_60019000, status, 0)
#define DT_N_S_soc_S_ledc_60019000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ledc_60019000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ledc_60019000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_ledc_60019000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ledc_60019000_P_status_LEN 1
#define DT_N_S_soc_S_ledc_60019000_P_status_EXISTS 1
#define DT_N_S_soc_S_ledc_60019000_P_compatible {"espressif,esp32-ledc"}
#define DT_N_S_soc_S_ledc_60019000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ledc_60019000_P_compatible_IDX_0 "espressif,esp32-ledc"
#define DT_N_S_soc_S_ledc_60019000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-ledc
#define DT_N_S_soc_S_ledc_60019000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_ledc
#define DT_N_S_soc_S_ledc_60019000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_LEDC
#define DT_N_S_soc_S_ledc_60019000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ledc_60019000, compatible, 0)
#define DT_N_S_soc_S_ledc_60019000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_ledc_60019000, compatible, 0)
#define DT_N_S_soc_S_ledc_60019000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ledc_60019000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ledc_60019000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_ledc_60019000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ledc_60019000_P_compatible_LEN 1
#define DT_N_S_soc_S_ledc_60019000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_ledc_60019000_P_reg {1610715136 /* 0x60019000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_ledc_60019000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ledc_60019000_P_reg_IDX_0 1610715136
#define DT_N_S_soc_S_ledc_60019000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ledc_60019000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_ledc_60019000_P_reg_EXISTS 1
#define DT_N_S_soc_S_ledc_60019000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ledc_60019000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_60008000
#define DT_N_S_soc_S_ledc_60019000_P_clocks_IDX_0_VAL_offset 0
#define DT_N_S_soc_S_ledc_60019000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_ledc_60019000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ledc_60019000, clocks, 0)
#define DT_N_S_soc_S_ledc_60019000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_ledc_60019000, clocks, 0)
#define DT_N_S_soc_S_ledc_60019000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ledc_60019000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ledc_60019000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_ledc_60019000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ledc_60019000_P_clocks_LEN 1
#define DT_N_S_soc_S_ledc_60019000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_ledc_60019000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_ledc_60019000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_ledc_60019000_P_wakeup_source 0
#define DT_N_S_soc_S_ledc_60019000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_ledc_60019000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_ledc_60019000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/memory@3fc80000
 *
 * Node identifier: DT_N_S_soc_S_memory_3fc80000
 *
 * Binding (compatible = zephyr,memory-region):
 *   $ZEPHYR_BASE/dts/bindings/base/zephyr,memory-region.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_memory_3fc80000_PATH "/soc/memory@3fc80000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_memory_3fc80000_FULL_NAME "memory@3fc80000"
#define DT_N_S_soc_S_memory_3fc80000_FULL_NAME_UNQUOTED memory@3fc80000
#define DT_N_S_soc_S_memory_3fc80000_FULL_NAME_TOKEN memory_3fc80000
#define DT_N_S_soc_S_memory_3fc80000_FULL_NAME_UPPER_TOKEN MEMORY_3FC80000

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_memory_3fc80000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_memory_3fc80000_CHILD_IDX 1

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_memory_3fc80000_NODELABEL_NUM 1
#define DT_N_S_soc_S_memory_3fc80000_FOREACH_NODELABEL(fn) fn(sram1)
#define DT_N_S_soc_S_memory_3fc80000_FOREACH_NODELABEL_VARGS(fn, ...) fn(sram1, __VA_ARGS__)
#define DT_N_S_soc_S_memory_3fc80000_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_memory_3fc80000_CHILD_NUM 0
#define DT_N_S_soc_S_memory_3fc80000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_memory_3fc80000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_memory_3fc80000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_memory_3fc80000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_memory_3fc80000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_memory_3fc80000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_memory_3fc80000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_memory_3fc80000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_memory_3fc80000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_memory_3fc80000_ORD 36
#define DT_N_S_soc_S_memory_3fc80000_ORD_STR_SORTABLE 00036

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_memory_3fc80000_REQUIRES_ORDS \
	22, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_memory_3fc80000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_memory_3fc80000_EXISTS 1
#define DT_N_INST_1_zephyr_memory_region DT_N_S_soc_S_memory_3fc80000
#define DT_N_INST_1_mmio_sram            DT_N_S_soc_S_memory_3fc80000
#define DT_N_NODELABEL_sram1             DT_N_S_soc_S_memory_3fc80000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_memory_3fc80000_REG_NUM 1
#define DT_N_S_soc_S_memory_3fc80000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_3fc80000_REG_IDX_0_VAL_ADDRESS 1070071808 /* 0x3fc80000 */
#define DT_N_S_soc_S_memory_3fc80000_REG_IDX_0_VAL_SIZE 393216 /* 0x60000 */
#define DT_N_S_soc_S_memory_3fc80000_RANGES_NUM 0
#define DT_N_S_soc_S_memory_3fc80000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_memory_3fc80000_IRQ_NUM 0
#define DT_N_S_soc_S_memory_3fc80000_IRQ_LEVEL 0
#define DT_N_S_soc_S_memory_3fc80000_COMPAT_MATCHES_zephyr_memory_region 1
#define DT_N_S_soc_S_memory_3fc80000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_3fc80000_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_soc_S_memory_3fc80000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_3fc80000_COMPAT_MODEL_IDX_0 "memory-region"
#define DT_N_S_soc_S_memory_3fc80000_COMPAT_MATCHES_mmio_sram 1
#define DT_N_S_soc_S_memory_3fc80000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_memory_3fc80000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_memory_3fc80000_P_zephyr_memory_region "SRAM1"
#define DT_N_S_soc_S_memory_3fc80000_P_zephyr_memory_region_STRING_UNQUOTED SRAM1
#define DT_N_S_soc_S_memory_3fc80000_P_zephyr_memory_region_STRING_TOKEN SRAM1
#define DT_N_S_soc_S_memory_3fc80000_P_zephyr_memory_region_STRING_UPPER_TOKEN SRAM1
#define DT_N_S_soc_S_memory_3fc80000_P_zephyr_memory_region_IDX_0 "SRAM1"
#define DT_N_S_soc_S_memory_3fc80000_P_zephyr_memory_region_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_3fc80000_P_zephyr_memory_region_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_memory_3fc80000, zephyr_memory_region, 0)
#define DT_N_S_soc_S_memory_3fc80000_P_zephyr_memory_region_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_memory_3fc80000, zephyr_memory_region, 0)
#define DT_N_S_soc_S_memory_3fc80000_P_zephyr_memory_region_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_3fc80000, zephyr_memory_region, 0, __VA_ARGS__)
#define DT_N_S_soc_S_memory_3fc80000_P_zephyr_memory_region_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_memory_3fc80000, zephyr_memory_region, 0, __VA_ARGS__)
#define DT_N_S_soc_S_memory_3fc80000_P_zephyr_memory_region_LEN 1
#define DT_N_S_soc_S_memory_3fc80000_P_zephyr_memory_region_EXISTS 1
#define DT_N_S_soc_S_memory_3fc80000_P_compatible {"zephyr,memory-region", "mmio-sram"}
#define DT_N_S_soc_S_memory_3fc80000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_3fc80000_P_compatible_IDX_0 "zephyr,memory-region"
#define DT_N_S_soc_S_memory_3fc80000_P_compatible_IDX_0_STRING_UNQUOTED zephyr,memory-region
#define DT_N_S_soc_S_memory_3fc80000_P_compatible_IDX_0_STRING_TOKEN zephyr_memory_region
#define DT_N_S_soc_S_memory_3fc80000_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_MEMORY_REGION
#define DT_N_S_soc_S_memory_3fc80000_P_compatible_IDX_1_EXISTS 1
#define DT_N_S_soc_S_memory_3fc80000_P_compatible_IDX_1 "mmio-sram"
#define DT_N_S_soc_S_memory_3fc80000_P_compatible_IDX_1_STRING_UNQUOTED mmio-sram
#define DT_N_S_soc_S_memory_3fc80000_P_compatible_IDX_1_STRING_TOKEN mmio_sram
#define DT_N_S_soc_S_memory_3fc80000_P_compatible_IDX_1_STRING_UPPER_TOKEN MMIO_SRAM
#define DT_N_S_soc_S_memory_3fc80000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_memory_3fc80000, compatible, 0) \
	fn(DT_N_S_soc_S_memory_3fc80000, compatible, 1)
#define DT_N_S_soc_S_memory_3fc80000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_memory_3fc80000, compatible, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_memory_3fc80000, compatible, 1)
#define DT_N_S_soc_S_memory_3fc80000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_3fc80000, compatible, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_memory_3fc80000, compatible, 1, __VA_ARGS__)
#define DT_N_S_soc_S_memory_3fc80000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_memory_3fc80000, compatible, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_memory_3fc80000, compatible, 1, __VA_ARGS__)
#define DT_N_S_soc_S_memory_3fc80000_P_compatible_LEN 2
#define DT_N_S_soc_S_memory_3fc80000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_memory_3fc80000_P_reg {1070071808 /* 0x3fc80000 */, 393216 /* 0x60000 */}
#define DT_N_S_soc_S_memory_3fc80000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_3fc80000_P_reg_IDX_0 1070071808
#define DT_N_S_soc_S_memory_3fc80000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_memory_3fc80000_P_reg_IDX_1 393216
#define DT_N_S_soc_S_memory_3fc80000_P_reg_EXISTS 1
#define DT_N_S_soc_S_memory_3fc80000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_memory_3fc80000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_memory_3fc80000_P_wakeup_source 0
#define DT_N_S_soc_S_memory_3fc80000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_memory_3fc80000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_memory_3fc80000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/memory@4037c000
 *
 * Node identifier: DT_N_S_soc_S_memory_4037c000
 *
 * Binding (compatible = zephyr,memory-region):
 *   $ZEPHYR_BASE/dts/bindings/base/zephyr,memory-region.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_memory_4037c000_PATH "/soc/memory@4037c000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_memory_4037c000_FULL_NAME "memory@4037c000"
#define DT_N_S_soc_S_memory_4037c000_FULL_NAME_UNQUOTED memory@4037c000
#define DT_N_S_soc_S_memory_4037c000_FULL_NAME_TOKEN memory_4037c000
#define DT_N_S_soc_S_memory_4037c000_FULL_NAME_UPPER_TOKEN MEMORY_4037C000

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_memory_4037c000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_memory_4037c000_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_memory_4037c000_NODELABEL_NUM 1
#define DT_N_S_soc_S_memory_4037c000_FOREACH_NODELABEL(fn) fn(sram0)
#define DT_N_S_soc_S_memory_4037c000_FOREACH_NODELABEL_VARGS(fn, ...) fn(sram0, __VA_ARGS__)
#define DT_N_S_soc_S_memory_4037c000_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_memory_4037c000_CHILD_NUM 0
#define DT_N_S_soc_S_memory_4037c000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_memory_4037c000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_memory_4037c000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_memory_4037c000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_memory_4037c000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_memory_4037c000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_memory_4037c000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_memory_4037c000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_memory_4037c000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_memory_4037c000_ORD 37
#define DT_N_S_soc_S_memory_4037c000_ORD_STR_SORTABLE 00037

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_memory_4037c000_REQUIRES_ORDS \
	22, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_memory_4037c000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_memory_4037c000_EXISTS 1
#define DT_N_INST_0_zephyr_memory_region DT_N_S_soc_S_memory_4037c000
#define DT_N_INST_0_mmio_sram            DT_N_S_soc_S_memory_4037c000
#define DT_N_NODELABEL_sram0             DT_N_S_soc_S_memory_4037c000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_memory_4037c000_REG_NUM 1
#define DT_N_S_soc_S_memory_4037c000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_4037c000_REG_IDX_0_VAL_ADDRESS 1077395456 /* 0x4037c000 */
#define DT_N_S_soc_S_memory_4037c000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_memory_4037c000_RANGES_NUM 0
#define DT_N_S_soc_S_memory_4037c000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_memory_4037c000_IRQ_NUM 0
#define DT_N_S_soc_S_memory_4037c000_IRQ_LEVEL 0
#define DT_N_S_soc_S_memory_4037c000_COMPAT_MATCHES_zephyr_memory_region 1
#define DT_N_S_soc_S_memory_4037c000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_4037c000_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_soc_S_memory_4037c000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_4037c000_COMPAT_MODEL_IDX_0 "memory-region"
#define DT_N_S_soc_S_memory_4037c000_COMPAT_MATCHES_mmio_sram 1
#define DT_N_S_soc_S_memory_4037c000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_memory_4037c000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_memory_4037c000_P_zephyr_memory_region "SRAM0"
#define DT_N_S_soc_S_memory_4037c000_P_zephyr_memory_region_STRING_UNQUOTED SRAM0
#define DT_N_S_soc_S_memory_4037c000_P_zephyr_memory_region_STRING_TOKEN SRAM0
#define DT_N_S_soc_S_memory_4037c000_P_zephyr_memory_region_STRING_UPPER_TOKEN SRAM0
#define DT_N_S_soc_S_memory_4037c000_P_zephyr_memory_region_IDX_0 "SRAM0"
#define DT_N_S_soc_S_memory_4037c000_P_zephyr_memory_region_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_4037c000_P_zephyr_memory_region_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_memory_4037c000, zephyr_memory_region, 0)
#define DT_N_S_soc_S_memory_4037c000_P_zephyr_memory_region_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_memory_4037c000, zephyr_memory_region, 0)
#define DT_N_S_soc_S_memory_4037c000_P_zephyr_memory_region_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_4037c000, zephyr_memory_region, 0, __VA_ARGS__)
#define DT_N_S_soc_S_memory_4037c000_P_zephyr_memory_region_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_memory_4037c000, zephyr_memory_region, 0, __VA_ARGS__)
#define DT_N_S_soc_S_memory_4037c000_P_zephyr_memory_region_LEN 1
#define DT_N_S_soc_S_memory_4037c000_P_zephyr_memory_region_EXISTS 1
#define DT_N_S_soc_S_memory_4037c000_P_compatible {"zephyr,memory-region", "mmio-sram"}
#define DT_N_S_soc_S_memory_4037c000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_4037c000_P_compatible_IDX_0 "zephyr,memory-region"
#define DT_N_S_soc_S_memory_4037c000_P_compatible_IDX_0_STRING_UNQUOTED zephyr,memory-region
#define DT_N_S_soc_S_memory_4037c000_P_compatible_IDX_0_STRING_TOKEN zephyr_memory_region
#define DT_N_S_soc_S_memory_4037c000_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_MEMORY_REGION
#define DT_N_S_soc_S_memory_4037c000_P_compatible_IDX_1_EXISTS 1
#define DT_N_S_soc_S_memory_4037c000_P_compatible_IDX_1 "mmio-sram"
#define DT_N_S_soc_S_memory_4037c000_P_compatible_IDX_1_STRING_UNQUOTED mmio-sram
#define DT_N_S_soc_S_memory_4037c000_P_compatible_IDX_1_STRING_TOKEN mmio_sram
#define DT_N_S_soc_S_memory_4037c000_P_compatible_IDX_1_STRING_UPPER_TOKEN MMIO_SRAM
#define DT_N_S_soc_S_memory_4037c000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_memory_4037c000, compatible, 0) \
	fn(DT_N_S_soc_S_memory_4037c000, compatible, 1)
#define DT_N_S_soc_S_memory_4037c000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_memory_4037c000, compatible, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_memory_4037c000, compatible, 1)
#define DT_N_S_soc_S_memory_4037c000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_4037c000, compatible, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_memory_4037c000, compatible, 1, __VA_ARGS__)
#define DT_N_S_soc_S_memory_4037c000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_memory_4037c000, compatible, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_memory_4037c000, compatible, 1, __VA_ARGS__)
#define DT_N_S_soc_S_memory_4037c000_P_compatible_LEN 2
#define DT_N_S_soc_S_memory_4037c000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_memory_4037c000_P_reg {1077395456 /* 0x4037c000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_memory_4037c000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_4037c000_P_reg_IDX_0 1077395456
#define DT_N_S_soc_S_memory_4037c000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_memory_4037c000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_memory_4037c000_P_reg_EXISTS 1
#define DT_N_S_soc_S_memory_4037c000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_memory_4037c000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_memory_4037c000_P_wakeup_source 0
#define DT_N_S_soc_S_memory_4037c000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_memory_4037c000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_memory_4037c000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/rtc_timer@60008004
 *
 * Node identifier: DT_N_S_soc_S_rtc_timer_60008004
 *
 * Binding (compatible = espressif,esp32-rtc-timer):
 *   $ZEPHYR_BASE/dts/bindings/counter/espressif,esp32-rtc-timer.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_rtc_timer_60008004_PATH "/soc/rtc_timer@60008004"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_rtc_timer_60008004_FULL_NAME "rtc_timer@60008004"
#define DT_N_S_soc_S_rtc_timer_60008004_FULL_NAME_UNQUOTED rtc_timer@60008004
#define DT_N_S_soc_S_rtc_timer_60008004_FULL_NAME_TOKEN rtc_timer_60008004
#define DT_N_S_soc_S_rtc_timer_60008004_FULL_NAME_UPPER_TOKEN RTC_TIMER_60008004

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_rtc_timer_60008004_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_rtc_timer_60008004_CHILD_IDX 6

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_rtc_timer_60008004_NODELABEL_NUM 1
#define DT_N_S_soc_S_rtc_timer_60008004_FOREACH_NODELABEL(fn) fn(rtc_timer)
#define DT_N_S_soc_S_rtc_timer_60008004_FOREACH_NODELABEL_VARGS(fn, ...) fn(rtc_timer, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_timer_60008004_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_rtc_timer_60008004_CHILD_NUM 0
#define DT_N_S_soc_S_rtc_timer_60008004_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_rtc_timer_60008004_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_rtc_timer_60008004_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_rtc_timer_60008004_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_rtc_timer_60008004_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_rtc_timer_60008004_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_rtc_timer_60008004_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_rtc_timer_60008004_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_rtc_timer_60008004_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_rtc_timer_60008004_ORD 38
#define DT_N_S_soc_S_rtc_timer_60008004_ORD_STR_SORTABLE 00038

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_rtc_timer_60008004_REQUIRES_ORDS \
	22, /* /soc */ \
	25, /* /soc/interrupt-controller@600c2000 */ \
	26, /* /soc/rtc@60008000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_rtc_timer_60008004_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_rtc_timer_60008004_EXISTS 1
#define DT_N_INST_0_espressif_esp32_rtc_timer DT_N_S_soc_S_rtc_timer_60008004
#define DT_N_NODELABEL_rtc_timer              DT_N_S_soc_S_rtc_timer_60008004

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_rtc_timer_60008004_REG_NUM 1
#define DT_N_S_soc_S_rtc_timer_60008004_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_timer_60008004_REG_IDX_0_VAL_ADDRESS 1610645508 /* 0x60008004 */
#define DT_N_S_soc_S_rtc_timer_60008004_REG_IDX_0_VAL_SIZE 12 /* 0xc */
#define DT_N_S_soc_S_rtc_timer_60008004_RANGES_NUM 0
#define DT_N_S_soc_S_rtc_timer_60008004_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_rtc_timer_60008004_IRQ_NUM 1
#define DT_N_S_soc_S_rtc_timer_60008004_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_timer_60008004_IRQ_IDX_0_VAL_irq 27
#define DT_N_S_soc_S_rtc_timer_60008004_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_rtc_timer_60008004_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_timer_60008004_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_rtc_timer_60008004_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_rtc_timer_60008004_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_timer_60008004_IRQ_IDX_0_VAL_flags 0
#define DT_N_S_soc_S_rtc_timer_60008004_IRQ_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_rtc_timer_60008004_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_rtc_timer_60008004_IRQ_LEVEL 1
#define DT_N_S_soc_S_rtc_timer_60008004_COMPAT_MATCHES_espressif_esp32_rtc_timer 1
#define DT_N_S_soc_S_rtc_timer_60008004_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_timer_60008004_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_rtc_timer_60008004_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_timer_60008004_COMPAT_MODEL_IDX_0 "esp32-rtc-timer"
#define DT_N_S_soc_S_rtc_timer_60008004_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_rtc_timer_60008004_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_rtc_timer_60008004_P_status "okay"
#define DT_N_S_soc_S_rtc_timer_60008004_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_rtc_timer_60008004_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_rtc_timer_60008004_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_rtc_timer_60008004_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_rtc_timer_60008004_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_timer_60008004_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_soc_S_rtc_timer_60008004_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_rtc_timer_60008004_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_timer_60008004, status, 0)
#define DT_N_S_soc_S_rtc_timer_60008004_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_rtc_timer_60008004, status, 0)
#define DT_N_S_soc_S_rtc_timer_60008004_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_timer_60008004, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_timer_60008004_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_rtc_timer_60008004, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_timer_60008004_P_status_LEN 1
#define DT_N_S_soc_S_rtc_timer_60008004_P_status_EXISTS 1
#define DT_N_S_soc_S_rtc_timer_60008004_P_compatible {"espressif,esp32-rtc-timer"}
#define DT_N_S_soc_S_rtc_timer_60008004_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_timer_60008004_P_compatible_IDX_0 "espressif,esp32-rtc-timer"
#define DT_N_S_soc_S_rtc_timer_60008004_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-rtc-timer
#define DT_N_S_soc_S_rtc_timer_60008004_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_rtc_timer
#define DT_N_S_soc_S_rtc_timer_60008004_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_RTC_TIMER
#define DT_N_S_soc_S_rtc_timer_60008004_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_timer_60008004, compatible, 0)
#define DT_N_S_soc_S_rtc_timer_60008004_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_rtc_timer_60008004, compatible, 0)
#define DT_N_S_soc_S_rtc_timer_60008004_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_timer_60008004, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_timer_60008004_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_rtc_timer_60008004, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_timer_60008004_P_compatible_LEN 1
#define DT_N_S_soc_S_rtc_timer_60008004_P_compatible_EXISTS 1
#define DT_N_S_soc_S_rtc_timer_60008004_P_reg {1610645508 /* 0x60008004 */, 12 /* 0xc */}
#define DT_N_S_soc_S_rtc_timer_60008004_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_timer_60008004_P_reg_IDX_0 1610645508
#define DT_N_S_soc_S_rtc_timer_60008004_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_rtc_timer_60008004_P_reg_IDX_1 12
#define DT_N_S_soc_S_rtc_timer_60008004_P_reg_EXISTS 1
#define DT_N_S_soc_S_rtc_timer_60008004_P_interrupts {27 /* 0x1b */, 3 /* 0x3 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_rtc_timer_60008004_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_timer_60008004_P_interrupts_IDX_0 27
#define DT_N_S_soc_S_rtc_timer_60008004_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_rtc_timer_60008004_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_rtc_timer_60008004_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_rtc_timer_60008004_P_interrupts_IDX_2 0
#define DT_N_S_soc_S_rtc_timer_60008004_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_rtc_timer_60008004_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_rtc_timer_60008004_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_rtc_timer_60008004_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_rtc_timer_60008004_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_timer_60008004_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_timer_60008004, interrupt_parent, 0)
#define DT_N_S_soc_S_rtc_timer_60008004_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_rtc_timer_60008004, interrupt_parent, 0)
#define DT_N_S_soc_S_rtc_timer_60008004_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_timer_60008004, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_timer_60008004_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_rtc_timer_60008004, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_timer_60008004_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_rtc_timer_60008004_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_rtc_timer_60008004_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_timer_60008004_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_60008000
#define DT_N_S_soc_S_rtc_timer_60008004_P_clocks_IDX_0_VAL_offset 27
#define DT_N_S_soc_S_rtc_timer_60008004_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_rtc_timer_60008004_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_timer_60008004, clocks, 0)
#define DT_N_S_soc_S_rtc_timer_60008004_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_rtc_timer_60008004, clocks, 0)
#define DT_N_S_soc_S_rtc_timer_60008004_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_timer_60008004, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_timer_60008004_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_rtc_timer_60008004, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_timer_60008004_P_clocks_LEN 1
#define DT_N_S_soc_S_rtc_timer_60008004_P_clocks_EXISTS 1
#define DT_N_S_soc_S_rtc_timer_60008004_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_rtc_timer_60008004_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_rtc_timer_60008004_P_wakeup_source 0
#define DT_N_S_soc_S_rtc_timer_60008004_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_rtc_timer_60008004_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_rtc_timer_60008004_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/spi@60024000
 *
 * Node identifier: DT_N_S_soc_S_spi_60024000
 *
 * Binding (compatible = espressif,esp32-spi):
 *   $ZEPHYR_BASE/dts/bindings/spi/espressif,esp32-spi.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_spi_60024000_PATH "/soc/spi@60024000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_spi_60024000_FULL_NAME "spi@60024000"
#define DT_N_S_soc_S_spi_60024000_FULL_NAME_UNQUOTED spi@60024000
#define DT_N_S_soc_S_spi_60024000_FULL_NAME_TOKEN spi_60024000
#define DT_N_S_soc_S_spi_60024000_FULL_NAME_UPPER_TOKEN SPI_60024000

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_spi_60024000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_spi_60024000_CHILD_IDX 19

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_spi_60024000_NODELABEL_NUM 2
#define DT_N_S_soc_S_spi_60024000_FOREACH_NODELABEL(fn) fn(spi2) fn(xiao_spi)
#define DT_N_S_soc_S_spi_60024000_FOREACH_NODELABEL_VARGS(fn, ...) fn(spi2, __VA_ARGS__) fn(xiao_spi, __VA_ARGS__)
#define DT_N_S_soc_S_spi_60024000_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_spi_60024000_CHILD_NUM 0
#define DT_N_S_soc_S_spi_60024000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_spi_60024000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_spi_60024000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_spi_60024000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_spi_60024000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_spi_60024000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_spi_60024000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_spi_60024000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_spi_60024000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_spi_60024000_ORD 39
#define DT_N_S_soc_S_spi_60024000_ORD_STR_SORTABLE 00039

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_spi_60024000_REQUIRES_ORDS \
	14, /* /pin-controller/spim2_default */ \
	22, /* /soc */ \
	25, /* /soc/interrupt-controller@600c2000 */ \
	26, /* /soc/rtc@60008000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_spi_60024000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_spi_60024000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_spi DT_N_S_soc_S_spi_60024000
#define DT_N_NODELABEL_spi2             DT_N_S_soc_S_spi_60024000
#define DT_N_NODELABEL_xiao_spi         DT_N_S_soc_S_spi_60024000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_spi_60024000_REG_NUM 1
#define DT_N_S_soc_S_spi_60024000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_REG_IDX_0_VAL_ADDRESS 1610760192 /* 0x60024000 */
#define DT_N_S_soc_S_spi_60024000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_spi_60024000_RANGES_NUM 0
#define DT_N_S_soc_S_spi_60024000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_spi_60024000_IRQ_NUM 1
#define DT_N_S_soc_S_spi_60024000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_IRQ_IDX_0_VAL_irq 19
#define DT_N_S_soc_S_spi_60024000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_spi_60024000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_IRQ_IDX_0_VAL_flags 0
#define DT_N_S_soc_S_spi_60024000_IRQ_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_spi_60024000_IRQ_LEVEL 1
#define DT_N_S_soc_S_spi_60024000_COMPAT_MATCHES_espressif_esp32_spi 1
#define DT_N_S_soc_S_spi_60024000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_spi_60024000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_COMPAT_MODEL_IDX_0 "esp32-spi"
#define DT_N_S_soc_S_spi_60024000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_spi_60024000_PINCTRL_NUM 1
#define DT_N_S_soc_S_spi_60024000_PINCTRL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_PINCTRL_IDX_0_TOKEN default
#define DT_N_S_soc_S_spi_60024000_PINCTRL_IDX_0_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_spi_60024000_PINCTRL_NAME_default_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_PINCTRL_NAME_default_IDX 0
#define DT_N_S_soc_S_spi_60024000_PINCTRL_NAME_default_IDX_0_PH DT_N_S_pin_controller_S_spim2_default

/* Generic property macros: */
#define DT_N_S_soc_S_spi_60024000_P_reg {1610760192 /* 0x60024000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_spi_60024000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_reg_IDX_0 1610760192
#define DT_N_S_soc_S_spi_60024000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_spi_60024000_P_reg_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_0_IDX_0 DT_N_S_pin_controller_S_spim2_default
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_0_IDX_0_PH DT_N_S_pin_controller_S_spim2_default
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_0_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_0_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_60024000, pinctrl_0, 0)
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_60024000, pinctrl_0, 0)
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_0_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_60024000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_60024000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_0_LEN 1
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_names {"default"}
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_names_IDX_0 "default"
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_names_IDX_0_STRING_UNQUOTED default
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_names_IDX_0_STRING_TOKEN default
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_names_IDX_0_STRING_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_60024000, pinctrl_names, 0)
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_60024000, pinctrl_names, 0)
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_60024000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_60024000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_names_LEN 1
#define DT_N_S_soc_S_spi_60024000_P_pinctrl_names_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_half_duplex 0
#define DT_N_S_soc_S_spi_60024000_P_half_duplex_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_dummy_comp 0
#define DT_N_S_soc_S_spi_60024000_P_dummy_comp_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_sio 0
#define DT_N_S_soc_S_spi_60024000_P_sio_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_dma_enabled 0
#define DT_N_S_soc_S_spi_60024000_P_dma_enabled_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_dma_clk 24
#define DT_N_S_soc_S_spi_60024000_P_dma_clk_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_dma_host 0
#define DT_N_S_soc_S_spi_60024000_P_dma_host_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_clk_as_cs 0
#define DT_N_S_soc_S_spi_60024000_P_clk_as_cs_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_positive_cs 0
#define DT_N_S_soc_S_spi_60024000_P_positive_cs_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_use_iomux 0
#define DT_N_S_soc_S_spi_60024000_P_use_iomux_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_line_idle_low 0
#define DT_N_S_soc_S_spi_60024000_P_line_idle_low_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_status "okay"
#define DT_N_S_soc_S_spi_60024000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_spi_60024000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_spi_60024000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_spi_60024000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_spi_60024000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_soc_S_spi_60024000_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_60024000, status, 0)
#define DT_N_S_soc_S_spi_60024000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_60024000, status, 0)
#define DT_N_S_soc_S_spi_60024000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_60024000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_60024000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_60024000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_60024000_P_status_LEN 1
#define DT_N_S_soc_S_spi_60024000_P_status_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_compatible {"espressif,esp32-spi"}
#define DT_N_S_soc_S_spi_60024000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_compatible_IDX_0 "espressif,esp32-spi"
#define DT_N_S_soc_S_spi_60024000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-spi
#define DT_N_S_soc_S_spi_60024000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_spi
#define DT_N_S_soc_S_spi_60024000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_SPI
#define DT_N_S_soc_S_spi_60024000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_60024000, compatible, 0)
#define DT_N_S_soc_S_spi_60024000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_60024000, compatible, 0)
#define DT_N_S_soc_S_spi_60024000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_60024000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_60024000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_60024000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_60024000_P_compatible_LEN 1
#define DT_N_S_soc_S_spi_60024000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_interrupts {19 /* 0x13 */, 3 /* 0x3 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_spi_60024000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_interrupts_IDX_0 19
#define DT_N_S_soc_S_spi_60024000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_spi_60024000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_interrupts_IDX_2 0
#define DT_N_S_soc_S_spi_60024000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_spi_60024000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_spi_60024000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_spi_60024000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_60024000, interrupt_parent, 0)
#define DT_N_S_soc_S_spi_60024000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_60024000, interrupt_parent, 0)
#define DT_N_S_soc_S_spi_60024000_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_60024000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_60024000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_60024000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_60024000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_spi_60024000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_60008000
#define DT_N_S_soc_S_spi_60024000_P_clocks_IDX_0_VAL_offset 11
#define DT_N_S_soc_S_spi_60024000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_60024000, clocks, 0)
#define DT_N_S_soc_S_spi_60024000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_60024000, clocks, 0)
#define DT_N_S_soc_S_spi_60024000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_60024000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_60024000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_60024000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_60024000_P_clocks_LEN 1
#define DT_N_S_soc_S_spi_60024000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_spi_60024000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_wakeup_source 0
#define DT_N_S_soc_S_spi_60024000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_spi_60024000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_spi_60024000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/systimer@60023000
 *
 * Node identifier: DT_N_S_soc_S_systimer_60023000
 *
 * Binding (compatible = espressif,esp32-systimer):
 *   $ZEPHYR_BASE/dts/bindings/timer/espressif,esp32-systimer.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_systimer_60023000_PATH "/soc/systimer@60023000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_systimer_60023000_FULL_NAME "systimer@60023000"
#define DT_N_S_soc_S_systimer_60023000_FULL_NAME_UNQUOTED systimer@60023000
#define DT_N_S_soc_S_systimer_60023000_FULL_NAME_TOKEN systimer_60023000
#define DT_N_S_soc_S_systimer_60023000_FULL_NAME_UPPER_TOKEN SYSTIMER_60023000

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_systimer_60023000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_systimer_60023000_CHILD_IDX 3

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_systimer_60023000_NODELABEL_NUM 1
#define DT_N_S_soc_S_systimer_60023000_FOREACH_NODELABEL(fn) fn(systimer0)
#define DT_N_S_soc_S_systimer_60023000_FOREACH_NODELABEL_VARGS(fn, ...) fn(systimer0, __VA_ARGS__)
#define DT_N_S_soc_S_systimer_60023000_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_systimer_60023000_CHILD_NUM 0
#define DT_N_S_soc_S_systimer_60023000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_systimer_60023000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_systimer_60023000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_systimer_60023000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_systimer_60023000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_systimer_60023000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_systimer_60023000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_systimer_60023000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_systimer_60023000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_systimer_60023000_ORD 40
#define DT_N_S_soc_S_systimer_60023000_ORD_STR_SORTABLE 00040

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_systimer_60023000_REQUIRES_ORDS \
	22, /* /soc */ \
	25, /* /soc/interrupt-controller@600c2000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_systimer_60023000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_systimer_60023000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_systimer DT_N_S_soc_S_systimer_60023000
#define DT_N_NODELABEL_systimer0             DT_N_S_soc_S_systimer_60023000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_systimer_60023000_REG_NUM 1
#define DT_N_S_soc_S_systimer_60023000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_REG_IDX_0_VAL_ADDRESS 1610756096 /* 0x60023000 */
#define DT_N_S_soc_S_systimer_60023000_REG_IDX_0_VAL_SIZE 128 /* 0x80 */
#define DT_N_S_soc_S_systimer_60023000_RANGES_NUM 0
#define DT_N_S_soc_S_systimer_60023000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_systimer_60023000_IRQ_NUM 1
#define DT_N_S_soc_S_systimer_60023000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_IRQ_IDX_0_VAL_irq 37
#define DT_N_S_soc_S_systimer_60023000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_systimer_60023000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_IRQ_IDX_0_VAL_flags 0
#define DT_N_S_soc_S_systimer_60023000_IRQ_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_systimer_60023000_IRQ_LEVEL 1
#define DT_N_S_soc_S_systimer_60023000_COMPAT_MATCHES_espressif_esp32_systimer 1
#define DT_N_S_soc_S_systimer_60023000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_systimer_60023000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_COMPAT_MODEL_IDX_0 "esp32-systimer"
#define DT_N_S_soc_S_systimer_60023000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_systimer_60023000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_systimer_60023000_P_reg {1610756096 /* 0x60023000 */, 128 /* 0x80 */}
#define DT_N_S_soc_S_systimer_60023000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_P_reg_IDX_0 1610756096
#define DT_N_S_soc_S_systimer_60023000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_P_reg_IDX_1 128
#define DT_N_S_soc_S_systimer_60023000_P_reg_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_P_interrupts {37 /* 0x25 */, 3 /* 0x3 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_systimer_60023000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_P_interrupts_IDX_0 37
#define DT_N_S_soc_S_systimer_60023000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_systimer_60023000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_P_interrupts_IDX_2 0
#define DT_N_S_soc_S_systimer_60023000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_P_status "okay"
#define DT_N_S_soc_S_systimer_60023000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_systimer_60023000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_systimer_60023000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_systimer_60023000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_systimer_60023000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_soc_S_systimer_60023000_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_systimer_60023000, status, 0)
#define DT_N_S_soc_S_systimer_60023000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_systimer_60023000, status, 0)
#define DT_N_S_soc_S_systimer_60023000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_systimer_60023000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_systimer_60023000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_systimer_60023000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_systimer_60023000_P_status_LEN 1
#define DT_N_S_soc_S_systimer_60023000_P_status_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_P_compatible {"espressif,esp32-systimer"}
#define DT_N_S_soc_S_systimer_60023000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_P_compatible_IDX_0 "espressif,esp32-systimer"
#define DT_N_S_soc_S_systimer_60023000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-systimer
#define DT_N_S_soc_S_systimer_60023000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_systimer
#define DT_N_S_soc_S_systimer_60023000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_SYSTIMER
#define DT_N_S_soc_S_systimer_60023000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_systimer_60023000, compatible, 0)
#define DT_N_S_soc_S_systimer_60023000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_systimer_60023000, compatible, 0)
#define DT_N_S_soc_S_systimer_60023000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_systimer_60023000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_systimer_60023000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_systimer_60023000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_systimer_60023000_P_compatible_LEN 1
#define DT_N_S_soc_S_systimer_60023000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_systimer_60023000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_systimer_60023000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_systimer_60023000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_systimer_60023000, interrupt_parent, 0)
#define DT_N_S_soc_S_systimer_60023000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_systimer_60023000, interrupt_parent, 0)
#define DT_N_S_soc_S_systimer_60023000_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_systimer_60023000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_systimer_60023000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_systimer_60023000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_systimer_60023000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_systimer_60023000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_systimer_60023000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_P_wakeup_source 0
#define DT_N_S_soc_S_systimer_60023000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_systimer_60023000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_systimer_60023000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/trng@3ff700b0
 *
 * Node identifier: DT_N_S_soc_S_trng_3ff700b0
 *
 * Binding (compatible = espressif,esp32-trng):
 *   $ZEPHYR_BASE/dts/bindings/rng/espressif,esp32-trng.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_trng_3ff700b0_PATH "/soc/trng@3ff700b0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_trng_3ff700b0_FULL_NAME "trng@3ff700b0"
#define DT_N_S_soc_S_trng_3ff700b0_FULL_NAME_UNQUOTED trng@3ff700b0
#define DT_N_S_soc_S_trng_3ff700b0_FULL_NAME_TOKEN trng_3ff700b0
#define DT_N_S_soc_S_trng_3ff700b0_FULL_NAME_UPPER_TOKEN TRNG_3FF700B0

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_trng_3ff700b0_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_trng_3ff700b0_CHILD_IDX 17

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_trng_3ff700b0_NODELABEL_NUM 1
#define DT_N_S_soc_S_trng_3ff700b0_FOREACH_NODELABEL(fn) fn(trng0)
#define DT_N_S_soc_S_trng_3ff700b0_FOREACH_NODELABEL_VARGS(fn, ...) fn(trng0, __VA_ARGS__)
#define DT_N_S_soc_S_trng_3ff700b0_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_trng_3ff700b0_CHILD_NUM 0
#define DT_N_S_soc_S_trng_3ff700b0_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_trng_3ff700b0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_trng_3ff700b0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_trng_3ff700b0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_trng_3ff700b0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_trng_3ff700b0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_trng_3ff700b0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_trng_3ff700b0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_trng_3ff700b0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_trng_3ff700b0_ORD 41
#define DT_N_S_soc_S_trng_3ff700b0_ORD_STR_SORTABLE 00041

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_trng_3ff700b0_REQUIRES_ORDS \
	22, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_trng_3ff700b0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_trng_3ff700b0_EXISTS 1
#define DT_N_INST_0_espressif_esp32_trng DT_N_S_soc_S_trng_3ff700b0
#define DT_N_NODELABEL_trng0             DT_N_S_soc_S_trng_3ff700b0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_trng_3ff700b0_REG_NUM 1
#define DT_N_S_soc_S_trng_3ff700b0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_trng_3ff700b0_REG_IDX_0_VAL_ADDRESS 1073152176 /* 0x3ff700b0 */
#define DT_N_S_soc_S_trng_3ff700b0_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_trng_3ff700b0_RANGES_NUM 0
#define DT_N_S_soc_S_trng_3ff700b0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_trng_3ff700b0_IRQ_NUM 0
#define DT_N_S_soc_S_trng_3ff700b0_IRQ_LEVEL 0
#define DT_N_S_soc_S_trng_3ff700b0_COMPAT_MATCHES_espressif_esp32_trng 1
#define DT_N_S_soc_S_trng_3ff700b0_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_trng_3ff700b0_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_trng_3ff700b0_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_trng_3ff700b0_COMPAT_MODEL_IDX_0 "esp32-trng"
#define DT_N_S_soc_S_trng_3ff700b0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_trng_3ff700b0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_trng_3ff700b0_P_reg {1073152176 /* 0x3ff700b0 */, 4 /* 0x4 */}
#define DT_N_S_soc_S_trng_3ff700b0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_trng_3ff700b0_P_reg_IDX_0 1073152176
#define DT_N_S_soc_S_trng_3ff700b0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_trng_3ff700b0_P_reg_IDX_1 4
#define DT_N_S_soc_S_trng_3ff700b0_P_reg_EXISTS 1
#define DT_N_S_soc_S_trng_3ff700b0_P_status "okay"
#define DT_N_S_soc_S_trng_3ff700b0_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_trng_3ff700b0_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_trng_3ff700b0_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_trng_3ff700b0_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_trng_3ff700b0_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_trng_3ff700b0_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_soc_S_trng_3ff700b0_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_trng_3ff700b0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_trng_3ff700b0, status, 0)
#define DT_N_S_soc_S_trng_3ff700b0_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_trng_3ff700b0, status, 0)
#define DT_N_S_soc_S_trng_3ff700b0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_trng_3ff700b0, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_trng_3ff700b0_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_trng_3ff700b0, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_trng_3ff700b0_P_status_LEN 1
#define DT_N_S_soc_S_trng_3ff700b0_P_status_EXISTS 1
#define DT_N_S_soc_S_trng_3ff700b0_P_compatible {"espressif,esp32-trng"}
#define DT_N_S_soc_S_trng_3ff700b0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_trng_3ff700b0_P_compatible_IDX_0 "espressif,esp32-trng"
#define DT_N_S_soc_S_trng_3ff700b0_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-trng
#define DT_N_S_soc_S_trng_3ff700b0_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_trng
#define DT_N_S_soc_S_trng_3ff700b0_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_TRNG
#define DT_N_S_soc_S_trng_3ff700b0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_trng_3ff700b0, compatible, 0)
#define DT_N_S_soc_S_trng_3ff700b0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_trng_3ff700b0, compatible, 0)
#define DT_N_S_soc_S_trng_3ff700b0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_trng_3ff700b0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_trng_3ff700b0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_trng_3ff700b0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_trng_3ff700b0_P_compatible_LEN 1
#define DT_N_S_soc_S_trng_3ff700b0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_trng_3ff700b0_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_trng_3ff700b0_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_trng_3ff700b0_P_wakeup_source 0
#define DT_N_S_soc_S_trng_3ff700b0_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_trng_3ff700b0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_trng_3ff700b0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/uart@60000000
 *
 * Node identifier: DT_N_S_soc_S_uart_60000000
 *
 * Binding (compatible = espressif,esp32-uart):
 *   $ZEPHYR_BASE/dts/bindings/serial/espressif,esp32-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_60000000_PATH "/soc/uart@60000000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_60000000_FULL_NAME "uart@60000000"
#define DT_N_S_soc_S_uart_60000000_FULL_NAME_UNQUOTED uart@60000000
#define DT_N_S_soc_S_uart_60000000_FULL_NAME_TOKEN uart_60000000
#define DT_N_S_soc_S_uart_60000000_FULL_NAME_UPPER_TOKEN UART_60000000

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_60000000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_uart_60000000_CHILD_IDX 11

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_uart_60000000_NODELABEL_NUM 2
#define DT_N_S_soc_S_uart_60000000_FOREACH_NODELABEL(fn) fn(uart0) fn(xiao_serial)
#define DT_N_S_soc_S_uart_60000000_FOREACH_NODELABEL_VARGS(fn, ...) fn(uart0, __VA_ARGS__) fn(xiao_serial, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60000000_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_uart_60000000_CHILD_NUM 0
#define DT_N_S_soc_S_uart_60000000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_uart_60000000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_60000000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_60000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_60000000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_uart_60000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_60000000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_60000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_60000000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_60000000_ORD 42
#define DT_N_S_soc_S_uart_60000000_ORD_STR_SORTABLE 00042

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_60000000_REQUIRES_ORDS \
	19, /* /pin-controller/uart0_default */ \
	22, /* /soc */ \
	25, /* /soc/interrupt-controller@600c2000 */ \
	26, /* /soc/rtc@60008000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_60000000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_60000000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_uart DT_N_S_soc_S_uart_60000000
#define DT_N_NODELABEL_uart0             DT_N_S_soc_S_uart_60000000
#define DT_N_NODELABEL_xiao_serial       DT_N_S_soc_S_uart_60000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_60000000_REG_NUM 1
#define DT_N_S_soc_S_uart_60000000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_REG_IDX_0_VAL_ADDRESS 1610612736 /* 0x60000000 */
#define DT_N_S_soc_S_uart_60000000_REG_IDX_0_VAL_SIZE 1024 /* 0x400 */
#define DT_N_S_soc_S_uart_60000000_RANGES_NUM 0
#define DT_N_S_soc_S_uart_60000000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_uart_60000000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_60000000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_IRQ_IDX_0_VAL_irq 21
#define DT_N_S_soc_S_uart_60000000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_uart_60000000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_IRQ_IDX_0_VAL_flags 0
#define DT_N_S_soc_S_uart_60000000_IRQ_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_uart_60000000_IRQ_LEVEL 1
#define DT_N_S_soc_S_uart_60000000_COMPAT_MATCHES_espressif_esp32_uart 1
#define DT_N_S_soc_S_uart_60000000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_uart_60000000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_COMPAT_MODEL_IDX_0 "esp32-uart"
#define DT_N_S_soc_S_uart_60000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_60000000_PINCTRL_NUM 1
#define DT_N_S_soc_S_uart_60000000_PINCTRL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_PINCTRL_IDX_0_TOKEN default
#define DT_N_S_soc_S_uart_60000000_PINCTRL_IDX_0_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_uart_60000000_PINCTRL_NAME_default_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_PINCTRL_NAME_default_IDX 0
#define DT_N_S_soc_S_uart_60000000_PINCTRL_NAME_default_IDX_0_PH DT_N_S_pin_controller_S_uart0_default

/* Generic property macros: */
#define DT_N_S_soc_S_uart_60000000_P_reg {1610612736 /* 0x60000000 */, 1024 /* 0x400 */}
#define DT_N_S_soc_S_uart_60000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_reg_IDX_0 1610612736
#define DT_N_S_soc_S_uart_60000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_reg_IDX_1 1024
#define DT_N_S_soc_S_uart_60000000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_0_IDX_0 DT_N_S_pin_controller_S_uart0_default
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_0_IDX_0_PH DT_N_S_pin_controller_S_uart0_default
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_0_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_0_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60000000, pinctrl_0, 0)
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60000000, pinctrl_0, 0)
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_0_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60000000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60000000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_0_LEN 1
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_names {"default"}
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_names_IDX_0 "default"
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_names_IDX_0_STRING_UNQUOTED default
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_names_IDX_0_STRING_TOKEN default
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_names_IDX_0_STRING_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60000000, pinctrl_names, 0)
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60000000, pinctrl_names, 0)
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60000000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60000000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_names_LEN 1
#define DT_N_S_soc_S_uart_60000000_P_pinctrl_names_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_hw_rs485_hd_mode 0
#define DT_N_S_soc_S_uart_60000000_P_hw_rs485_hd_mode_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_current_speed 115200
#define DT_N_S_soc_S_uart_60000000_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_60000000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_status "okay"
#define DT_N_S_soc_S_uart_60000000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_uart_60000000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_uart_60000000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_60000000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_uart_60000000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_soc_S_uart_60000000_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60000000, status, 0)
#define DT_N_S_soc_S_uart_60000000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60000000, status, 0)
#define DT_N_S_soc_S_uart_60000000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60000000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60000000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60000000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60000000_P_status_LEN 1
#define DT_N_S_soc_S_uart_60000000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_compatible {"espressif,esp32-uart"}
#define DT_N_S_soc_S_uart_60000000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_compatible_IDX_0 "espressif,esp32-uart"
#define DT_N_S_soc_S_uart_60000000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-uart
#define DT_N_S_soc_S_uart_60000000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_uart
#define DT_N_S_soc_S_uart_60000000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_UART
#define DT_N_S_soc_S_uart_60000000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60000000, compatible, 0)
#define DT_N_S_soc_S_uart_60000000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60000000, compatible, 0)
#define DT_N_S_soc_S_uart_60000000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60000000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60000000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_60000000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_interrupts {21 /* 0x15 */, 3 /* 0x3 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_uart_60000000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_interrupts_IDX_0 21
#define DT_N_S_soc_S_uart_60000000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_uart_60000000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_interrupts_IDX_2 0
#define DT_N_S_soc_S_uart_60000000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_uart_60000000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_uart_60000000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_uart_60000000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60000000, interrupt_parent, 0)
#define DT_N_S_soc_S_uart_60000000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60000000, interrupt_parent, 0)
#define DT_N_S_soc_S_uart_60000000_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60000000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60000000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60000000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60000000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_uart_60000000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_60008000
#define DT_N_S_soc_S_uart_60000000_P_clocks_IDX_0_VAL_offset 1
#define DT_N_S_soc_S_uart_60000000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60000000, clocks, 0)
#define DT_N_S_soc_S_uart_60000000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60000000, clocks, 0)
#define DT_N_S_soc_S_uart_60000000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60000000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60000000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60000000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60000000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_60000000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_uart_60000000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_60000000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_uart_60000000_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_tx_invert 0
#define DT_N_S_soc_S_uart_60000000_P_tx_invert_EXISTS 1
#define DT_N_S_soc_S_uart_60000000_P_rx_invert 0
#define DT_N_S_soc_S_uart_60000000_P_rx_invert_EXISTS 1

/*
 * Devicetree node: /soc/uart@60010000
 *
 * Node identifier: DT_N_S_soc_S_uart_60010000
 *
 * Binding (compatible = espressif,esp32-uart):
 *   $ZEPHYR_BASE/dts/bindings/serial/espressif,esp32-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_60010000_PATH "/soc/uart@60010000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_60010000_FULL_NAME "uart@60010000"
#define DT_N_S_soc_S_uart_60010000_FULL_NAME_UNQUOTED uart@60010000
#define DT_N_S_soc_S_uart_60010000_FULL_NAME_TOKEN uart_60010000
#define DT_N_S_soc_S_uart_60010000_FULL_NAME_UPPER_TOKEN UART_60010000

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_60010000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_uart_60010000_CHILD_IDX 12

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_uart_60010000_NODELABEL_NUM 1
#define DT_N_S_soc_S_uart_60010000_FOREACH_NODELABEL(fn) fn(uart1)
#define DT_N_S_soc_S_uart_60010000_FOREACH_NODELABEL_VARGS(fn, ...) fn(uart1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60010000_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_uart_60010000_CHILD_NUM 0
#define DT_N_S_soc_S_uart_60010000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_uart_60010000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_60010000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_60010000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_60010000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_uart_60010000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_60010000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_60010000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_60010000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_60010000_ORD 43
#define DT_N_S_soc_S_uart_60010000_ORD_STR_SORTABLE 00043

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_60010000_REQUIRES_ORDS \
	22, /* /soc */ \
	25, /* /soc/interrupt-controller@600c2000 */ \
	26, /* /soc/rtc@60008000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_60010000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_60010000_EXISTS 1
#define DT_N_INST_1_espressif_esp32_uart DT_N_S_soc_S_uart_60010000
#define DT_N_NODELABEL_uart1             DT_N_S_soc_S_uart_60010000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_60010000_REG_NUM 1
#define DT_N_S_soc_S_uart_60010000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_REG_IDX_0_VAL_ADDRESS 1610678272 /* 0x60010000 */
#define DT_N_S_soc_S_uart_60010000_REG_IDX_0_VAL_SIZE 1024 /* 0x400 */
#define DT_N_S_soc_S_uart_60010000_RANGES_NUM 0
#define DT_N_S_soc_S_uart_60010000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_uart_60010000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_60010000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_IRQ_IDX_0_VAL_irq 22
#define DT_N_S_soc_S_uart_60010000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_uart_60010000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_IRQ_IDX_0_VAL_flags 0
#define DT_N_S_soc_S_uart_60010000_IRQ_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_uart_60010000_IRQ_LEVEL 1
#define DT_N_S_soc_S_uart_60010000_COMPAT_MATCHES_espressif_esp32_uart 1
#define DT_N_S_soc_S_uart_60010000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_uart_60010000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_COMPAT_MODEL_IDX_0 "esp32-uart"
#define DT_N_S_soc_S_uart_60010000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_60010000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_60010000_P_reg {1610678272 /* 0x60010000 */, 1024 /* 0x400 */}
#define DT_N_S_soc_S_uart_60010000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_reg_IDX_0 1610678272
#define DT_N_S_soc_S_uart_60010000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_reg_IDX_1 1024
#define DT_N_S_soc_S_uart_60010000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_hw_rs485_hd_mode 0
#define DT_N_S_soc_S_uart_60010000_P_hw_rs485_hd_mode_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_current_speed 115200
#define DT_N_S_soc_S_uart_60010000_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_60010000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_status "disabled"
#define DT_N_S_soc_S_uart_60010000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_uart_60010000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_uart_60010000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_60010000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_uart_60010000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_status_IDX_0_ENUM_IDX 2
#define DT_N_S_soc_S_uart_60010000_P_status_IDX_0_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60010000, status, 0)
#define DT_N_S_soc_S_uart_60010000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60010000, status, 0)
#define DT_N_S_soc_S_uart_60010000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60010000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60010000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60010000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60010000_P_status_LEN 1
#define DT_N_S_soc_S_uart_60010000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_compatible {"espressif,esp32-uart"}
#define DT_N_S_soc_S_uart_60010000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_compatible_IDX_0 "espressif,esp32-uart"
#define DT_N_S_soc_S_uart_60010000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-uart
#define DT_N_S_soc_S_uart_60010000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_uart
#define DT_N_S_soc_S_uart_60010000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_UART
#define DT_N_S_soc_S_uart_60010000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60010000, compatible, 0)
#define DT_N_S_soc_S_uart_60010000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60010000, compatible, 0)
#define DT_N_S_soc_S_uart_60010000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60010000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60010000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60010000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60010000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_60010000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_interrupts {22 /* 0x16 */, 3 /* 0x3 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_uart_60010000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_interrupts_IDX_0 22
#define DT_N_S_soc_S_uart_60010000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_uart_60010000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_interrupts_IDX_2 0
#define DT_N_S_soc_S_uart_60010000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_uart_60010000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_uart_60010000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_uart_60010000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60010000, interrupt_parent, 0)
#define DT_N_S_soc_S_uart_60010000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60010000, interrupt_parent, 0)
#define DT_N_S_soc_S_uart_60010000_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60010000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60010000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60010000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60010000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_uart_60010000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_60008000
#define DT_N_S_soc_S_uart_60010000_P_clocks_IDX_0_VAL_offset 2
#define DT_N_S_soc_S_uart_60010000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60010000, clocks, 0)
#define DT_N_S_soc_S_uart_60010000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60010000, clocks, 0)
#define DT_N_S_soc_S_uart_60010000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60010000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60010000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60010000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60010000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_60010000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_uart_60010000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_60010000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_uart_60010000_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_tx_invert 0
#define DT_N_S_soc_S_uart_60010000_P_tx_invert_EXISTS 1
#define DT_N_S_soc_S_uart_60010000_P_rx_invert 0
#define DT_N_S_soc_S_uart_60010000_P_rx_invert_EXISTS 1

/*
 * Devicetree node: /soc/uart@60043000
 *
 * Node identifier: DT_N_S_soc_S_uart_60043000
 *
 * Binding (compatible = espressif,esp32-usb-serial):
 *   $ZEPHYR_BASE/dts/bindings/serial/espressif,esp32-usb-serial.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_60043000_PATH "/soc/uart@60043000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_60043000_FULL_NAME "uart@60043000"
#define DT_N_S_soc_S_uart_60043000_FULL_NAME_UNQUOTED uart@60043000
#define DT_N_S_soc_S_uart_60043000_FULL_NAME_TOKEN uart_60043000
#define DT_N_S_soc_S_uart_60043000_FULL_NAME_UPPER_TOKEN UART_60043000

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_60043000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_uart_60043000_CHILD_IDX 14

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_uart_60043000_NODELABEL_NUM 1
#define DT_N_S_soc_S_uart_60043000_FOREACH_NODELABEL(fn) fn(usb_serial)
#define DT_N_S_soc_S_uart_60043000_FOREACH_NODELABEL_VARGS(fn, ...) fn(usb_serial, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60043000_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_uart_60043000_CHILD_NUM 0
#define DT_N_S_soc_S_uart_60043000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_uart_60043000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_60043000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_60043000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_60043000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_uart_60043000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_60043000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_60043000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_60043000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_60043000_ORD 44
#define DT_N_S_soc_S_uart_60043000_ORD_STR_SORTABLE 00044

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_60043000_REQUIRES_ORDS \
	22, /* /soc */ \
	25, /* /soc/interrupt-controller@600c2000 */ \
	26, /* /soc/rtc@60008000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_60043000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_60043000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_usb_serial DT_N_S_soc_S_uart_60043000
#define DT_N_NODELABEL_usb_serial              DT_N_S_soc_S_uart_60043000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_60043000_REG_NUM 1
#define DT_N_S_soc_S_uart_60043000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_REG_IDX_0_VAL_ADDRESS 1610887168 /* 0x60043000 */
#define DT_N_S_soc_S_uart_60043000_REG_IDX_0_VAL_SIZE 1024 /* 0x400 */
#define DT_N_S_soc_S_uart_60043000_RANGES_NUM 0
#define DT_N_S_soc_S_uart_60043000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_uart_60043000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_60043000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_IRQ_IDX_0_VAL_irq 26
#define DT_N_S_soc_S_uart_60043000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_uart_60043000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_IRQ_IDX_0_VAL_flags 0
#define DT_N_S_soc_S_uart_60043000_IRQ_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_uart_60043000_IRQ_LEVEL 1
#define DT_N_S_soc_S_uart_60043000_COMPAT_MATCHES_espressif_esp32_usb_serial 1
#define DT_N_S_soc_S_uart_60043000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_uart_60043000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_COMPAT_MODEL_IDX_0 "esp32-usb-serial"
#define DT_N_S_soc_S_uart_60043000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_60043000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_60043000_P_reg {1610887168 /* 0x60043000 */, 1024 /* 0x400 */}
#define DT_N_S_soc_S_uart_60043000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_reg_IDX_0 1610887168
#define DT_N_S_soc_S_uart_60043000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_reg_IDX_1 1024
#define DT_N_S_soc_S_uart_60043000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_60043000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_status "okay"
#define DT_N_S_soc_S_uart_60043000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_uart_60043000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_uart_60043000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_60043000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_uart_60043000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_soc_S_uart_60043000_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60043000, status, 0)
#define DT_N_S_soc_S_uart_60043000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60043000, status, 0)
#define DT_N_S_soc_S_uart_60043000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60043000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60043000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60043000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60043000_P_status_LEN 1
#define DT_N_S_soc_S_uart_60043000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_compatible {"espressif,esp32-usb-serial"}
#define DT_N_S_soc_S_uart_60043000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_compatible_IDX_0 "espressif,esp32-usb-serial"
#define DT_N_S_soc_S_uart_60043000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-usb-serial
#define DT_N_S_soc_S_uart_60043000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_usb_serial
#define DT_N_S_soc_S_uart_60043000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_USB_SERIAL
#define DT_N_S_soc_S_uart_60043000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60043000, compatible, 0)
#define DT_N_S_soc_S_uart_60043000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60043000, compatible, 0)
#define DT_N_S_soc_S_uart_60043000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60043000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60043000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60043000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60043000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_60043000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_interrupts {26 /* 0x1a */, 3 /* 0x3 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_uart_60043000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_interrupts_IDX_0 26
#define DT_N_S_soc_S_uart_60043000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_uart_60043000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_interrupts_IDX_2 0
#define DT_N_S_soc_S_uart_60043000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_uart_60043000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_uart_60043000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_uart_60043000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60043000, interrupt_parent, 0)
#define DT_N_S_soc_S_uart_60043000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60043000, interrupt_parent, 0)
#define DT_N_S_soc_S_uart_60043000_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60043000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60043000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60043000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60043000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_uart_60043000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_60008000
#define DT_N_S_soc_S_uart_60043000_P_clocks_IDX_0_VAL_offset 3
#define DT_N_S_soc_S_uart_60043000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_60043000, clocks, 0)
#define DT_N_S_soc_S_uart_60043000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_60043000, clocks, 0)
#define DT_N_S_soc_S_uart_60043000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_60043000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60043000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_60043000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_60043000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_60043000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_uart_60043000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_60043000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_uart_60043000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_uart_60043000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/watchdog@6001f048
 *
 * Node identifier: DT_N_S_soc_S_watchdog_6001f048
 *
 * Binding (compatible = espressif,esp32-watchdog):
 *   $ZEPHYR_BASE/dts/bindings/watchdog/espressif,esp32-watchdog.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_watchdog_6001f048_PATH "/soc/watchdog@6001f048"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_watchdog_6001f048_FULL_NAME "watchdog@6001f048"
#define DT_N_S_soc_S_watchdog_6001f048_FULL_NAME_UNQUOTED watchdog@6001f048
#define DT_N_S_soc_S_watchdog_6001f048_FULL_NAME_TOKEN watchdog_6001f048
#define DT_N_S_soc_S_watchdog_6001f048_FULL_NAME_UPPER_TOKEN WATCHDOG_6001F048

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_watchdog_6001f048_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_watchdog_6001f048_CHILD_IDX 20

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_watchdog_6001f048_NODELABEL_NUM 1
#define DT_N_S_soc_S_watchdog_6001f048_FOREACH_NODELABEL(fn) fn(wdt0)
#define DT_N_S_soc_S_watchdog_6001f048_FOREACH_NODELABEL_VARGS(fn, ...) fn(wdt0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_6001f048_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_watchdog_6001f048_CHILD_NUM 0
#define DT_N_S_soc_S_watchdog_6001f048_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_watchdog_6001f048_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_watchdog_6001f048_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_watchdog_6001f048_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_watchdog_6001f048_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_watchdog_6001f048_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_watchdog_6001f048_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_watchdog_6001f048_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_watchdog_6001f048_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_watchdog_6001f048_ORD 45
#define DT_N_S_soc_S_watchdog_6001f048_ORD_STR_SORTABLE 00045

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_watchdog_6001f048_REQUIRES_ORDS \
	22, /* /soc */ \
	25, /* /soc/interrupt-controller@600c2000 */ \
	26, /* /soc/rtc@60008000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_watchdog_6001f048_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_watchdog_6001f048_EXISTS 1
#define DT_N_ALIAS_watchdog0                 DT_N_S_soc_S_watchdog_6001f048
#define DT_N_INST_0_espressif_esp32_watchdog DT_N_S_soc_S_watchdog_6001f048
#define DT_N_NODELABEL_wdt0                  DT_N_S_soc_S_watchdog_6001f048

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_watchdog_6001f048_REG_NUM 1
#define DT_N_S_soc_S_watchdog_6001f048_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_REG_IDX_0_VAL_ADDRESS 1610739784 /* 0x6001f048 */
#define DT_N_S_soc_S_watchdog_6001f048_REG_IDX_0_VAL_SIZE 32 /* 0x20 */
#define DT_N_S_soc_S_watchdog_6001f048_RANGES_NUM 0
#define DT_N_S_soc_S_watchdog_6001f048_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_watchdog_6001f048_IRQ_NUM 1
#define DT_N_S_soc_S_watchdog_6001f048_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_IRQ_IDX_0_VAL_irq 33
#define DT_N_S_soc_S_watchdog_6001f048_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_watchdog_6001f048_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_IRQ_IDX_0_VAL_flags 0
#define DT_N_S_soc_S_watchdog_6001f048_IRQ_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_watchdog_6001f048_IRQ_LEVEL 1
#define DT_N_S_soc_S_watchdog_6001f048_COMPAT_MATCHES_espressif_esp32_watchdog 1
#define DT_N_S_soc_S_watchdog_6001f048_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_watchdog_6001f048_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_COMPAT_MODEL_IDX_0 "esp32-watchdog"
#define DT_N_S_soc_S_watchdog_6001f048_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_watchdog_6001f048_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_watchdog_6001f048_P_reg {1610739784 /* 0x6001f048 */, 32 /* 0x20 */}
#define DT_N_S_soc_S_watchdog_6001f048_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_reg_IDX_0 1610739784
#define DT_N_S_soc_S_watchdog_6001f048_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_reg_IDX_1 32
#define DT_N_S_soc_S_watchdog_6001f048_P_reg_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_status "okay"
#define DT_N_S_soc_S_watchdog_6001f048_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_watchdog_6001f048_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_watchdog_6001f048_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_watchdog_6001f048_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_watchdog_6001f048_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_soc_S_watchdog_6001f048_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_6001f048, status, 0)
#define DT_N_S_soc_S_watchdog_6001f048_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_6001f048, status, 0)
#define DT_N_S_soc_S_watchdog_6001f048_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_6001f048, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_6001f048_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_6001f048, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_6001f048_P_status_LEN 1
#define DT_N_S_soc_S_watchdog_6001f048_P_status_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_compatible {"espressif,esp32-watchdog"}
#define DT_N_S_soc_S_watchdog_6001f048_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_compatible_IDX_0 "espressif,esp32-watchdog"
#define DT_N_S_soc_S_watchdog_6001f048_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-watchdog
#define DT_N_S_soc_S_watchdog_6001f048_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_watchdog
#define DT_N_S_soc_S_watchdog_6001f048_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_WATCHDOG
#define DT_N_S_soc_S_watchdog_6001f048_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_6001f048, compatible, 0)
#define DT_N_S_soc_S_watchdog_6001f048_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_6001f048, compatible, 0)
#define DT_N_S_soc_S_watchdog_6001f048_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_6001f048, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_6001f048_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_6001f048, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_6001f048_P_compatible_LEN 1
#define DT_N_S_soc_S_watchdog_6001f048_P_compatible_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupts {33 /* 0x21 */, 3 /* 0x3 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupts_IDX_0 33
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupts_IDX_2 0
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_6001f048, interrupt_parent, 0)
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_6001f048, interrupt_parent, 0)
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_6001f048, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_6001f048, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_watchdog_6001f048_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_60008000
#define DT_N_S_soc_S_watchdog_6001f048_P_clocks_IDX_0_VAL_offset 6
#define DT_N_S_soc_S_watchdog_6001f048_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_6001f048, clocks, 0)
#define DT_N_S_soc_S_watchdog_6001f048_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_6001f048, clocks, 0)
#define DT_N_S_soc_S_watchdog_6001f048_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_6001f048, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_6001f048_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_6001f048, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_6001f048_P_clocks_LEN 1
#define DT_N_S_soc_S_watchdog_6001f048_P_clocks_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_watchdog_6001f048_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_wakeup_source 0
#define DT_N_S_soc_S_watchdog_6001f048_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_watchdog_6001f048_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_watchdog_6001f048_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/watchdog@60020048
 *
 * Node identifier: DT_N_S_soc_S_watchdog_60020048
 *
 * Binding (compatible = espressif,esp32-watchdog):
 *   $ZEPHYR_BASE/dts/bindings/watchdog/espressif,esp32-watchdog.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_watchdog_60020048_PATH "/soc/watchdog@60020048"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_watchdog_60020048_FULL_NAME "watchdog@60020048"
#define DT_N_S_soc_S_watchdog_60020048_FULL_NAME_UNQUOTED watchdog@60020048
#define DT_N_S_soc_S_watchdog_60020048_FULL_NAME_TOKEN watchdog_60020048
#define DT_N_S_soc_S_watchdog_60020048_FULL_NAME_UPPER_TOKEN WATCHDOG_60020048

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_watchdog_60020048_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_watchdog_60020048_CHILD_IDX 21

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_watchdog_60020048_NODELABEL_NUM 1
#define DT_N_S_soc_S_watchdog_60020048_FOREACH_NODELABEL(fn) fn(wdt1)
#define DT_N_S_soc_S_watchdog_60020048_FOREACH_NODELABEL_VARGS(fn, ...) fn(wdt1, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_60020048_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_watchdog_60020048_CHILD_NUM 0
#define DT_N_S_soc_S_watchdog_60020048_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_watchdog_60020048_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_watchdog_60020048_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_watchdog_60020048_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_watchdog_60020048_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_watchdog_60020048_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_watchdog_60020048_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_watchdog_60020048_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_watchdog_60020048_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_watchdog_60020048_ORD 46
#define DT_N_S_soc_S_watchdog_60020048_ORD_STR_SORTABLE 00046

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_watchdog_60020048_REQUIRES_ORDS \
	22, /* /soc */ \
	25, /* /soc/interrupt-controller@600c2000 */ \
	26, /* /soc/rtc@60008000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_watchdog_60020048_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_watchdog_60020048_EXISTS 1
#define DT_N_INST_1_espressif_esp32_watchdog DT_N_S_soc_S_watchdog_60020048
#define DT_N_NODELABEL_wdt1                  DT_N_S_soc_S_watchdog_60020048

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_watchdog_60020048_REG_NUM 1
#define DT_N_S_soc_S_watchdog_60020048_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_REG_IDX_0_VAL_ADDRESS 1610743880 /* 0x60020048 */
#define DT_N_S_soc_S_watchdog_60020048_REG_IDX_0_VAL_SIZE 32 /* 0x20 */
#define DT_N_S_soc_S_watchdog_60020048_RANGES_NUM 0
#define DT_N_S_soc_S_watchdog_60020048_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_watchdog_60020048_IRQ_NUM 1
#define DT_N_S_soc_S_watchdog_60020048_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_IRQ_IDX_0_VAL_irq 35
#define DT_N_S_soc_S_watchdog_60020048_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_watchdog_60020048_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_IRQ_IDX_0_VAL_flags 0
#define DT_N_S_soc_S_watchdog_60020048_IRQ_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_watchdog_60020048_IRQ_LEVEL 1
#define DT_N_S_soc_S_watchdog_60020048_COMPAT_MATCHES_espressif_esp32_watchdog 1
#define DT_N_S_soc_S_watchdog_60020048_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_watchdog_60020048_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_COMPAT_MODEL_IDX_0 "esp32-watchdog"
#define DT_N_S_soc_S_watchdog_60020048_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_watchdog_60020048_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_watchdog_60020048_P_reg {1610743880 /* 0x60020048 */, 32 /* 0x20 */}
#define DT_N_S_soc_S_watchdog_60020048_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_reg_IDX_0 1610743880
#define DT_N_S_soc_S_watchdog_60020048_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_reg_IDX_1 32
#define DT_N_S_soc_S_watchdog_60020048_P_reg_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_status "disabled"
#define DT_N_S_soc_S_watchdog_60020048_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_watchdog_60020048_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_watchdog_60020048_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_watchdog_60020048_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_watchdog_60020048_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_status_IDX_0_ENUM_IDX 2
#define DT_N_S_soc_S_watchdog_60020048_P_status_IDX_0_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_60020048, status, 0)
#define DT_N_S_soc_S_watchdog_60020048_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_60020048, status, 0)
#define DT_N_S_soc_S_watchdog_60020048_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_60020048, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_60020048_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_60020048, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_60020048_P_status_LEN 1
#define DT_N_S_soc_S_watchdog_60020048_P_status_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_compatible {"espressif,esp32-watchdog"}
#define DT_N_S_soc_S_watchdog_60020048_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_compatible_IDX_0 "espressif,esp32-watchdog"
#define DT_N_S_soc_S_watchdog_60020048_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-watchdog
#define DT_N_S_soc_S_watchdog_60020048_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_watchdog
#define DT_N_S_soc_S_watchdog_60020048_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_WATCHDOG
#define DT_N_S_soc_S_watchdog_60020048_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_60020048, compatible, 0)
#define DT_N_S_soc_S_watchdog_60020048_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_60020048, compatible, 0)
#define DT_N_S_soc_S_watchdog_60020048_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_60020048, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_60020048_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_60020048, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_60020048_P_compatible_LEN 1
#define DT_N_S_soc_S_watchdog_60020048_P_compatible_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_interrupts {35 /* 0x23 */, 3 /* 0x3 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_watchdog_60020048_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_interrupts_IDX_0 35
#define DT_N_S_soc_S_watchdog_60020048_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_watchdog_60020048_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_interrupts_IDX_2 0
#define DT_N_S_soc_S_watchdog_60020048_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_watchdog_60020048_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_watchdog_60020048_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_watchdog_60020048_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_60020048, interrupt_parent, 0)
#define DT_N_S_soc_S_watchdog_60020048_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_60020048, interrupt_parent, 0)
#define DT_N_S_soc_S_watchdog_60020048_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_60020048, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_60020048_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_60020048, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_60020048_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_watchdog_60020048_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_60008000
#define DT_N_S_soc_S_watchdog_60020048_P_clocks_IDX_0_VAL_offset 7
#define DT_N_S_soc_S_watchdog_60020048_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_watchdog_60020048, clocks, 0)
#define DT_N_S_soc_S_watchdog_60020048_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_watchdog_60020048, clocks, 0)
#define DT_N_S_soc_S_watchdog_60020048_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_watchdog_60020048, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_60020048_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_watchdog_60020048, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_watchdog_60020048_P_clocks_LEN 1
#define DT_N_S_soc_S_watchdog_60020048_P_clocks_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_watchdog_60020048_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_wakeup_source 0
#define DT_N_S_soc_S_watchdog_60020048_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_watchdog_60020048_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_watchdog_60020048_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/xt_wdt@60008004
 *
 * Node identifier: DT_N_S_soc_S_xt_wdt_60008004
 *
 * Binding (compatible = espressif,esp32-xt-wdt):
 *   $ZEPHYR_BASE/dts/bindings/watchdog/espressif,esp32-xt-wdt.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_xt_wdt_60008004_PATH "/soc/xt_wdt@60008004"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_xt_wdt_60008004_FULL_NAME "xt_wdt@60008004"
#define DT_N_S_soc_S_xt_wdt_60008004_FULL_NAME_UNQUOTED xt_wdt@60008004
#define DT_N_S_soc_S_xt_wdt_60008004_FULL_NAME_TOKEN xt_wdt_60008004
#define DT_N_S_soc_S_xt_wdt_60008004_FULL_NAME_UPPER_TOKEN XT_WDT_60008004

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_xt_wdt_60008004_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_xt_wdt_60008004_CHILD_IDX 5

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_xt_wdt_60008004_NODELABEL_NUM 1
#define DT_N_S_soc_S_xt_wdt_60008004_FOREACH_NODELABEL(fn) fn(xt_wdt)
#define DT_N_S_soc_S_xt_wdt_60008004_FOREACH_NODELABEL_VARGS(fn, ...) fn(xt_wdt, __VA_ARGS__)
#define DT_N_S_soc_S_xt_wdt_60008004_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_xt_wdt_60008004_CHILD_NUM 0
#define DT_N_S_soc_S_xt_wdt_60008004_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_xt_wdt_60008004_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_xt_wdt_60008004_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_xt_wdt_60008004_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_xt_wdt_60008004_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_xt_wdt_60008004_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_xt_wdt_60008004_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_xt_wdt_60008004_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_xt_wdt_60008004_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_xt_wdt_60008004_ORD 47
#define DT_N_S_soc_S_xt_wdt_60008004_ORD_STR_SORTABLE 00047

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_xt_wdt_60008004_REQUIRES_ORDS \
	22, /* /soc */ \
	25, /* /soc/interrupt-controller@600c2000 */ \
	26, /* /soc/rtc@60008000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_xt_wdt_60008004_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_xt_wdt_60008004_EXISTS 1
#define DT_N_INST_0_espressif_esp32_xt_wdt DT_N_S_soc_S_xt_wdt_60008004
#define DT_N_NODELABEL_xt_wdt              DT_N_S_soc_S_xt_wdt_60008004

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_xt_wdt_60008004_REG_NUM 1
#define DT_N_S_soc_S_xt_wdt_60008004_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_xt_wdt_60008004_REG_IDX_0_VAL_ADDRESS 1610645508 /* 0x60008004 */
#define DT_N_S_soc_S_xt_wdt_60008004_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_xt_wdt_60008004_RANGES_NUM 0
#define DT_N_S_soc_S_xt_wdt_60008004_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_xt_wdt_60008004_IRQ_NUM 1
#define DT_N_S_soc_S_xt_wdt_60008004_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_xt_wdt_60008004_IRQ_IDX_0_VAL_irq 27
#define DT_N_S_soc_S_xt_wdt_60008004_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_xt_wdt_60008004_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_xt_wdt_60008004_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_xt_wdt_60008004_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_xt_wdt_60008004_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_xt_wdt_60008004_IRQ_IDX_0_VAL_flags 0
#define DT_N_S_soc_S_xt_wdt_60008004_IRQ_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_xt_wdt_60008004_IRQ_IDX_0_CONTROLLER DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_xt_wdt_60008004_IRQ_LEVEL 1
#define DT_N_S_soc_S_xt_wdt_60008004_COMPAT_MATCHES_espressif_esp32_xt_wdt 1
#define DT_N_S_soc_S_xt_wdt_60008004_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_xt_wdt_60008004_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_xt_wdt_60008004_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_xt_wdt_60008004_COMPAT_MODEL_IDX_0 "esp32-xt-wdt"
#define DT_N_S_soc_S_xt_wdt_60008004_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_xt_wdt_60008004_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_xt_wdt_60008004_P_reg {1610645508 /* 0x60008004 */, 4 /* 0x4 */}
#define DT_N_S_soc_S_xt_wdt_60008004_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_xt_wdt_60008004_P_reg_IDX_0 1610645508
#define DT_N_S_soc_S_xt_wdt_60008004_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_xt_wdt_60008004_P_reg_IDX_1 4
#define DT_N_S_soc_S_xt_wdt_60008004_P_reg_EXISTS 1
#define DT_N_S_soc_S_xt_wdt_60008004_P_status "disabled"
#define DT_N_S_soc_S_xt_wdt_60008004_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_xt_wdt_60008004_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_xt_wdt_60008004_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_xt_wdt_60008004_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_xt_wdt_60008004_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_xt_wdt_60008004_P_status_IDX_0_ENUM_IDX 2
#define DT_N_S_soc_S_xt_wdt_60008004_P_status_IDX_0_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_xt_wdt_60008004_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_xt_wdt_60008004, status, 0)
#define DT_N_S_soc_S_xt_wdt_60008004_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_xt_wdt_60008004, status, 0)
#define DT_N_S_soc_S_xt_wdt_60008004_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_xt_wdt_60008004, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_xt_wdt_60008004_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_xt_wdt_60008004, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_xt_wdt_60008004_P_status_LEN 1
#define DT_N_S_soc_S_xt_wdt_60008004_P_status_EXISTS 1
#define DT_N_S_soc_S_xt_wdt_60008004_P_compatible {"espressif,esp32-xt-wdt"}
#define DT_N_S_soc_S_xt_wdt_60008004_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_xt_wdt_60008004_P_compatible_IDX_0 "espressif,esp32-xt-wdt"
#define DT_N_S_soc_S_xt_wdt_60008004_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-xt-wdt
#define DT_N_S_soc_S_xt_wdt_60008004_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_xt_wdt
#define DT_N_S_soc_S_xt_wdt_60008004_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_XT_WDT
#define DT_N_S_soc_S_xt_wdt_60008004_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_xt_wdt_60008004, compatible, 0)
#define DT_N_S_soc_S_xt_wdt_60008004_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_xt_wdt_60008004, compatible, 0)
#define DT_N_S_soc_S_xt_wdt_60008004_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_xt_wdt_60008004, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_xt_wdt_60008004_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_xt_wdt_60008004, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_xt_wdt_60008004_P_compatible_LEN 1
#define DT_N_S_soc_S_xt_wdt_60008004_P_compatible_EXISTS 1
#define DT_N_S_soc_S_xt_wdt_60008004_P_interrupts {27 /* 0x1b */, 3 /* 0x3 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_xt_wdt_60008004_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_xt_wdt_60008004_P_interrupts_IDX_0 27
#define DT_N_S_soc_S_xt_wdt_60008004_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_xt_wdt_60008004_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_xt_wdt_60008004_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_xt_wdt_60008004_P_interrupts_IDX_2 0
#define DT_N_S_soc_S_xt_wdt_60008004_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_xt_wdt_60008004_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_xt_wdt_60008004_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_xt_wdt_60008004_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_600c2000
#define DT_N_S_soc_S_xt_wdt_60008004_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_xt_wdt_60008004_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_xt_wdt_60008004, interrupt_parent, 0)
#define DT_N_S_soc_S_xt_wdt_60008004_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_xt_wdt_60008004, interrupt_parent, 0)
#define DT_N_S_soc_S_xt_wdt_60008004_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_xt_wdt_60008004, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_xt_wdt_60008004_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_xt_wdt_60008004, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_xt_wdt_60008004_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_xt_wdt_60008004_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_xt_wdt_60008004_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_xt_wdt_60008004_P_clocks_IDX_0_PH DT_N_S_soc_S_rtc_60008000
#define DT_N_S_soc_S_xt_wdt_60008004_P_clocks_IDX_0_VAL_offset 27
#define DT_N_S_soc_S_xt_wdt_60008004_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_xt_wdt_60008004_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_xt_wdt_60008004, clocks, 0)
#define DT_N_S_soc_S_xt_wdt_60008004_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_xt_wdt_60008004, clocks, 0)
#define DT_N_S_soc_S_xt_wdt_60008004_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_xt_wdt_60008004, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_xt_wdt_60008004_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_xt_wdt_60008004, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_xt_wdt_60008004_P_clocks_LEN 1
#define DT_N_S_soc_S_xt_wdt_60008004_P_clocks_EXISTS 1
#define DT_N_S_soc_S_xt_wdt_60008004_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_xt_wdt_60008004_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_xt_wdt_60008004_P_wakeup_source 0
#define DT_N_S_soc_S_xt_wdt_60008004_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_xt_wdt_60008004_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_xt_wdt_60008004_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@60002000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_60002000
 *
 * Binding (compatible = espressif,esp32-flash-controller):
 *   $ZEPHYR_BASE/dts/bindings/flash_controller/espressif,esp32-flash-controller.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_60002000_PATH "/soc/flash-controller@60002000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_60002000_FULL_NAME "flash-controller@60002000"
#define DT_N_S_soc_S_flash_controller_60002000_FULL_NAME_UNQUOTED flash-controller@60002000
#define DT_N_S_soc_S_flash_controller_60002000_FULL_NAME_TOKEN flash_controller_60002000
#define DT_N_S_soc_S_flash_controller_60002000_FULL_NAME_UPPER_TOKEN FLASH_CONTROLLER_60002000

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_flash_controller_60002000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_60002000_CHILD_IDX 7

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_flash_controller_60002000_NODELABEL_NUM 1
#define DT_N_S_soc_S_flash_controller_60002000_FOREACH_NODELABEL(fn) fn(flash)
#define DT_N_S_soc_S_flash_controller_60002000_FOREACH_NODELABEL_VARGS(fn, ...) fn(flash, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_60002000_CHILD_NUM 1
#define DT_N_S_soc_S_flash_controller_60002000_CHILD_NUM_STATUS_OKAY 1
#define DT_N_S_soc_S_flash_controller_60002000_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_60002000_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_60002000_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_60002000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_60002000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_60002000_ORD 48
#define DT_N_S_soc_S_flash_controller_60002000_ORD_STR_SORTABLE 00048

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_60002000_REQUIRES_ORDS \
	22, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_60002000_SUPPORTS_ORDS \
	49, /* /soc/flash-controller@60002000/flash@0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_60002000_EXISTS 1
#define DT_N_INST_0_espressif_esp32_flash_controller DT_N_S_soc_S_flash_controller_60002000
#define DT_N_NODELABEL_flash                         DT_N_S_soc_S_flash_controller_60002000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_60002000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_60002000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_REG_IDX_0_VAL_ADDRESS 1610620928 /* 0x60002000 */
#define DT_N_S_soc_S_flash_controller_60002000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_flash_controller_60002000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_IRQ_LEVEL 0
#define DT_N_S_soc_S_flash_controller_60002000_COMPAT_MATCHES_espressif_esp32_flash_controller 1
#define DT_N_S_soc_S_flash_controller_60002000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_COMPAT_VENDOR_IDX_0 "Espressif Systems"
#define DT_N_S_soc_S_flash_controller_60002000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_COMPAT_MODEL_IDX_0 "esp32-flash-controller"
#define DT_N_S_soc_S_flash_controller_60002000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_60002000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_60002000_P_reg {1610620928 /* 0x60002000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_flash_controller_60002000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_P_reg_IDX_0 1610620928
#define DT_N_S_soc_S_flash_controller_60002000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_flash_controller_60002000_P_reg_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_P_compatible {"espressif,esp32-flash-controller"}
#define DT_N_S_soc_S_flash_controller_60002000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_P_compatible_IDX_0 "espressif,esp32-flash-controller"
#define DT_N_S_soc_S_flash_controller_60002000_P_compatible_IDX_0_STRING_UNQUOTED espressif,esp32-flash-controller
#define DT_N_S_soc_S_flash_controller_60002000_P_compatible_IDX_0_STRING_TOKEN espressif_esp32_flash_controller
#define DT_N_S_soc_S_flash_controller_60002000_P_compatible_IDX_0_STRING_UPPER_TOKEN ESPRESSIF_ESP32_FLASH_CONTROLLER
#define DT_N_S_soc_S_flash_controller_60002000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_60002000, compatible, 0)
#define DT_N_S_soc_S_flash_controller_60002000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000, compatible, 0)
#define DT_N_S_soc_S_flash_controller_60002000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_P_compatible_LEN 1
#define DT_N_S_soc_S_flash_controller_60002000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_flash_controller_60002000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_P_wakeup_source 0
#define DT_N_S_soc_S_flash_controller_60002000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_flash_controller_60002000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@60002000/flash@0
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_60002000_S_flash_0
 *
 * Binding (compatible = soc-nv-flash):
 *   $ZEPHYR_BASE/dts/bindings/mtd/soc-nv-flash.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_PATH "/soc/flash-controller@60002000/flash@0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_FULL_NAME "flash@0"
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_FULL_NAME_UNQUOTED flash@0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_FULL_NAME_TOKEN flash_0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_FULL_NAME_UPPER_TOKEN FLASH_0

/* Node parent (/soc/flash-controller@60002000) identifier: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_PARENT DT_N_S_soc_S_flash_controller_60002000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_NODELABEL_NUM 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_FOREACH_NODELABEL(fn) fn(flash0)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_FOREACH_NODELABEL_VARGS(fn, ...) fn(flash0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc_S_flash_controller_60002000) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_CHILD_NUM 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_CHILD_NUM_STATUS_OKAY 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_ORD 49
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_ORD_STR_SORTABLE 00049

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_REQUIRES_ORDS \
	48, /* /soc/flash-controller@60002000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_SUPPORTS_ORDS \
	50, /* /soc/flash-controller@60002000/flash@0/partitions */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_EXISTS 1
#define DT_N_INST_0_soc_nv_flash DT_N_S_soc_S_flash_controller_60002000_S_flash_0
#define DT_N_NODELABEL_flash0    DT_N_S_soc_S_flash_controller_60002000_S_flash_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_REG_IDX_0_VAL_SIZE 4194304 /* 0x400000 */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_IRQ_LEVEL 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_COMPAT_MATCHES_soc_nv_flash 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_erase_block_size 4096
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_erase_block_size_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_write_block_size 4
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_write_block_size_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_compatible {"soc-nv-flash"}
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_compatible_IDX_0 "soc-nv-flash"
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_compatible_IDX_0_STRING_UNQUOTED soc-nv-flash
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_compatible_IDX_0_STRING_TOKEN soc_nv_flash
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_compatible_IDX_0_STRING_UPPER_TOKEN SOC_NV_FLASH
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, compatible, 0)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, compatible, 0)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_compatible_LEN 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_reg {0 /* 0x0 */, 4194304 /* 0x400000 */}
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_reg_IDX_0 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_reg_IDX_1 4194304
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_reg_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_wakeup_source 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@60002000/flash@0/partitions
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions
 *
 * Binding (compatible = fixed-partitions):
 *   $ZEPHYR_BASE/dts/bindings/mtd/fixed-partitions.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_PATH "/soc/flash-controller@60002000/flash@0/partitions"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_FULL_NAME "partitions"
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_FULL_NAME_UNQUOTED partitions
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_FULL_NAME_TOKEN partitions
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_FULL_NAME_UPPER_TOKEN PARTITIONS

/* Node parent (/soc/flash-controller@60002000/flash@0) identifier: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_PARENT DT_N_S_soc_S_flash_controller_60002000_S_flash_0

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_NODELABEL_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_FOREACH_NODELABEL(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_FOREACH_NODELABEL_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0) fn(DT_N_S_soc_S_flash_controller_60002000) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_CHILD_NUM 6
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_CHILD_NUM_STATUS_OKAY 6
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_ORD 50
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_ORD_STR_SORTABLE 00050

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_REQUIRES_ORDS \
	49, /* /soc/flash-controller@60002000/flash@0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_SUPPORTS_ORDS \
	51, /* /soc/flash-controller@60002000/flash@0/partitions/partition@0 */ \
	52, /* /soc/flash-controller@60002000/flash@0/partitions/partition@20000 */ \
	53, /* /soc/flash-controller@60002000/flash@0/partitions/partition@1F0000 */ \
	54, /* /soc/flash-controller@60002000/flash@0/partitions/partition@3C0000 */ \
	55, /* /soc/flash-controller@60002000/flash@0/partitions/partition@3E0000 */ \
	56, /* /soc/flash-controller@60002000/flash@0/partitions/partition@3F0000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_EXISTS 1
#define DT_N_INST_0_fixed_partitions DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_REG_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_IRQ_LEVEL 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_COMPAT_MATCHES_fixed_partitions 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /soc/flash-controller@60002000/flash@0/partitions/partition@0
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_PATH "/soc/flash-controller@60002000/flash@0/partitions/partition@0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_FULL_NAME "partition@0"
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_FULL_NAME_UNQUOTED partition@0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_FULL_NAME_TOKEN partition_0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_FULL_NAME_UPPER_TOKEN PARTITION_0

/* Node parent (/soc/flash-controller@60002000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_PARENT DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_NODELABEL_NUM 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_FOREACH_NODELABEL(fn) fn(boot_partition)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_FOREACH_NODELABEL_VARGS(fn, ...) fn(boot_partition, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0) fn(DT_N_S_soc_S_flash_controller_60002000) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_CHILD_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_ORD 51
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_ORD_STR_SORTABLE 00051

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_REQUIRES_ORDS \
	50, /* /soc/flash-controller@60002000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_EXISTS 1
#define DT_N_NODELABEL_boot_partition DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_IRQ_LEVEL 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_PARTITION_ID 0

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_label "mcuboot"
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_label_STRING_UNQUOTED mcuboot
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_label_STRING_TOKEN mcuboot
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_label_STRING_UPPER_TOKEN MCUBOOT
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_label_IDX_0 "mcuboot"
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_label_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 0)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 0)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_label_LEN 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_read_only 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_reg {0 /* 0x0 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_0 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_1 65536
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@60002000/flash@0/partitions/partition@20000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_PATH "/soc/flash-controller@60002000/flash@0/partitions/partition@20000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_FULL_NAME "partition@20000"
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_FULL_NAME_UNQUOTED partition@20000
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_FULL_NAME_TOKEN partition_20000
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_FULL_NAME_UPPER_TOKEN PARTITION_20000

/* Node parent (/soc/flash-controller@60002000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_PARENT DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_CHILD_IDX 1

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_NODELABEL_NUM 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_FOREACH_NODELABEL(fn) fn(slot0_partition)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_FOREACH_NODELABEL_VARGS(fn, ...) fn(slot0_partition, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0) fn(DT_N_S_soc_S_flash_controller_60002000) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_CHILD_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_ORD 52
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_ORD_STR_SORTABLE 00052

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_REQUIRES_ORDS \
	50, /* /soc/flash-controller@60002000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_EXISTS 1
#define DT_N_NODELABEL_slot0_partition DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_REG_IDX_0_VAL_ADDRESS 131072 /* 0x20000 */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_REG_IDX_0_VAL_SIZE 1900544 /* 0x1d0000 */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_IRQ_LEVEL 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_PARTITION_ID 1

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_P_label "image-0"
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_P_label_STRING_UNQUOTED image-0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_P_label_STRING_TOKEN image_0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_P_label_STRING_UPPER_TOKEN IMAGE_0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_P_label_IDX_0 "image-0"
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_P_label_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000, label, 0)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000, label, 0)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_P_label_LEN 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_P_read_only 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_P_reg {131072 /* 0x20000 */, 1900544 /* 0x1d0000 */}
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_P_reg_IDX_0 131072
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_P_reg_IDX_1 1900544
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@60002000/flash@0/partitions/partition@1F0000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_PATH "/soc/flash-controller@60002000/flash@0/partitions/partition@1F0000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_FULL_NAME "partition@1F0000"
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_FULL_NAME_UNQUOTED partition@1F0000
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_FULL_NAME_TOKEN partition_1F0000
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_FULL_NAME_UPPER_TOKEN PARTITION_1F0000

/* Node parent (/soc/flash-controller@60002000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_PARENT DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_CHILD_IDX 2

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_NODELABEL_NUM 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_FOREACH_NODELABEL(fn) fn(slot1_partition)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_FOREACH_NODELABEL_VARGS(fn, ...) fn(slot1_partition, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0) fn(DT_N_S_soc_S_flash_controller_60002000) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_CHILD_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_ORD 53
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_ORD_STR_SORTABLE 00053

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_REQUIRES_ORDS \
	50, /* /soc/flash-controller@60002000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_EXISTS 1
#define DT_N_NODELABEL_slot1_partition DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_REG_IDX_0_VAL_ADDRESS 2031616 /* 0x1f0000 */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_REG_IDX_0_VAL_SIZE 1900544 /* 0x1d0000 */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_IRQ_LEVEL 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_PARTITION_ID 2

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_P_label "image-1"
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_P_label_STRING_UNQUOTED image-1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_P_label_STRING_TOKEN image_1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_P_label_STRING_UPPER_TOKEN IMAGE_1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_P_label_IDX_0 "image-1"
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_P_label_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000, label, 0)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000, label, 0)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_P_label_LEN 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_P_read_only 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_P_reg {2031616 /* 0x1f0000 */, 1900544 /* 0x1d0000 */}
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_P_reg_IDX_0 2031616
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_P_reg_IDX_1 1900544
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@60002000/flash@0/partitions/partition@3C0000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_PATH "/soc/flash-controller@60002000/flash@0/partitions/partition@3C0000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_FULL_NAME "partition@3C0000"
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_FULL_NAME_UNQUOTED partition@3C0000
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_FULL_NAME_TOKEN partition_3C0000
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_FULL_NAME_UPPER_TOKEN PARTITION_3C0000

/* Node parent (/soc/flash-controller@60002000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_PARENT DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_CHILD_IDX 3

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_NODELABEL_NUM 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_FOREACH_NODELABEL(fn) fn(storage_partition)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_FOREACH_NODELABEL_VARGS(fn, ...) fn(storage_partition, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0) fn(DT_N_S_soc_S_flash_controller_60002000) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_CHILD_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_ORD 54
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_ORD_STR_SORTABLE 00054

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_REQUIRES_ORDS \
	50, /* /soc/flash-controller@60002000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_EXISTS 1
#define DT_N_NODELABEL_storage_partition DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_REG_IDX_0_VAL_ADDRESS 3932160 /* 0x3c0000 */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_REG_IDX_0_VAL_SIZE 131072 /* 0x20000 */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_IRQ_LEVEL 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_PARTITION_ID 3

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_P_label "storage"
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_P_label_STRING_UNQUOTED storage
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_P_label_STRING_TOKEN storage
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_P_label_STRING_UPPER_TOKEN STORAGE
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_P_label_IDX_0 "storage"
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_P_label_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000, label, 0)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000, label, 0)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_P_label_LEN 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_P_read_only 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_P_reg {3932160 /* 0x3c0000 */, 131072 /* 0x20000 */}
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_P_reg_IDX_0 3932160
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_P_reg_IDX_1 131072
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@60002000/flash@0/partitions/partition@3E0000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_PATH "/soc/flash-controller@60002000/flash@0/partitions/partition@3E0000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_FULL_NAME "partition@3E0000"
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_FULL_NAME_UNQUOTED partition@3E0000
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_FULL_NAME_TOKEN partition_3E0000
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_FULL_NAME_UPPER_TOKEN PARTITION_3E0000

/* Node parent (/soc/flash-controller@60002000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_PARENT DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_CHILD_IDX 4

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_NODELABEL_NUM 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_FOREACH_NODELABEL(fn) fn(scratch_partition)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_FOREACH_NODELABEL_VARGS(fn, ...) fn(scratch_partition, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0) fn(DT_N_S_soc_S_flash_controller_60002000) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_CHILD_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_ORD 55
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_ORD_STR_SORTABLE 00055

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_REQUIRES_ORDS \
	50, /* /soc/flash-controller@60002000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_EXISTS 1
#define DT_N_NODELABEL_scratch_partition DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_REG_IDX_0_VAL_ADDRESS 4063232 /* 0x3e0000 */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_IRQ_LEVEL 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_PARTITION_ID 4

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_P_label "image-scratch"
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_P_label_STRING_UNQUOTED image-scratch
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_P_label_STRING_TOKEN image_scratch
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_P_label_STRING_UPPER_TOKEN IMAGE_SCRATCH
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_P_label_IDX_0 "image-scratch"
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_P_label_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000, label, 0)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000, label, 0)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_P_label_LEN 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_P_read_only 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_P_reg {4063232 /* 0x3e0000 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_P_reg_IDX_0 4063232
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@60002000/flash@0/partitions/partition@3F0000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_PATH "/soc/flash-controller@60002000/flash@0/partitions/partition@3F0000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_FULL_NAME "partition@3F0000"
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_FULL_NAME_UNQUOTED partition@3F0000
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_FULL_NAME_TOKEN partition_3F0000
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_FULL_NAME_UPPER_TOKEN PARTITION_3F0000

/* Node parent (/soc/flash-controller@60002000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_PARENT DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_CHILD_IDX 5

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_NODELABEL_NUM 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_FOREACH_NODELABEL(fn) fn(coredump_partition)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_FOREACH_NODELABEL_VARGS(fn, ...) fn(coredump_partition, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0) fn(DT_N_S_soc_S_flash_controller_60002000) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_CHILD_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_ORD 56
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_ORD_STR_SORTABLE 00056

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_REQUIRES_ORDS \
	50, /* /soc/flash-controller@60002000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_EXISTS 1
#define DT_N_NODELABEL_coredump_partition DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_REG_IDX_0_VAL_ADDRESS 4128768 /* 0x3f0000 */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_IRQ_LEVEL 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_PARTITION_ID 5

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_P_label "coredump-partition"
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_P_label_STRING_UNQUOTED coredump-partition
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_P_label_STRING_TOKEN coredump_partition
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_P_label_STRING_UPPER_TOKEN COREDUMP_PARTITION
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_P_label_IDX_0 "coredump-partition"
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_P_label_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000, label, 0)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000, label, 0)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_P_label_LEN 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_P_read_only 0
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_P_reg {4128768 /* 0x3f0000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_P_reg_IDX_0 4128768
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000_P_reg_EXISTS 1

/*
 * Chosen nodes
 */
#define DT_CHOSEN_zephyr_canbus                  DT_N_S_soc_S_can_6002b000
#define DT_CHOSEN_zephyr_canbus_EXISTS           1
#define DT_CHOSEN_zephyr_entropy                 DT_N_S_soc_S_trng_3ff700b0
#define DT_CHOSEN_zephyr_entropy_EXISTS          1
#define DT_CHOSEN_zephyr_flash_controller        DT_N_S_soc_S_flash_controller_60002000
#define DT_CHOSEN_zephyr_flash_controller_EXISTS 1
#define DT_CHOSEN_zephyr_bt_hci                  DT_N_S_esp32_bt_hci
#define DT_CHOSEN_zephyr_bt_hci_EXISTS           1
#define DT_CHOSEN_zephyr_sram                    DT_N_S_soc_S_memory_3fc80000
#define DT_CHOSEN_zephyr_sram_EXISTS             1
#define DT_CHOSEN_zephyr_console                 DT_N_S_soc_S_uart_60043000
#define DT_CHOSEN_zephyr_console_EXISTS          1
#define DT_CHOSEN_zephyr_shell_uart              DT_N_S_soc_S_uart_60043000
#define DT_CHOSEN_zephyr_shell_uart_EXISTS       1
#define DT_CHOSEN_zephyr_flash                   DT_N_S_soc_S_flash_controller_60002000_S_flash_0
#define DT_CHOSEN_zephyr_flash_EXISTS            1
#define DT_CHOSEN_zephyr_code_partition          DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000
#define DT_CHOSEN_zephyr_code_partition_EXISTS   1

/* Macros for iterating over all nodes and enabled nodes */
#define DT_FOREACH_HELPER(fn) fn(DT_N) fn(DT_N_S_aliases) fn(DT_N_S_chosen) fn(DT_N_S_cpus) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_power_states) fn(DT_N_S_cpus_S_power_states_S_light_sleep) fn(DT_N_S_cpus_S_power_states_S_deep_sleep) fn(DT_N_S_pin_controller) fn(DT_N_S_pin_controller_S_uart0_default) fn(DT_N_S_pin_controller_S_uart0_default_S_group1) fn(DT_N_S_pin_controller_S_uart0_default_S_group2) fn(DT_N_S_pin_controller_S_spim2_default) fn(DT_N_S_pin_controller_S_spim2_default_S_group1) fn(DT_N_S_pin_controller_S_spim2_default_S_group2) fn(DT_N_S_pin_controller_S_i2c0_default) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1) fn(DT_N_S_pin_controller_S_twai_default) fn(DT_N_S_pin_controller_S_twai_default_S_group1) fn(DT_N_S_wifi) fn(DT_N_S_esp32_bt_hci) fn(DT_N_S_soc) fn(DT_N_S_soc_S_memory_4037c000) fn(DT_N_S_soc_S_memory_3fc80000) fn(DT_N_S_soc_S_interrupt_controller_600c2000) fn(DT_N_S_soc_S_systimer_60023000) fn(DT_N_S_soc_S_rtc_60008000) fn(DT_N_S_soc_S_xt_wdt_60008004) fn(DT_N_S_soc_S_rtc_timer_60008004) fn(DT_N_S_soc_S_flash_controller_60002000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000) fn(DT_N_S_soc_S_gpio_60004000) fn(DT_N_S_soc_S_i2c_60013000) fn(DT_N_S_soc_S_i2s_6002d000) fn(DT_N_S_soc_S_uart_60000000) fn(DT_N_S_soc_S_uart_60010000) fn(DT_N_S_soc_S_ledc_60019000) fn(DT_N_S_soc_S_uart_60043000) fn(DT_N_S_soc_S_counter_6001f000) fn(DT_N_S_soc_S_counter_60020000) fn(DT_N_S_soc_S_trng_3ff700b0) fn(DT_N_S_soc_S_can_6002b000) fn(DT_N_S_soc_S_spi_60024000) fn(DT_N_S_soc_S_watchdog_6001f048) fn(DT_N_S_soc_S_watchdog_60020048) fn(DT_N_S_soc_S_coretemp_60040058) fn(DT_N_S_soc_S_adc_60040000) fn(DT_N_S_soc_S_adc_60040004) fn(DT_N_S_soc_S_dma_6003f000) fn(DT_N_S_connector)
#define DT_FOREACH_OKAY_HELPER(fn) fn(DT_N) fn(DT_N_S_aliases) fn(DT_N_S_chosen) fn(DT_N_S_cpus) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_power_states) fn(DT_N_S_cpus_S_power_states_S_light_sleep) fn(DT_N_S_cpus_S_power_states_S_deep_sleep) fn(DT_N_S_pin_controller) fn(DT_N_S_pin_controller_S_uart0_default) fn(DT_N_S_pin_controller_S_uart0_default_S_group1) fn(DT_N_S_pin_controller_S_uart0_default_S_group2) fn(DT_N_S_pin_controller_S_spim2_default) fn(DT_N_S_pin_controller_S_spim2_default_S_group1) fn(DT_N_S_pin_controller_S_spim2_default_S_group2) fn(DT_N_S_pin_controller_S_i2c0_default) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1) fn(DT_N_S_pin_controller_S_twai_default) fn(DT_N_S_pin_controller_S_twai_default_S_group1) fn(DT_N_S_wifi) fn(DT_N_S_esp32_bt_hci) fn(DT_N_S_soc) fn(DT_N_S_soc_S_memory_4037c000) fn(DT_N_S_soc_S_memory_3fc80000) fn(DT_N_S_soc_S_interrupt_controller_600c2000) fn(DT_N_S_soc_S_systimer_60023000) fn(DT_N_S_soc_S_rtc_60008000) fn(DT_N_S_soc_S_rtc_timer_60008004) fn(DT_N_S_soc_S_flash_controller_60002000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000) fn(DT_N_S_soc_S_gpio_60004000) fn(DT_N_S_soc_S_i2c_60013000) fn(DT_N_S_soc_S_uart_60000000) fn(DT_N_S_soc_S_uart_60043000) fn(DT_N_S_soc_S_counter_6001f000) fn(DT_N_S_soc_S_counter_60020000) fn(DT_N_S_soc_S_trng_3ff700b0) fn(DT_N_S_soc_S_can_6002b000) fn(DT_N_S_soc_S_spi_60024000) fn(DT_N_S_soc_S_watchdog_6001f048) fn(DT_N_S_connector)
#define DT_FOREACH_VARGS_HELPER(fn, ...) fn(DT_N, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_light_sleep, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_deep_sleep, __VA_ARGS__) fn(DT_N_S_pin_controller, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart0_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart0_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart0_default_S_group2, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim2_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim2_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim2_default_S_group2, __VA_ARGS__) fn(DT_N_S_pin_controller_S_i2c0_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_twai_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_twai_default_S_group1, __VA_ARGS__) fn(DT_N_S_wifi, __VA_ARGS__) fn(DT_N_S_esp32_bt_hci, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_soc_S_memory_4037c000, __VA_ARGS__) fn(DT_N_S_soc_S_memory_3fc80000, __VA_ARGS__) fn(DT_N_S_soc_S_interrupt_controller_600c2000, __VA_ARGS__) fn(DT_N_S_soc_S_systimer_60023000, __VA_ARGS__) fn(DT_N_S_soc_S_rtc_60008000, __VA_ARGS__) fn(DT_N_S_soc_S_xt_wdt_60008004, __VA_ARGS__) fn(DT_N_S_soc_S_rtc_timer_60008004, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_60004000, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_60013000, __VA_ARGS__) fn(DT_N_S_soc_S_i2s_6002d000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_60000000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_60010000, __VA_ARGS__) fn(DT_N_S_soc_S_ledc_60019000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_60043000, __VA_ARGS__) fn(DT_N_S_soc_S_counter_6001f000, __VA_ARGS__) fn(DT_N_S_soc_S_counter_60020000, __VA_ARGS__) fn(DT_N_S_soc_S_trng_3ff700b0, __VA_ARGS__) fn(DT_N_S_soc_S_can_6002b000, __VA_ARGS__) fn(DT_N_S_soc_S_spi_60024000, __VA_ARGS__) fn(DT_N_S_soc_S_watchdog_6001f048, __VA_ARGS__) fn(DT_N_S_soc_S_watchdog_60020048, __VA_ARGS__) fn(DT_N_S_soc_S_coretemp_60040058, __VA_ARGS__) fn(DT_N_S_soc_S_adc_60040000, __VA_ARGS__) fn(DT_N_S_soc_S_adc_60040004, __VA_ARGS__) fn(DT_N_S_soc_S_dma_6003f000, __VA_ARGS__) fn(DT_N_S_connector, __VA_ARGS__)
#define DT_FOREACH_OKAY_VARGS_HELPER(fn, ...) fn(DT_N, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_light_sleep, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_deep_sleep, __VA_ARGS__) fn(DT_N_S_pin_controller, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart0_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart0_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_uart0_default_S_group2, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim2_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim2_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_spim2_default_S_group2, __VA_ARGS__) fn(DT_N_S_pin_controller_S_i2c0_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_i2c0_default_S_group1, __VA_ARGS__) fn(DT_N_S_pin_controller_S_twai_default, __VA_ARGS__) fn(DT_N_S_pin_controller_S_twai_default_S_group1, __VA_ARGS__) fn(DT_N_S_wifi, __VA_ARGS__) fn(DT_N_S_esp32_bt_hci, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_soc_S_memory_4037c000, __VA_ARGS__) fn(DT_N_S_soc_S_memory_3fc80000, __VA_ARGS__) fn(DT_N_S_soc_S_interrupt_controller_600c2000, __VA_ARGS__) fn(DT_N_S_soc_S_systimer_60023000, __VA_ARGS__) fn(DT_N_S_soc_S_rtc_60008000, __VA_ARGS__) fn(DT_N_S_soc_S_rtc_timer_60008004, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_60004000, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_60013000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_60000000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_60043000, __VA_ARGS__) fn(DT_N_S_soc_S_counter_6001f000, __VA_ARGS__) fn(DT_N_S_soc_S_counter_60020000, __VA_ARGS__) fn(DT_N_S_soc_S_trng_3ff700b0, __VA_ARGS__) fn(DT_N_S_soc_S_can_6002b000, __VA_ARGS__) fn(DT_N_S_soc_S_spi_60024000, __VA_ARGS__) fn(DT_N_S_soc_S_watchdog_6001f048, __VA_ARGS__) fn(DT_N_S_connector, __VA_ARGS__)
#define DT_COMPAT_fixed_partitions_LABEL_mcuboot DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_0
#define DT_COMPAT_fixed_partitions_LABEL_mcuboot_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_image_0 DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_20000
#define DT_COMPAT_fixed_partitions_LABEL_image_0_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_image_1 DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_1f0000
#define DT_COMPAT_fixed_partitions_LABEL_image_1_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_storage DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3c0000
#define DT_COMPAT_fixed_partitions_LABEL_storage_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_image_scratch DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3e0000
#define DT_COMPAT_fixed_partitions_LABEL_image_scratch_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_coredump_partition DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions_S_partition_3f0000
#define DT_COMPAT_fixed_partitions_LABEL_coredump_partition_EXISTS 1

/*
 * Macros for compatibles with status "okay" nodes
 */
#define DT_COMPAT_HAS_OKAY_seeed_xiao_esp32c3 1
#define DT_COMPAT_HAS_OKAY_espressif_riscv 1
#define DT_COMPAT_HAS_OKAY_riscv 1
#define DT_COMPAT_HAS_OKAY_zephyr_power_state 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_pinctrl 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_wifi 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_bt_hci 1
#define DT_COMPAT_HAS_OKAY_simple_bus 1
#define DT_COMPAT_HAS_OKAY_zephyr_memory_region 1
#define DT_COMPAT_HAS_OKAY_mmio_sram 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_intc 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_systimer 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_rtc 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_rtc_timer 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_flash_controller 1
#define DT_COMPAT_HAS_OKAY_soc_nv_flash 1
#define DT_COMPAT_HAS_OKAY_fixed_partitions 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_gpio 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_i2c 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_uart 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_usb_serial 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_timer 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_trng 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_twai 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_spi 1
#define DT_COMPAT_HAS_OKAY_espressif_esp32_watchdog 1
#define DT_COMPAT_HAS_OKAY_seeed_xiao_gpio 1

/*
 * Macros for status "okay" instances of each compatible
 */
#define DT_N_INST_seeed_xiao_esp32c3_NUM_OKAY 1
#define DT_N_INST_espressif_riscv_NUM_OKAY 1
#define DT_N_INST_riscv_NUM_OKAY 1
#define DT_N_INST_zephyr_power_state_NUM_OKAY 2
#define DT_N_INST_espressif_esp32_pinctrl_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_wifi_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_bt_hci_NUM_OKAY 1
#define DT_N_INST_simple_bus_NUM_OKAY 1
#define DT_N_INST_zephyr_memory_region_NUM_OKAY 2
#define DT_N_INST_mmio_sram_NUM_OKAY 2
#define DT_N_INST_espressif_esp32_intc_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_systimer_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_rtc_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_rtc_timer_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_flash_controller_NUM_OKAY 1
#define DT_N_INST_soc_nv_flash_NUM_OKAY 1
#define DT_N_INST_fixed_partitions_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_gpio_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_i2c_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_uart_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_usb_serial_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_timer_NUM_OKAY 2
#define DT_N_INST_espressif_esp32_trng_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_twai_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_spi_NUM_OKAY 1
#define DT_N_INST_espressif_esp32_watchdog_NUM_OKAY 1
#define DT_N_INST_seeed_xiao_gpio_NUM_OKAY 1
#define DT_FOREACH_OKAY_seeed_xiao_esp32c3(fn) fn(DT_N)
#define DT_FOREACH_OKAY_VARGS_seeed_xiao_esp32c3(fn, ...) fn(DT_N, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_seeed_xiao_esp32c3(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_seeed_xiao_esp32c3(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_riscv(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_FOREACH_OKAY_VARGS_espressif_riscv(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_riscv(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_riscv(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_riscv(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_FOREACH_OKAY_VARGS_riscv(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_riscv(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_riscv(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_power_state(fn) fn(DT_N_S_cpus_S_power_states_S_light_sleep) fn(DT_N_S_cpus_S_power_states_S_deep_sleep)
#define DT_FOREACH_OKAY_VARGS_zephyr_power_state(fn, ...) fn(DT_N_S_cpus_S_power_states_S_light_sleep, __VA_ARGS__) fn(DT_N_S_cpus_S_power_states_S_deep_sleep, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_power_state(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_power_state(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_pinctrl(fn) fn(DT_N_S_pin_controller)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_pinctrl(fn, ...) fn(DT_N_S_pin_controller, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_pinctrl(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_pinctrl(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_wifi(fn) fn(DT_N_S_wifi)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_wifi(fn, ...) fn(DT_N_S_wifi, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_wifi(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_wifi(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_bt_hci(fn) fn(DT_N_S_esp32_bt_hci)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_bt_hci(fn, ...) fn(DT_N_S_esp32_bt_hci, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_bt_hci(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_bt_hci(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_simple_bus(fn) fn(DT_N_S_soc)
#define DT_FOREACH_OKAY_VARGS_simple_bus(fn, ...) fn(DT_N_S_soc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_simple_bus(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_simple_bus(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_memory_region(fn) fn(DT_N_S_soc_S_memory_4037c000) fn(DT_N_S_soc_S_memory_3fc80000)
#define DT_FOREACH_OKAY_VARGS_zephyr_memory_region(fn, ...) fn(DT_N_S_soc_S_memory_4037c000, __VA_ARGS__) fn(DT_N_S_soc_S_memory_3fc80000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_memory_region(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_memory_region(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_mmio_sram(fn) fn(DT_N_S_soc_S_memory_4037c000) fn(DT_N_S_soc_S_memory_3fc80000)
#define DT_FOREACH_OKAY_VARGS_mmio_sram(fn, ...) fn(DT_N_S_soc_S_memory_4037c000, __VA_ARGS__) fn(DT_N_S_soc_S_memory_3fc80000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_mmio_sram(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_mmio_sram(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_intc(fn) fn(DT_N_S_soc_S_interrupt_controller_600c2000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_intc(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_600c2000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_intc(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_intc(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_systimer(fn) fn(DT_N_S_soc_S_systimer_60023000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_systimer(fn, ...) fn(DT_N_S_soc_S_systimer_60023000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_systimer(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_systimer(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_rtc(fn) fn(DT_N_S_soc_S_rtc_60008000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_rtc(fn, ...) fn(DT_N_S_soc_S_rtc_60008000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_rtc(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_rtc(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_rtc_timer(fn) fn(DT_N_S_soc_S_rtc_timer_60008004)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_rtc_timer(fn, ...) fn(DT_N_S_soc_S_rtc_timer_60008004, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_rtc_timer(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_rtc_timer(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_flash_controller(fn) fn(DT_N_S_soc_S_flash_controller_60002000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_flash_controller(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_flash_controller(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_flash_controller(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_soc_nv_flash(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0)
#define DT_FOREACH_OKAY_VARGS_soc_nv_flash(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_soc_nv_flash(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_soc_nv_flash(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_fixed_partitions(fn) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions)
#define DT_FOREACH_OKAY_VARGS_fixed_partitions(fn, ...) fn(DT_N_S_soc_S_flash_controller_60002000_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_fixed_partitions(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_fixed_partitions(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_gpio(fn) fn(DT_N_S_soc_S_gpio_60004000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_gpio(fn, ...) fn(DT_N_S_soc_S_gpio_60004000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_gpio(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_gpio(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_i2c(fn) fn(DT_N_S_soc_S_i2c_60013000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_i2c(fn, ...) fn(DT_N_S_soc_S_i2c_60013000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_i2c(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_i2c(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_uart(fn) fn(DT_N_S_soc_S_uart_60000000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_uart(fn, ...) fn(DT_N_S_soc_S_uart_60000000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_uart(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_uart(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_usb_serial(fn) fn(DT_N_S_soc_S_uart_60043000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_usb_serial(fn, ...) fn(DT_N_S_soc_S_uart_60043000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_usb_serial(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_usb_serial(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_timer(fn) fn(DT_N_S_soc_S_counter_6001f000) fn(DT_N_S_soc_S_counter_60020000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_timer(fn, ...) fn(DT_N_S_soc_S_counter_6001f000, __VA_ARGS__) fn(DT_N_S_soc_S_counter_60020000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_timer(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_timer(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_trng(fn) fn(DT_N_S_soc_S_trng_3ff700b0)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_trng(fn, ...) fn(DT_N_S_soc_S_trng_3ff700b0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_trng(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_trng(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_twai(fn) fn(DT_N_S_soc_S_can_6002b000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_twai(fn, ...) fn(DT_N_S_soc_S_can_6002b000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_twai(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_twai(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_spi(fn) fn(DT_N_S_soc_S_spi_60024000)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_spi(fn, ...) fn(DT_N_S_soc_S_spi_60024000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_spi(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_spi(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_espressif_esp32_watchdog(fn) fn(DT_N_S_soc_S_watchdog_6001f048)
#define DT_FOREACH_OKAY_VARGS_espressif_esp32_watchdog(fn, ...) fn(DT_N_S_soc_S_watchdog_6001f048, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_espressif_esp32_watchdog(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_espressif_esp32_watchdog(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_seeed_xiao_gpio(fn) fn(DT_N_S_connector)
#define DT_FOREACH_OKAY_VARGS_seeed_xiao_gpio(fn, ...) fn(DT_N_S_connector, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_seeed_xiao_gpio(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_seeed_xiao_gpio(fn, ...) fn(0, __VA_ARGS__)

/*
 * Bus information for status "okay" nodes of each compatible
 */
